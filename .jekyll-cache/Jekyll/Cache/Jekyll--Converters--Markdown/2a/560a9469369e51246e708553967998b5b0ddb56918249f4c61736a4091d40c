I"”<p>Express√µes s√£o constru√≠das atrav√©s de opera√ß√µes e operandos.</p>

<p>Os operadores s√£o constru√ß√µes de linguagem que indicam quais opera√ß√µes podem ser aplicadas nos operandos. Na express√£o <code class="highlighter-rouge">1 + 3</code>, os literais <code class="highlighter-rouge">2</code> e <code class="highlighter-rouge">3</code> s√£o operandos e o sinal de adi√ß√£o <code class="highlighter-rouge">+</code> √© o operador.</p>

<p>H√° diversos tipos de operadores; tr√™s grupos de operadores bem conhecidos s√£o:</p>

<ul>
  <li>Operadores aritm√©ticos (como o <code class="highlighter-rouge">+</code> na express√£o <code class="highlighter-rouge">1 + 3</code>),</li>
  <li>Operadores de compara√ß√£o (como o <code class="highlighter-rouge">&gt;</code> na express√£o <code class="highlighter-rouge">1 &gt; 3</code>),</li>
  <li>Operadores l√≥gicos (como o <code class="highlighter-rouge">&amp;&amp;</code> na express√£o <code class="highlighter-rouge">1 &amp;&amp; 3</code>).</li>
</ul>

<p>Operadores s√£o utilizados para <em>processar</em> operandos. Logo naturalmente a express√£o express√£o <code class="highlighter-rouge">1 + 3</code> √© avaliada para <code class="highlighter-rouge">4</code>. Com base nisso, faz sentido dizer que um operando √© um par√¢metro de entrada para um operador?</p>

<p>Em outras palavras: poder√≠amos dizer que um operador √© um m√©todo que e os operandos s√£o valores passados por par√¢metro para esse m√©todo?</p>

<p>Sim, podemos! E √© exatamente assim que operadores s√£o implementados em Ruby: como m√©todos.</p>

<h2 id="ordem-de-avalia√ß√£o">Ordem de avalia√ß√£o</h2>

<p>Existe tamb√©m a ordem de avalia√ß√£o dos operadores, ou seja, h√° operadores que precisam ser executados antes de outros. A ordem de avalia√ß√£o √© determinada pela <em>preced√™ncia</em> dos operadores.</p>

<p>Operadores aritimeticos s√£o m√©todos</p>

<p>https://stackoverflow.com/questions/39311429/multiplying-string-by-integer-vs-integer-by-string-in-ruby/39311454</p>
:ET