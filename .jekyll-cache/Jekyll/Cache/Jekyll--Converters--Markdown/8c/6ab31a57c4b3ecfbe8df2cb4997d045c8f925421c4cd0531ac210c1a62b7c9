I"u∆<p><a href="/ruby-guide">Voltar ao come√ßo do guia</a></p>

<p>Programar √© fazer com que os dados sigam um determinado caminho (podendo sofrer modifica√ß√µes ao longo desse caminho). O controle do fluxo se refere a ordem de como os dados ir√£o ser executados ao longo deste caminho (que √© a execu√ß√£o do programa).</p>

<p>H√° diversas formas de controlar o fluxo dos dados em um programa, por exemplo:</p>

<ul>
  <li>Sequencial: <em>Fa√ßa isso, depois isso, depois isso, etc</em>. Esta √© a forma mais b√°sica de controle de fluxo de execu√ß√£o. Ela se refere a realizar avalia√ß√µes de express√µes em sequencia, uma ap√≥s a outra.</li>
  <li>Condicional: <em>Se determinada condi√ß√£o for verdadeira, fa√ßa isso, do contr√°rio, fa√ßa aquilo</em>. Nessa forma de controle de fluxo, temos pelo menos duas alternativas de execu√ß√£o do nosso programa, uma das quais n√£o dever√° executada.</li>
  <li>Itera√ß√£o: <em>Fa√ßa isso enquanto determinada condi√ß√£o for verdadeira</em>. Itera√ß√£o se refere a execu√ß√£o do mesmo trecho de c√≥digo m√∫ltiplas vezes, enquanto uma determinada condi√ß√£o for verdadeira.</li>
  <li>Recurs√£o: <em>Pe√ßa para voc√™ mesmo fazer isso</em>. Recurs√£o acontece quando uma rotinha invoca ela mesma.</li>
  <li>Exce√ß√£o: <em>Caso algo d√™ errado, siga por esse outro caminho</em>. Exce√ß√£o s√£o constru√ß√µes que alteram o fluxo de dados na presen√ßa de um comportamento excepcional.</li>
  <li>Concorrente: <em>Fa√ßa m√∫ltiplas coisas ao mesmo tempo</em>. Embora as express√µes n√£o sejam <em>exatamente</em> avaliadas ao mesmo tempo, programa√ß√£o concorrente ajuda para deixar o computador menos ocioso.</li>
</ul>

<p>H√° ainda outras constru√ß√µes de linguagem como o <code class="highlighter-rouge">goto</code> (em C), que alteram o fluxo de dados. Mas esses s√£o t√≥picos para outro guia üôÉ.</p>

<p>Neste cap√≠tulo vamos aprender sobre condicionais e itera√ß√µes. Recurs√£o ser√° abordado no cap√≠tulo sobre m√©todos. Mais pra frente no guia tamb√©m teremos um cap√≠tulo sobre exce√ß√£o.</p>

<h2 id="condicionais">Condicionais</h2>

<p>Durante a execu√ß√£o do programa, diferentes caminhos (ou trechos de c√≥digo) podem ser percorridos (ou executados).</p>

<p>Uma condicional √© um desvio no caminho. Condicionais necessitam de duas constru√ß√µes de linguagem:</p>

<ul>
  <li>uma constru√ß√£o que nos ajude a implementar um desvio, e</li>
  <li>um conjunto de operadores de compara√ß√£o (como <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&lt;</code>, ou <code class="highlighter-rouge">==</code>) ou operadores l√≥gicos (como <code class="highlighter-rouge">&amp;&amp;</code> ou <code class="highlighter-rouge">||</code>).</li>
</ul>

<p>A constru√ß√£o de condicionais √© frequentemente implementada usando uma estrutura de um <code class="highlighter-rouge">If‚Äìthen(‚Äìelse)</code>. O else est√° entre parenteses pois √© parte opcional da estrutura. Essa estrutura pode ser melhor entendida quando organizada em blocos:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>If (condi√ß√£o booleana) Then
    (consequ√™ncia)
Else
    (alternativa)
End
</code></pre></div></div>

<p>A primeira linha verifica se uma determinada condi√ß√£o √© verdadeira (por exemplo, se o usu√°rio e senha estiverem corretos). Se o resultado dessa primeira linha for verdadeiro, a segunda linha, com a <code class="highlighter-rouge">(consequ√™ncia)</code> √© executada . Do contr√°rio (<code class="highlighter-rouge">Else</code>), a quarta linha, com a <code class="highlighter-rouge">(alternativa)</code> √© executada. Lembre-se que o <code class="highlighter-rouge">Else</code> n√£o √© obrigat√≥rio em um <code class="highlighter-rouge">if</code>. Ele existe para tratar casos excepcionais (que nem sempre precisam existir). Por fim, a quinta linha encerra o procedimento.</p>

<p>Diferentes linguagens de programa√ß√£o implementam condicionais de forma ligeiramente diferente. Em Ruby condicionais seguem a seguinte estrutura sint√°tica:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span> <span class="k">then</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Antes de tudo: em vez de executar esse c√≥digo direto no <code class="highlighter-rouge">irb</code>, dessa vez vamos criar um arquivo chamado <code class="highlighter-rouge">ifs.rb</code> e colar e salvar esse conte√∫do dentro dele. Pra rodar esse arquivo, basta navegar pela linha de comando at√© onde o arquivo foi salvo e rodar o comando <code class="highlighter-rouge">ruby ifs.rb</code>.</p>

<p>O motivo para usar um arquivo de texto no lugar de colocar o c√≥digo direto no interpretador √© que, nesse momento, vamos come√ßar a fazer v√°rias modifica√ß√µes no nosso programa. A medida que o c√≥digo for mudando e  crescendo, facilitar√° a nossa vida se n√≥s tivermos o c√≥digo salvo em algum arquivo; do contr√°rio, a cada mudan√ßa ter√≠amos que escrever todo o codigo novamente no interpretador (chato, heim?).</p>

<p>Voltando ao nosso exemplo. Perceba que a estrutura em Ruby √© muito semelhante a estrutura de blocos apresentada anteriormente. No entanto, em Ruby, a instru√ß√£o <code class="highlighter-rouge">then</code> ap√≥s o <code class="highlighter-rouge">if</code> √© opcional e pode ser omitida. Parece tamb√©m ser uma pr√°tica comum em programadores Ruby, logo, ao longo do guia, vamos evitar utilizar o <code class="highlighter-rouge">then</code>.</p>

<p>Outro ponto importante √© que sempre abrimos um <code class="highlighter-rouge">if</code> (ou um bloco, de maneira mais geral, como veremos mais para frente neste guia), n√≥s tamb√©m precisamos fecha-lo. Se fecha um <code class="highlighter-rouge">if</code> (ou um bloco) usando a instru√ß√£o <code class="highlighter-rouge">end</code>. E se n√£o fecharmos um bloco com um <code class="highlighter-rouge">end</code>? Algo como o exemplo abaixo. O que aconteceria?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
</code></pre></div></div>

<p>Neste caso, o interpretador de Ruby n√£o entende que o programa como v√°lido e lan√ßa o seguinte erro: <code class="highlighter-rouge">ifs.rb:3: syntax error, unexpected end-of-input, expecting `end'</code>.  Esta mensagem √© a forma que o interpretador tem de nos ajudar a encontrar o erro. No caso, ele est√° nos dizendo √© que o fim da entrada foi terminada de forma inesperada, e que se esperava uma instru√ß√£o <code class="highlighter-rouge">end</code>.</p>

<p>Poder√≠amos melhorar um pouco o nosso programa, fazendo com que ele nos avise quando o valor da vari√°vel seja diferente de <code class="highlighter-rouge">10</code>. A instru√ß√£o <code class="highlighter-rouge">else</code> √© excelente para tratar casos assim. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade n√£o √© igual 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Note tamb√©m que embora tenhamos agora duas condicionais (um <code class="highlighter-rouge">if</code> e um <code class="highlighter-rouge">else</code>) temos somente um √∫nico <code class="highlighter-rouge">end</code>. Isso acontece pois o <code class="highlighter-rouge">end</code> est√° associado ao bloco <code class="highlighter-rouge">if</code>, e n√£o ao bloco <code class="highlighter-rouge">else</code>.</p>

<p>Vamos continuar evoluindo o nosso programa. Em vez de apensar saber somente se um valor √© igual a <code class="highlighter-rouge">10</code>, queremos saber se ele √© maior, menor, ou igual. Como poder√≠amos fazer isso? Uma poss√≠vel solu√ß√£o seria utilizar os operadores que vimos no <a href="/ruby-guide/exp">√∫ltimo cap√≠tulo</a>, e adicionarmos um novo <code class="highlighter-rouge">if</code> para fazer as compara√ß√µes necess√°rias. Algo como o exemplo abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">if</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Agora √© s√≥ salvar e rodar novamente o comando <code class="highlighter-rouge">ruby ifs.rb</code>.</p>

<p>Mas, calma. N√£o funcionou. Ao executar, apareceu novamente a mensagem de erro: <code class="highlighter-rouge">syntax error, unexpected end-of-input, expecting `end'</code>.</p>

<p>Isso acontece pois temos dois <code class="highlighter-rouge">if</code>s no c√≥digo. Como o segundo <code class="highlighter-rouge">if</code> foi declarado logo ap√≥s o primeiro <code class="highlighter-rouge">if</code>, o interpretador de Ruby entende que o segundo <code class="highlighter-rouge">if</code> est√° dentro do primeiro <code class="highlighter-rouge">if</code>; ou seja, o segundo <code class="highlighter-rouge">if</code> s√≥ ser√° executado caso a instru√ß√£o <code class="highlighter-rouge">a == 10</code> seja avaliada para <code class="highlighter-rouge">true</code> (assim como acontece com o <code class="highlighter-rouge">puts</code> dentro do primeiro <code class="highlighter-rouge">if</code>).</p>

<p>No entanto, o que queremos √© que o segundo <code class="highlighter-rouge">if</code> seja executado caso a express√£o dentro do primeiro <code class="highlighter-rouge">if</code> seja avaliada para <code class="highlighter-rouge">false</code>; ou seja, queremos que o segundo <code class="highlighter-rouge">if</code> seja o caso contr√°rio do primeiro <code class="highlighter-rouge">if</code>.</p>

<p>Em Ruby, podemos usar a instru√ß√£o <code class="highlighter-rouge">elsif</code> para indicar <em>o caso contr√°rio</em>. Para isso, o <code class="highlighter-rouge">elsif</code> nunca deve existir sozinho; deve-se sempre primeiro ter um <code class="highlighter-rouge">if</code> para que exista algum caso contr√°rio (<code class="highlighter-rouge">elsif</code>).</p>

<p>Mas, o <code class="highlighter-rouge">else</code> n√£o seria tamb√©m o caso contr√°rio do <code class="highlighter-rouge">if</code>? Qual seria a diferen√ßa de um <code class="highlighter-rouge">elsif</code> para um <code class="highlighter-rouge">else</code>? A diferen√ßa de um <code class="highlighter-rouge">elsif</code> para um <code class="highlighter-rouge">else</code> √© que o <code class="highlighter-rouge">elsif</code> trata de casos intermedi√°rios enquanto que o <code class="highlighter-rouge">else</code> trata de todos os demais casos.</p>

<p>Voltando ao nosso exemplo anterior, podemos agora corrigi-lo para usar um <code class="highlighter-rouge">elsif</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Se quisessemos ser mais espec√≠ficos, poder√≠amos ter v√°rios encadeamentos de <code class="highlighter-rouge">elsif</code> dentro uma instru√ß√£o <code class="highlighter-rouge">if</code>.  Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">30</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 20"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>A estrutra dos <code class="highlighter-rouge">if</code>s est√° certa, mas parece que tem algo de estranho nesse c√≥digo. Vamos testar com alguns valores. rode o seu programa quatro vezes, cada uma com uma entrada diferente, por exemplo: <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">15</code> e <code class="highlighter-rouge">35</code>. Testando com <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">15</code>, o c√≥digo imprime o que era de fato esperado. Mas quando testamos como <code class="highlighter-rouge">35</code>, o c√≥digo executado √© aquele que est√° dentro da express√£o <code class="highlighter-rouge">idade &gt; 10</code>. Isso faz sentido, uma vez que <code class="highlighter-rouge">35</code> √© maior do que <code class="highlighter-rouge">10</code>. No entanto, gostar√≠amos que o c√≥digo dentro da express√£o <code class="highlighter-rouge">idade &gt; 30</code> fosse executado. Como poder√≠amos ter essa garantia?</p>

<p>Uma poss√≠vel solu√ß√£o seria determinar uma faixa de valores para cada condi√ß√£o <code class="highlighter-rouge">elsif</code>? Algo como <em>se idade entre x e y, fa√ßa alguam coisa</em>. Perceba que fizemos uso de um conector <em>e</em> na nossa express√£o em Portugu√™s acima. Como podemos traduzir essa express√£o em Portugu√™s para Ruby? Podemos usar os operadores l√≥gicos que vimos no <a href="/ruby-guide/exp">h√° algunas cap√≠tulos</a>! A mesma express√£o em Ruby seria algo como: <code class="highlighter-rouge">idade &lt; 20 or idade &gt; 30</code>. A vers√£o com operadores l√≥gicos do nosso programa seria algo como:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">idade</span> <span class="o">&lt;=</span> <span class="mi">20</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">20</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 20"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Agora sim conseguimos resolver o problema anterior!</p>

<hr />
<p><strong>IMPORTANTE</strong></p>

<p>Perceba que a medida que o programa cresce, a complexidade de entender o que acontece com o programa tamb√©m cresce. Em poucas linhas de c√≥digo, estamos usando cinco operadores e quatro caminhos diferentes. Raciocinar qual caminho uma determinada entrada vai percorrer necessita de um esfor√ßo cognitivo maior, mesmo embora o nosso programa tenha somente 11 linhas de c√≥digo. Condicionais (e itera√ß√µes como veremos mais pra frente) rapidamente adicionam complexidade no c√≥digo. No entanto, √© muito d√≠ficil programar sem utilizar essas constru√ß√µes. Toda vez que voc√™ for adicionar um <code class="highlighter-rouge">if</code> no c√≥digo, tenha em mente que n√£o √© somente um <code class="highlighter-rouge">if</code>, e sim um novo degrau de complexidade no c√≥digo. Programa √© tomar decis√µes.</p>

<hr />

<h3 id="unless">Unless</h3>

<p>Ruby conta ainda com alguns particularidades para trabalhar com condicionais. Por exemplo, toda vez que temos uma instru√ß√£o como <code class="highlighter-rouge">if a &gt; b</code>, o <code class="highlighter-rouge">if</code> avalia se o resultado da express√£o √© <code class="highlighter-rouge">true</code>. No entanto, h√° casos em que gostar√≠amos de saber se o resultado da express√£o √© <code class="highlighter-rouge">false</code>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">not</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Usamos o operador l√≥gico <code class="highlighter-rouge">not</code> para representar a nega√ß√£o de uma express√£o. Como vimos no cap√≠tulo anterior, <code class="highlighter-rouge">not true # =&gt; false</code>. Por√©m, em Ruby, existe ainda a instru√ß√£o <code class="highlighter-rouge">unless</code>. A instru√ß√£o <code class="highlighter-rouge">unless</code> √© apenas um atalho para o <code class="highlighter-rouge">if not</code>. Alguns consideram quem ela facilita o entendimento de uma express√£o. Logo, o mesmo c√≥digo escrito acima poderia ser re-escrito usando <code class="highlighter-rouge">unless</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="if-em-uma-linha">If em uma linha</h3>

<p>Por fim, caso voc√™ queira fazer somente uma √∫nica condi√ß√£o, Ruby ainda fornece outros atalhos. Por exemplo, o mesmo c√≥digo acima poderia ser escrito usando um <code class="highlighter-rouge">if</code> de uma √∫nica linha:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span> <span class="k">if</span> <span class="n">not</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span>
<span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span> <span class="k">unless</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span>
</code></pre></div></div>

<p>Por fim, caso voc√™ precise de um <code class="highlighter-rouge">if</code>/<code class="highlighter-rouge">else</code> de uma linha, voc√™ pode se apoiar no operador tern√°rio.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span> <span class="p">?</span> <span class="s2">"Bem vindo!"</span> <span class="p">:</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do!"</span>
</code></pre></div></div>

<h3 id="o-operador-">O operador ||=</h3>

<p>Como vimos no <a href="/ruby-guide/types">cap√≠tulo anterior</a>, vari√°veis podem ser atribu√≠das sem nenhum valor, ou seja, um <code class="highlighter-rouge">nil</code>. No entanto, as vezes √© comum termos que verificar se o valor de uma vari√°vel √© diferente de <code class="highlighter-rouge">nil</code> antes de fazer uma atribui√ß√£o. Para esses casos, podemos usar o operador <code class="highlighter-rouge">||=</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="kp">nil</span>
<span class="n">idade</span> <span class="o">||=</span> <span class="mi">18</span>
<span class="n">idade</span> <span class="o">||=</span> <span class="mi">18</span>


</code></pre></div></div>

<h2 id="itera√ß√µes">Itera√ß√µes</h2>

<p>Itera√ß√£o √© a forma em que um program tem de repetir uma determina opera√ß√£o, at√© que uma determinada condi√ß√£o seja atendida. H√° diversas estruturas de repeti√ß√£o em Ruby, como o <code class="highlighter-rouge">for</code> e o<code class="highlighter-rouge">while</code>. No entanto, talvez a forma mais simples de se fazer uma repeti√ß√£o em Ruby √© o m√©todo <code class="highlighter-rouge">loop</code>.</p>

<p>Antes de continuarmos, vamos criar um arquivo chamado <code class="highlighter-rouge">its.rb</code> no mesmo diret√≥rio do arquivo <code class="highlighter-rouge">ifs.rb</code>. Vamos seguir editando diretamente no arquivo <code class="highlighter-rouge">its.rb</code> e executando-o atrav√©s do comando <code class="highlighter-rouge">ruby its.rb</code>.</p>

<h3 id="dowhile">do/while</h3>

<p>O m√©todo <code class="highlighter-rouge">loop</code> √© uma estrutura de repeti√ß√£o no formato de um <code class="highlighter-rouge">do/while</code>, ou seja, ele primeiro executa uma a√ß√£o para depois verificar se √© necess√°rio executar novamente. Ou seja, o <code class="highlighter-rouge">loop</code> √© executado ao menos uma vez. Na sua forma mais simples, o  <code class="highlighter-rouge">loop</code> executa um trecho de c√≥digo dentro do bloco at√© que haja uma inteven√ß√£o manual (como um control+c). Como vimos anteriormente, um bloco que pode ser executado em uma √∫nica linha pode ser delimitado por chaves <code class="highlighter-rouge">{}</code>. Um <code class="highlighter-rouge">loop</code> de uma √∫nica linha tem o seguinte formato:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kp">loop</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">"Minha primeira repeti√ß√£o usando 'loop'."</span> <span class="p">}</span>
</code></pre></div></div>

<p>No entanto, o caso um bloco tenha mais de uma linha, podemos escreve-lo usando a estrutura <code class="highlighter-rouge">do ... end</code>. Poder√≠amos ent√£o escrever o mesmo procedimento acima usando a estrutura de m√∫ltiplas linhas:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">loop</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"Minha primeira repeti√ß√£o usando 'loop'."</span>
<span class="k">end</span>
</code></pre></div></div>

<p>No entanto, faz pouco sentido o nosso programa ficar imprimindo essa string indefinidamente. Pedir para um usu√°rio do nosso programa encerra-lo manualmente tamb√©m n√£o parece uma boa op√ß√£o. Outra forma mais interessante de encerrar a execu√ß√£o de um <code class="highlighter-rouge">loop</code> √© atrav√©s da instru√ß√£o <code class="highlighter-rouge">break</code>. O <code class="highlighter-rouge">break</code> for√ßa que a repeti√ß√£o se encerre.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">loop</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"Minha primeira repeti√ß√£o usando 'loop'."</span>
  <span class="k">break</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Nesse exemplo conseguimos perceber que a instru√ß√£o dentro do <code class="highlighter-rouge">loop</code> √© executada somente uma √∫nica vez, at√© alcan√ßar o <code class="highlighter-rouge">break</code> e ent√£o encerrar a execu√ß√£o do <code class="highlighter-rouge">loop</code>. Parece que os dois exemplos usando <code class="highlighter-rouge">loop</code> s√£o extremos. No primeiro caso, n√≥s iteramos indefinidamente, at√© que o usu√°rio manualmente encerre a opera√ß√£o. J√° no segundo exemplo, n√£o conseguimos iterar nem uma segunda vez. Como poder√≠amos fazer para ter um pouco mais de controle no nosso c√≥digo, e decidir quantas vezes n√≥s queremos iterar um trecho de c√≥digo? Poder√≠amos usar um <code class="highlighter-rouge">if</code> pra decidir quando devemos encerrar a execu√ß√£o do <code class="highlighter-rouge">loop</code>? Vejamos o pr√≥ximo exemplo.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kp">loop</span> <span class="k">do</span>
  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">succ</span>
  <span class="nb">puts</span> <span class="s2">"Repeti√ß√£o de n√∫mero </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> usando 'loop'."</span>

  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
    <span class="nb">puts</span> <span class="s2">"Vou encerrar essa repeti√ß√£o agora."</span>
    <span class="k">break</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Nesse exemplo, usamos uma vari√°vel chamada <code class="highlighter-rouge">i</code> para controlar a quantidade de vezes que nosso <code class="highlighter-rouge">loop</code> deve iterar. A cada nova itera√ß√£o do <code class="highlighter-rouge">loop</code>, a vari√°vel <code class="highlighter-rouge">i</code> √© incrementada (atrav√©s do m√©todo <code class="highlighter-rouge">succ</code>). A quantidade de vezes que o <code class="highlighter-rouge">loop</code> √© executado √© controlado pela condi√ß√£o <code class="highlighter-rouge">if i == 5</code>.</p>

<h3 id="while">while</h3>

<p>Diferente do <code class="highlighter-rouge">loop</code>, em que a verifica√ß√£o do la√ßo acontece no final, no <code class="highlighter-rouge">while</code> a verifica√ß√£o acontece no come√ßo. De fato, a primeira instru√ß√£o de um <code class="highlighter-rouge">while</code> √© na realidade uma condi√ß√£o que verifica se o <code class="highlighter-rouge">while</code> deve ainda ser executado. Enquanto o resultado da condi√ß√£o seja <code class="highlighter-rouge">true</code>, o bloco √© executado; caso o resultado da condi√ß√£o seja <code class="highlighter-rouge">false</code>, o <code class="highlighter-rouge">while</code> n√£o √© mais executado. O mesmo programa do exemplo anterior poderia ser escrito usando um <code class="highlighter-rouge">while</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span>
  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">succ</span>
  <span class="nb">puts</span> <span class="s2">"Repeti√ß√£o de n√∫mero </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> usando 'loop'."</span>
<span class="k">end</span>
</code></pre></div></div>

<p>O exemplo com <code class="highlighter-rouge">while</code> √© mais conciso do que o exemplo usando <code class="highlighter-rouge">loop</code>, pois no <code class="highlighter-rouge">while</code> n√£o foi preciso utilizar um <code class="highlighter-rouge">if</code> que testa a quantidade de vezes o la√ßo foi executado; esse teste √© feito na primeira chamada do <code class="highlighter-rouge">while</code>. Como n√£o precisamos do <code class="highlighter-rouge">if</code>, tamb√©m n√£o precisamos do <code class="highlighter-rouge">break</code>, pois o <code class="highlighter-rouge">while</code> n√£o ser√° mais executado quando o resultado da express√£o <code class="highlighter-rouge">i &lt; 5</code> for <code class="highlighter-rouge">false</code>.</p>

<p>Al√©m de ser mais conciso, o <code class="highlighter-rouge">while</code> tamb√©m √© muito utilizado quando queremos que nosso programa rode indefinidamente. Vamos voltar ao nosso exemplo do c√°lculo de imposto do <a href="/ruby-guide/vars">cap√≠tulo sobre vari√°veis</a>. No exemplo daquele cap√≠tulo, n√≥s calcul√°vamos o imposto de somente um produto. Poder√≠amos agora avan√ßar nesse exemplo, fazendo o c√°lculo para mais de um produto. Como a princ√≠pio n√£o sabemos quantos produtos devemos calcular o imposto, usamos um <code class="highlighter-rouge">while true</code>, que vai repetir o procedimento de calculo indefinidamente, at√© o usu√°rio nos avisar que n√£o precisa mais calcular o imposto.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="k">while</span> <span class="kp">true</span>
  <span class="nb">puts</span> <span class="s2">"Digite o valor do produto: "</span>

  <span class="n">produto</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

  <span class="n">produto_com_imposto</span> <span class="o">=</span> <span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"O valor do produto com imposto √©: </span><span class="si">#{</span><span class="n">produto_com_imposto</span><span class="si">}</span><span class="s2">"</span>

  <span class="nb">puts</span> <span class="s2">"Digite 'S' se voc√™ gostaria de calcular outro produto? "</span>

  <span class="n">continua</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

  <span class="k">if</span> <span class="n">continua</span><span class="p">.</span><span class="nf">upcase</span> <span class="o">!=</span> <span class="s1">'S'</span>
    <span class="k">break</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Nesse exemplo, n√≥s come√ßamos pedindo para o usu√°rio nos informar o valor do produto. Fazemos o c√°lculo do imposto e imprimimos o resultado na tela. Em seguida, perguntamos ao usu√°rio se ele gostaria de calcular o imposto de outro produto. Caso a resposta seja <code class="highlighter-rouge">'S'</code>, o la√ßo itera novamente. Como vimos mais a cima, √© poss√≠vel compor condicionais em uma √∫nica linha. Podemos tirar vantagem desse recurso e tornar o trecho que encerra a execu√ß√£o do programa mais conciso. Algo como:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="k">while</span> <span class="kp">true</span>
  <span class="nb">puts</span> <span class="s2">"Digite o valor do produto: "</span>

  <span class="n">produto</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

  <span class="n">produto_com_imposto</span> <span class="o">=</span> <span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"O valor do produto com imposto √©: </span><span class="si">#{</span><span class="n">produto_com_imposto</span><span class="si">}</span><span class="s2">"</span>

  <span class="nb">puts</span> <span class="s2">"Digite 'S' se voc√™ gostaria de calcular outro produto? "</span>

  <span class="n">continua</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>
  <span class="k">break</span> <span class="k">if</span> <span class="n">continua</span><span class="p">.</span><span class="nf">upcase</span> <span class="o">!=</span> <span class="s1">'S'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Por fim, como estamos testando uma nega√ß√£o ao fim do programa, poder√≠amos trocar o <code class="highlighter-rouge">if</code> por um <code class="highlighter-rouge">unless</code>, a alterando a instru√ß√£o para: <code class="highlighter-rouge">break unless continua.upcase == 'S'</code>. Assim o nosso c√≥digo fica mais leg√≠vel (quase que escrito em Ingl√™s).</p>

<hr />
<p><strong>Curiosidade</strong></p>

<p>Como em Ruby existe sempre mais de uma forma pra fazer a mesma coisa, existe tamb√©m a estrutura de repeti√ß√£o <code class="highlighter-rouge">until</code>. O <code class="highlighter-rouge">until</code> se assemelha a um <code class="highlighter-rouge">while</code>, exceto pelo fato de que  o <code class="highlighter-rouge">until</code> √© executado enquanto a condi√ß√£o for <code class="highlighter-rouge">false</code>.</p>

<hr />

<h3 id="for-loop">for loop</h3>

<p>Diferente dos mecanismos de itera√ß√£o que vimos at√© o momento neste cap√≠tulo, o la√ßo <code class="highlighter-rouge">for</code> itera sobre um conjunto de elementos. Outra diferen√ßa com rela√ß√£o ao <code class="highlighter-rouge">do/while</code> e o <code class="highlighter-rouge">while</code> √© que no <code class="highlighter-rouge">for</code> n√≥s temos menos preocupa√ß√£o em cair em um loop infinito, uma vez que vamos estrar trabalhando com conjuntos finitos. Algo como:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">5</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"Iterando meu primeiro la√ßo com 'for' </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2"> vezes"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Esse la√ßo pode ser lido da seguinte forma: a instru√ß√£o <code class="highlighter-rouge">1..5</code> cria um objeto do tipo <code class="highlighter-rouge">Enumerator</code> com a representa√ß√£o dos elementos de <code class="highlighter-rouge">1</code> at√© <code class="highlighter-rouge">5</code>. O <code class="highlighter-rouge">for</code> ir√° percorrer cada um desses elementos. Para cada itera√ß√£o, o valor do elemento ser√° armazenado na vari√°vel <code class="highlighter-rouge">i</code>. Ap√≥s a atribui√ß√£o da vari√°vel <code class="highlighter-rouge">i</code>, o bloco √© executado.</p>

<p>Mas como poder√≠amos fazer o mesmo exemplo anterior usando um <code class="highlighter-rouge">for</code>?  Ter√≠amos que mudar um pouco o nosso algoritmo, uma vez que precisamos saber exatamente quantos produtos vamos calcular o imposto. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="nb">puts</span> <span class="s2">"Quantos produtos voc√™ deseja calular o imposto?"</span>
<span class="n">produtos_para_calcular</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="n">produtos_para_calcular</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s2">"Digite o valor do produto </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">: "</span>

  <span class="n">produto</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

  <span class="n">produto_com_imposto</span> <span class="o">=</span> <span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"O valor do produto com imposto √©: </span><span class="si">#{</span><span class="n">produto_com_imposto</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>O <code class="highlighter-rouge">for</code> pode ser utilizado com um array no lugar de um range. Por exemplo, se e o usu√°rio fornecesse os produtos antecipadamente (em vez de um por um), poder√≠amos fazer o c√°lculo dos produtos da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="n">produtos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">70</span><span class="p">]</span>

<span class="k">for</span> <span class="n">produto</span> <span class="k">in</span> <span class="n">produtos</span> <span class="k">do</span>
  <span class="n">produto_com_imposto</span> <span class="o">=</span> <span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"O valor do produto </span><span class="si">#{</span><span class="n">produto</span><span class="si">}</span><span class="s2"> com imposto √©: </span><span class="si">#{</span><span class="n">produto_com_imposto</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Perceba que nesse exemplo, n√£o foi mais necess√°rio pedir informa√ß√µes para o usu√°rio ao longo da execu√ß√£o do programa, pois nosso array de <code class="highlighter-rouge">produtos</code> j√° estava preenchido desde o come√ßo. Perceba tamb√©m que mudamos o nome da vari√°vel <code class="highlighter-rouge">i</code> para <code class="highlighter-rouge">produtos</code>. Poder√≠amos deixar <code class="highlighter-rouge">i</code> como estava nos exemplos anteriores, no entanto, alterar o nome para <code class="highlighter-rouge">produto</code> torna a vari√°vel mais intelig√≠vel (ou seja, basta olhar pra saber do que se trata).</p>

<p>Vamos encerrar o nosso exemplo de c√°lculo de imposto fazendo uma √∫ltima modifica√ß√£o no algoritmo. Nosso novo requisito pede que n√£o calculemos o imposto caso o valor do produto seja menor do que R$ 15. Como poder√≠amos fazer para evitar o c√°lculo de um √∫nico produto? Se usarmos o <code class="highlighter-rouge">break</code>, todo o nosso la√ßo ser√° interrompido. Para casos como esse, podemos usar a instru√ß√£o <code class="highlighter-rouge">next</code> que pula para a pr√≥xima itera√ß√£o do la√ßo. O novo requisito poderia ser implementado da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="n">produtos</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">70</span><span class="p">]</span>

<span class="k">for</span> <span class="n">produto</span> <span class="k">in</span> <span class="n">produtos</span> <span class="k">do</span>
  <span class="k">if</span> <span class="n">produto</span> <span class="o">&lt;</span> <span class="mi">15</span>
    <span class="k">next</span>
  <span class="k">end</span>

  <span class="n">produto_com_imposto</span> <span class="o">=</span> <span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"O valor do produto </span><span class="si">#{</span><span class="n">produto</span><span class="si">}</span><span class="s2"> com imposto √©: </span><span class="si">#{</span><span class="n">produto_com_imposto</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="iterators">Iterators</h3>

<p>Como vimos no <a href="/ruby-guide/types">cap√≠tulo sobre tipos de dados</a>, os tipos num√©ricos implementam o m√©todo <code class="highlighter-rouge">times</code>, que repete um bloco <code class="highlighter-rouge">n</code> vezes. Chamamos m√©todos com comportamento de repeti√ß√£o de <code class="highlighter-rouge">iterators</code>.</p>

<p>Mais pragmaticamente, a express√£o <code class="highlighter-rouge">5.times</code> chama o m√©todo <code class="highlighter-rouge">times</code> do objeto <code class="highlighter-rouge">5</code> da classe  <code class="highlighter-rouge">Integer</code>. Apenas executar a instru√ß√£o <code class="highlighter-rouge">5.times</code> n√£o retorna nada interessante ‚Äì um estranho <code class="highlighter-rouge">#&lt;Enumerator: 5:times&gt;</code>, que nada mais √© do que a inst√¢ncia de outro tipo de dado, chamado <code class="highlighter-rouge">Enumerator</code>; <code class="highlighter-rouge">Enumerator</code> √© a implementa√ß√£o em Ruby de um iterator. Precisamos passar um bloco para o m√©todo executar. Um exemplo simples de bloco seria uma instru√ß√£o delimitada por chaves <code class="highlighter-rouge">{}</code>, algo como: <code class="highlighter-rouge">5.times {|i| puts "Eu sei iterar at√© #{i}"}</code>. Mesmo para aqueles que j√° estudaram uma linguagem de programa√ß√£o, esse trecho de c√≥digo pode parecer confuso. Vamos ent√£o olhar o passo a passo dessa instru√ß√£o no microsc√≥pio:</p>

<ul>
  <li>N√≥s criamos um objeto inteiro de valor <code class="highlighter-rouge">5</code>.</li>
  <li>N√≥s chamamos o m√©todo <code class="highlighter-rouge">times</code> que existe dentro da classe <code class="highlighter-rouge">Integer</code>.</li>
  <li>N√≥s passamos as instru√ß√µes dentro do bloco <code class="highlighter-rouge">{}</code> como par√™metro para o m√©todo <code class="highlighter-rouge">times</code>.</li>
  <li>Agora o m√©todo <code class="highlighter-rouge">times</code> chama o bloco que passamos por par√¢metro.</li>
  <li>Na primeira chamada ao bloco, √© passado o valor <code class="highlighter-rouge">0</code> para a vari√°vel <code class="highlighter-rouge">i</code> que foi definida localmente, dentro do bloco (representado por <code class="highlighter-rouge">|i|</code>).</li>
  <li>Dentro do bloco, o comando <code class="highlighter-rouge">puts</code> √© executado e usa o valor da vari√°vel <code class="highlighter-rouge">i</code>. Como essa √© a √∫nica instru√ß√£o dentro do nosso bloco, ap√≥s a execu√ß√£o o bloco retorna com o valor <code class="highlighter-rouge">0</code> de volta para o m√©todo <code class="highlighter-rouge">times</code>.</li>
  <li>O m√©todo <code class="highlighter-rouge">times</code> chama novamente o bloco, agora passando o valor <code class="highlighter-rouge">1</code> para a vari√°vel <code class="highlighter-rouge">i</code> dentro do bloco.</li>
  <li>O passos se repetem at√© que seja passado o √∫ltimo valor para o bloco.</li>
  <li>Por fim, o m√©todo <code class="highlighter-rouge">times</code> retorna o inteiro inicialmente fornecido.</li>
</ul>

<p>O m√©todo <code class="highlighter-rouge">times</code> n√£o √© o √∫nico m√©todo que fornece a implementa√ß√£o de um iterator, pelo contr√°rio. Outros tipos b√°sicos da linguagem como  <code class="highlighter-rouge">Range</code> e <code class="highlighter-rouge">Arrays</code> contam, dentre v√°rios m√©todos, com o m√©todo <code class="highlighter-rouge">map</code>. O m√©todo <code class="highlighter-rouge">map</code> executa uma instru√ß√£o em um bloco para cada objeto enumer√°vel. Por exemplo, poder√≠amos converter um array de inteiros para sua representa√ß√£o bin√°ria usando o c√≥digo a seguir: <code class="highlighter-rouge">[8, 6, 7, 10, 4].map {|i| i.to_s(2)}</code>. Nesse exemplo, chamamos o m√©todo <code class="highlighter-rouge">to_s(2)</code> para cada elemento do array. O retorno desse m√©todo √© ent√£o armazenado em um novo array.</p>

<p>No entanto, m√©todos como o <code class="highlighter-rouge">times</code> e o <code class="highlighter-rouge">map</code> tem v√°rias limita√ß√µes, pois estes recem como entrada um determinado tipo de dado (por exemplo, o <code class="highlighter-rouge">times</code> recebe o inteiro <code class="highlighter-rouge">5</code> como entrada enquanto que o <code class="highlighter-rouge">map</code> recebe o array <code class="highlighter-rouge">[8, 6, 7, 10, 4]</code> como entrada).</p>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>Escreva um programa que receba um ano e calcule se ele √© bissexto ou n√£o.</li>
  <li>Escreva um convertor de moeadas que funcione para Real, Dolar e Euro. O usu√°rio deve fornecer o valor a ser convertido, a moeda origem e a moeda destino. O programa deve retornar o valor convertido na moeda escolhida.</li>
  <li>Fa√ßa um programa que calcule o conceito de um aluno da UFPA. O programa deve receber quatro n√∫meros de entrada (entre 0 e 10), tirar uma m√©dia desses n√∫meros, e retornar apenas o conceito. Lembrando que:
    <ul>
      <li>9‚Äì10 -&gt; Excelente;</li>
      <li>7‚Äì8,9 -&gt; Bom;</li>
      <li>5‚Äì6,9 -&gt; Regular;</li>
      <li>Menor que 5 -&gt; Insuficiente.</li>
    </ul>
  </li>
  <li>Fa√ßa um programa para determinar se um n√∫mero √© divis√≠vel por 3 ou por 5, mas n√£o simultaneamente divis√≠vel pelos dois.</li>
  <li>Fa√ßa um programa que leia a data de nascimento de uma pessoa no formato DD-MMM-AAAA. Verifique se cada parte da data informada √© v√°lida (por ex, o dia 33 n√£o √© v√°lido, assim como o dia 30 n√£o √© v√°lido em fevereiro, bem como o m√™s zero n√£o √© v√°lido, etc.). Ao final das verifica√ß√µes, imprima se a data √© v√°lida ou inv√°lida.</li>
  <li>Fa√ßa um programa que converta um array de inteiros para um outro array em que cada elemento est√° representado como bin√°rio.</li>
  <li>Fa√ßa um programa que converta um n√∫mero inteiro para sua forma reversa. Por exemplo, se o n√∫mero <code class="highlighter-rouge">12345</code> for informado, retorne o n√∫mero <code class="highlighter-rouge">54321</code>.</li>
  <li>Jogo do chute: fa√ßa um programa que receba entradas de usu√°rio que tentam acertar o n√∫mero secreto que o computador est√° guardando. Deixe o n√∫mero secreto em uma vari√°vel fixa no c√≥digo. Guarde o n√∫mero de tentativas do usu√°rio. O usu√°rio come√ßa com zero pontos. A cada tentativa errada, o usu√°rio perde 10 pontos. Caso acerte, o usu√°rio recebe 50 pontos. Caso acerte, avise ‚ÄúVoc√™ acertou! Seu total de pontos √© #{pontos}.‚Äù; Caso erre por menos, avise ‚ÄúVoc√™ chutou mais baixo! Seu total de pontos at√© agora √© #{pontos}‚Äù; Caso erre por mais, avise: ‚ÄúVoc√™ chutou mais baixo! Seu total de pontos at√© agora √© #{pontos}‚Äù. O programa encerra quando o usu√°rio acertar o chute, ou quando ele desejar sair.</li>
  <li>Avance o exerc√≠cio do jogo do chute usando a fun√ß√£o <code class="highlighter-rouge">rand</code> para escolha do n√∫mero secreto.</li>
  <li>Avance o exerc√≠cio do jogo do chute limitando para cinco chutes.</li>
</ul>
:ET