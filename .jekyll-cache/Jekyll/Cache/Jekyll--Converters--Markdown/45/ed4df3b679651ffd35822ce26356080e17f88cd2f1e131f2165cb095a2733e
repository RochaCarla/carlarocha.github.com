I"Íc<p>Express√µes s√£o constru√≠das atrav√©s de opera√ß√µes e operandos.</p>

<p>Os operadores s√£o constru√ß√µes de linguagem que indicam quais opera√ß√µes podem ser aplicadas nos operandos. Geralmente operadores s√£o usados com um ou dois operandos. Operadores que funcionam somente com um operando s√£o chamados de operadores un√°rios (<em>unary operators</em>); aqueles que trabalham com dois operandos s√£o os operadores bin√°rios (<em>binary operators</em>).</p>

<p>Na express√£o <code class="highlighter-rouge">1 + 3</code>, os literais <code class="highlighter-rouge">2</code> e <code class="highlighter-rouge">3</code> s√£o operandos e o sinal de adi√ß√£o <code class="highlighter-rouge">+</code> √© o operador bin√°rio.</p>

<p>Alguns operadores podem ser utilizados em contextos diferentes. Como vimos no cap√≠tulo anterior, o operador <code class="highlighter-rouge">+</code> pode tamb√©m ser utilizado como strings. Logo a express√£o <code class="highlighter-rouge">"UF" + "PA"</code> √© v√°lida e avalia para <code class="highlighter-rouge">"UFPA"</code>.</p>

<p>A capacidade de um operador ter comportamento diferente em contextos diferentes √© chamada de sobrecarga (<em>overloaded</em>). Sobrecarga tamb√©m √© um conceito utilizado na orienta√ß√£o a objetos, quando queremos que um que um m√©todo sobrescreva outro, mudando assim o comportamento do m√©todo original.</p>

<p>Pareceu familiar?</p>

<h2 id="operadores-s√£o-m√©todos">Operadores s√£o m√©todos</h2>

<p>Operadores s√£o utilizados para <em>processar</em> operandos. Como sabemos que a  express√£o <code class="highlighter-rouge">1 + 3</code> √© avaliada para <code class="highlighter-rouge">4</code>, faz sentido dizer que um operando √© um par√¢metro de entrada para um operador? E que o resultado da avalia√ß√£o √© a sa√≠da do operador?</p>

<p>Parece que sim.</p>

<p>E se n√≥s generaliz√°ssemos um pouco mais? Poder√≠amos dizer que um operador √© um m√©todo que e os operandos s√£o os valores passados por par√¢metro para esse m√©todo?</p>

<p>Faz sentido tamb√©m?</p>

<p>E √© exatamente assim que operadores s√£o implementados em Ruby: como m√©todos.</p>

<p>Mas, calma. Se operadores como <code class="highlighter-rouge">+</code> s√£o, na verdade, m√©todos, eu n√£o deveria usar um ponto (<code class="highlighter-rouge">.</code>) para invoc√°-los?</p>

<p>Podemos usar o ponto (<code class="highlighter-rouge">.</code>), mas ele √© opcional, pois o interpretador Ruby adiciona o ponto para voc√™, silenciosamente.</p>

<p>Logo, durante o processo de interpreta√ß√£o do c√≥digo, a express√£o <code class="highlighter-rouge">1 + 3</code> √© traduzida para <code class="highlighter-rouge">1.+(3)</code>. Agora sim podemos ver claramente que <code class="highlighter-rouge">+</code> nada mais √© do que um m√©todo que aceita um par√¢metro.</p>

<p>Ambas as express√µes anteriores s√£o c√≥digos v√°lidos, e avaliam para o mesmo resultado, <code class="highlighter-rouge">4</code>.</p>

<p>Embora v√°rios operadores sejam de fato implementados como m√©todos, isso nem sempre √© o caso, logo n√£o podemos generalizar. Leia o cap√≠tulo at√© o final e tente descobrir aqueles que n√£o s√£o m√©todos.</p>

<h2 id="tipos-de-operadores">Tipos de operadores</h2>

<p>H√° diversos tipos de operadores; tr√™s grupos de operadores bem conhecidos s√£o:</p>

<ul>
  <li>Operadores aritm√©ticos (como o <code class="highlighter-rouge">+</code> na express√£o <code class="highlighter-rouge">1 + 3</code>),</li>
  <li>Operadores de compara√ß√£o (como o <code class="highlighter-rouge">&gt;</code> na express√£o <code class="highlighter-rouge">1 &gt; 3</code>),</li>
  <li>Operadores l√≥gicos (como o <code class="highlighter-rouge">&amp;&amp;</code> na express√£o <code class="highlighter-rouge">1 &amp;&amp; 3</code>).</li>
</ul>

<h2 id="operadores-aritm√©ticos">Operadores aritm√©ticos</h2>

<p>Para opera√ß√µes matem√°ticas, Ruby implementa os principais operadores aritm√©ticos. S√£o eles:</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Descri√ß√£o</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">+</code></td>
      <td>Adi√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">-</code></td>
      <td>Subtra√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/</code></td>
      <td>Divis√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">*</code></td>
      <td>Multiplica√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">%</code></td>
      <td>Resto da divis√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">**</code></td>
      <td>Exponencia√ß√£o</td>
    </tr>
  </tbody>
</table>

<p>Esses operadores, quando utilizado com operando num√©rico, tem √≥bvio resultado de avalia√ß√£o:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># =&gt; 2</span>
<span class="mi">1</span> <span class="o">-</span> <span class="mi">1</span>  <span class="c1"># =&gt; 0</span>
<span class="mi">2</span> <span class="o">**</span> <span class="mi">2</span> <span class="c1"># =&gt; 4</span>
<span class="mi">2</span> <span class="o">%</span> <span class="mi">2</span>  <span class="c1"># =&gt; 0</span>
</code></pre></div></div>

<p>Talvez mais interessante, por√©m, √© saber que esses operadores podem ser utilizados em outros <a href="/ruby-guide/types">tipos de dados</a>. Por exemplo, o operador de adi√ß√£o pode tamb√©m ser utilizado com strings ou arrays<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UF"</span> <span class="o">+</span> <span class="s2">"PA"</span>  <span class="c1"># =&gt; UFPA</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span>    <span class="c1"># =&gt; [1, 2]</span>
<span class="s2">"UFPA"</span> <span class="o">*</span> <span class="mi">2</span>   <span class="c1"># =&gt; UFPAUFPA</span>
</code></pre></div></div>

<p>Isso acontece pois, como discutiremos ao fim desse cap√≠tulo, operadores s√£o m√©todos. Logo, como m√©todos, estes podem ter implementa√ß√µes espec√≠ficas.</p>

<h2 id="operadores-de-compara√ß√£o">Operadores de compara√ß√£o</h2>

<p>Usamos esses operadores para comparar dois objetos, comumente dentro de uma condicional. Essa s√£o os operadores l√≥gicos implementados em Ruby:</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Descri√ß√£o</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">&gt;</code></td>
      <td>Maior que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;</code></td>
      <td>Menor que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&gt;=</code></td>
      <td>Maior ou igual que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=</code></td>
      <td>Menor ou igual que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">==</code></td>
      <td>Igual</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!=</code></td>
      <td>Diferente</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=&gt;</code></td>
      <td>Maior, igual ou menor que</td>
    </tr>
  </tbody>
</table>

<p>O resultado da avalia√ß√£o desses operadores √© um literal booleano. A √∫nica excess√£o √© o operador ‚Äúnave espacial‚Äù (<code class="highlighter-rouge">&lt;=&gt;</code>), que retorna 1 (caso maior), 0 (caso igual), ou -1 (caso menor). Alguns exemplos:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">1</span>      <span class="c1"># =&gt; false</span>
<span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">1</span>     <span class="c1"># =&gt; true</span>
<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">1</span> <span class="c1"># =&gt; true</span>
<span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span>     <span class="c1"># =&gt; false</span>
<span class="mi">1</span> <span class="o">&lt;=&gt;</span> <span class="mi">1</span>    <span class="c1"># =&gt; 0</span>
</code></pre></div></div>

<p>Da mesma forma que os operadores l√≥gicos podem ser utilizados com strings e arrays, operadores de compara√ß√£o tamb√©m podem.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"a"</span> <span class="o">==</span> <span class="s2">"b"</span> <span class="c1"># =&gt; false</span>
<span class="s2">"a"</span> <span class="o">&gt;</span> <span class="s2">"a"</span> <span class="c1"># =&gt; false</span>
<span class="s2">"b"</span> <span class="o">&lt;=&gt;</span> <span class="s2">"c"</span> <span class="c1"># =&gt; -1</span>
</code></pre></div></div>

<p>Precisamos fazer alguns coment√°rios sobre as express√µes acima.</p>

<p>Primeiro, diferente de outras linguagens como Java, em que o operador de igualdade (<code class="highlighter-rouge">==</code>) faz compara√ß√£o da refer√™ncia de mem√≥ria de uma string, em Ruby, o operador <code class="highlighter-rouge">==</code> faz o que √© de fato esperado: compara os valores de duas strings.</p>

<p>Segundo, calma. Como seria poss√≠vel um <code class="highlighter-rouge">a</code> ser maior que (<code class="highlighter-rouge">&gt;</code>) outro <code class="highlighter-rouge">a</code>? O que de fato a express√£o <code class="highlighter-rouge">"a" &gt; "a"</code> estaria avaliando?</p>

<p>No caso de compara√ß√µes de strings, os operadores <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&lt;</code>, etc, s√£o utilizados para comparar se uma determina string vem <em>alfabeticamente</em> antes ou depois de uma outra string.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"b"</span> <span class="o">&gt;</span> <span class="s2">"a"</span>  <span class="c1"># =&gt; true</span>
<span class="s2">"b"</span> <span class="o">&lt;</span> <span class="s2">"c"</span>  <span class="c1"># =&gt; true</span>
</code></pre></div></div>

<h2 id="operadores-l√≥gicos">Operadores l√≥gicos</h2>

<p>Operadores l√≥gicos s√£o tamb√©m chamados de operadores booleanos. Existem tr√™s tipos de operadores b√°sicos: conjun√ß√£o, disjun√ß√£o e nega√ß√£o. Em Ruby, esses tr√™s operadores s√£o implementados da seguinte forma:</p>

<ul>
  <li><code class="highlighter-rouge">&amp;&amp;</code> (ou <code class="highlighter-rouge">and</code>) representa a conjun√ß√£o</li>
  <li><code class="highlighter-rouge">||</code> (ou <code class="highlighter-rouge">or</code>) representa a disjun√ß√£o.</li>
  <li><code class="highlighter-rouge">!</code>  (ou <code class="highlighter-rouge">not</code>)representa a nega√ß√£o</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span>   <span class="c1"># =&gt; false</span>
<span class="kp">true</span> <span class="n">and</span> <span class="kp">false</span>  <span class="c1"># =&gt; false</span>

<span class="kp">true</span> <span class="o">||</span> <span class="kp">false</span>   <span class="c1"># =&gt; true</span>
<span class="kp">true</span> <span class="n">or</span> <span class="kp">false</span>   <span class="c1"># =&gt; true</span>

<span class="o">!</span><span class="kp">true</span>           <span class="c1"># =&gt; false</span>
<span class="n">not</span> <span class="kp">true</span>        <span class="c1"># =&gt; false</span>

<span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="kp">true</span>   <span class="c1"># =&gt; true</span>
<span class="o">!</span><span class="kp">true</span> <span class="o">||</span> <span class="kp">true</span>   <span class="c1"># =&gt; false</span>
</code></pre></div></div>

<p>Os operadores <code class="highlighter-rouge">||</code> e <code class="highlighter-rouge">&amp;&amp;</code> implementam o conceito de avalia√ß√£o m√≠nima (ou avalia√ß√£o de curto-circuito, <em>short circuit evaluation</em>). Isso significa que o segundo operando s√≥ ser√° avaliado caso o primeiro n√£o seja suficiente para determinar o resultado da express√£o. Mais objetivamente:</p>

<ul>
  <li>
    <p>quando utilizamos o operador <code class="highlighter-rouge">&amp;&amp;</code> e primeiro operando da express√£o √© <code class="highlighter-rouge">false</code>, a express√£o toda √© avaliada para <code class="highlighter-rouge">false</code> (falso E qualquer coisa avalia para falso).</p>
  </li>
  <li>
    <p>quando utilizamos o operador <code class="highlighter-rouge">||</code> e primeiro operando da express√£o √© <code class="highlighter-rouge">true</code>, a express√£o toda √© avaliada para <code class="highlighter-rouge">true</code> (verdadeiro E qualquer coisa avalia para verdadeiro).</p>
  </li>
</ul>

<p>Nos dois casos acima o segundo operador n√£o precisa ser avaliado. A tabela verdade abaixo apresenta o resultado da avalia√ß√£o dos  operadores l√≥gicos <code class="highlighter-rouge">&amp;&amp;</code> e <code class="highlighter-rouge">||</code>.</p>

<h3 id="conjun√ß√£o">Conjun√ß√£o</h3>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th><code class="highlighter-rouge">&amp;&amp;</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">false</code></td>
    </tr>
  </tbody>
</table>

<h3 id="disjun√ß√£o">Disjun√ß√£o</h3>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th><code class="highlighter-rouge">||</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">true</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">false</code></td>
    </tr>
  </tbody>
</table>

<p>Por fim, o operador <code class="highlighter-rouge">!</code> inverte o estado l√≥gico do seu operando. √â por isso que se a vari√°vel <code class="highlighter-rouge">a</code> recebe um valor <code class="highlighter-rouge">true</code>, ela ser√° avaliada para <code class="highlighter-rouge">false</code>.</p>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>!A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">true</code></td>
      <td><code class="highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">false</code></td>
      <td><code class="highlighter-rouge">true</code></td>
    </tr>
  </tbody>
</table>

<h2 id="outros-operadores">Outros operadores</h2>

<p>Os operadores que discutimos nesse cap√≠tulo s√£o os mais comumente utilizados; mas n√£o quer dizer que s√£o os √∫nicos. H√° v√°rios outros operadores dispon√≠veis em Ruby. Alguns outros exemplos incluem:</p>

<h3 id="operador-de-intervalo-range">Operador de intervalo (<em>range</em>)</h3>

<p>Operadores de range existem para facilmente criar um intervalo de objetos (como n√∫meros ou letras). Em Ruby existem dois operadores de range: o operador <code class="highlighter-rouge">..</code> que cria um intervalo inclusivo e o operador <code class="highlighter-rouge">.</code> que cria um intervalo exclusivo, no qual o maior valor √© exclu√≠do.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">).</span><span class="nf">to_a</span>      <span class="c1"># =&gt;  =&gt; [1, 2, 3, 4, 5]</span>
<span class="p">(</span><span class="s1">'a'</span><span class="o">..</span><span class="s1">'e'</span><span class="p">).</span><span class="nf">to_a</span>  <span class="c1"># =&gt; ["a", "b", "c", "d", "e"]</span>
</code></pre></div></div>

<p>A express√£o <code class="highlighter-rouge">(1..5)</code> √© avaliado para um objeto da classe <code class="highlighter-rouge">Range</code>. A classe <code class="highlighter-rouge">Range</code>, por sua vez, tem um m√©todo chamado <code class="highlighter-rouge">to_a</code>, que transforma o objeto em um array.</p>

<h2 id="ordem-de-avalia√ß√£o">Ordem de avalia√ß√£o</h2>

<p>Agora que j√° entendemos sobre express√£o, operadores e operandos que s√£o avaliados e retornam um resultado, precisamos tamb√©m entender que existe uma ordem de avalia√ß√£o dos operadores. Considere a seguinte express√£o:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Qual dos operadores deve ser avaliado primeiro?</p>

<p>Assim como na matem√°tica, em programa√ß√£o h√° operadores que precisam ser executados antes de outros. A ordem de avalia√ß√£o √© determinada pela <em>preced√™ncia</em> dos operadores. No caso do exemplo anterior, a express√£o <code class="highlighter-rouge">2 * 6 + 1</code> √© avaliada para <code class="highlighter-rouge">13</code>, pois o operador <code class="highlighter-rouge">*</code> tem preced√™ncia sobre o operador <code class="highlighter-rouge">+</code>, exatamente como aprendemos na escola.</p>

<p>√â poss√≠vel, no entanto, for√ßar que uma express√£o seja avaliada em uma ordem particular atrav√©s do uso de par√™nteses. Por exemplo, a express√£o abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>Agora √© avaliada para <code class="highlighter-rouge">18</code>.</p>

<p>Para evitar confus√µes sobre a ordem de operadores, a tabela abaixo lista a ordem de preced√™ncia dos operadores discutidos nesse cap√≠tulo. S√£o eles:</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">**</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">*</code>, <code class="highlighter-rouge">/</code>, <code class="highlighter-rouge">%</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">+</code>, <code class="highlighter-rouge">-</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=</code>, <code class="highlighter-rouge">&lt;</code>, <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&gt;=</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=&gt;</code>, <code class="highlighter-rouge">==</code>, <code class="highlighter-rouge">!=</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&amp;&amp;</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">||</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">not</code></td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">or</code>, <code class="highlighter-rouge">and</code></td>
    </tr>
  </tbody>
</table>

<p>Para a ordem de preced√™ncia de todos os operadores, acesse o site da documenta√ß√£o da linguagem.</p>

<p>A tabela deve ser lida da seguinte forma: os operadores que est√£o mais acima tem maior preced√™ncia aos operadores mais abaixo. Mais de um operador na mesma linha indica mesma preced√™ncia.</p>

<!-- ## √Årvore de express√£o

https://www.cs.bgu.ac.il/~ppl172/wiki.files/class/presentations/PPL172_L2.pdf -->

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>Geralmente os operadores funcionam com um ou dois operando. Cite um exemplo de um operador que funciona com tr√™s operandos.</li>
  <li>H√° ainda alguns operadores que n√£o foram cobertos neste guia, como por exemplo: <code class="highlighter-rouge">===</code>, <code class="highlighter-rouge">=~</code>, <code class="highlighter-rouge">&amp;.</code> e o <code class="highlighter-rouge">!!!</code>. Pesquise e descreva o que faz cada um desses operadores.</li>
  <li>Vimos neste cap√≠tulo que v√°rios operadores s√£o implementados como m√©todos. Mas nem todos s√£o m√©todos. Quais s√£o esses?</li>
  <li>Vimos que alguns operadores como <code class="highlighter-rouge">+</code> e o <code class="highlighter-rouge">*</code> podem ser utilizados em tipos diferentes como strings e arrays. Vimos inclusive que a express√£o <code class="highlighter-rouge">"UFPA" * 2</code> √© v√°lida. No entanto, a express√£o <code class="highlighter-rouge">2 * "UFPA"</code> n√£o √© v√°lida (retorna um <code class="highlighter-rouge">TypeError</code>). Explique o porqu√™.</li>
  <li>Explique por que as express√µes <code class="highlighter-rouge">1 || 2 &amp;&amp; nil</code> e <code class="highlighter-rouge">1 or 2 and nil</code> tem avalia√ß√µes diferentes.</li>
  <li>Algumas vezes a preced√™ncia n√£o √© suficiente para determinar o resultado de uma express√£o. Por exemplo, considere a express√£o: <code class="highlighter-rouge">8 / 2 * 4</code>. O resultado √© 16 ou 1? Qual seria o novo crit√©rio de avalia√ß√£o?</li>
  <li>Converta a express√£o matem√°tica <code class="highlighter-rouge">(4+5)(6+(8-1)2)</code> para uma nota√ß√£o de linguagem de programa√ß√£o.</li>
  <li>Sem rodar no interpretador, tente inferir qual √© o resultado de cada uma das express√µes abaixo (nota: nenhuma delas lan√ßa erro):</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">12</span>
<span class="kp">true</span> <span class="o">!=</span> <span class="o">!</span><span class="kp">false</span>
<span class="kp">true</span> <span class="o">==</span> <span class="o">-</span><span class="mi">10</span>
<span class="kp">false</span> <span class="o">==</span> <span class="p">(</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span>
<span class="p">(</span><span class="o">!</span><span class="kp">true</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="o">||</span> <span class="p">((</span><span class="mi">12</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">))</span> <span class="o">||</span> <span class="kp">false</span>
</code></pre></div></div>
<ul>
  <li>Sem rodar no interpretador, tente inferir qual o resultado da express√£o abaixo:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s1">'4'</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">?</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">"VERDADEIRO"</span><span class="p">)</span> <span class="p">:</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">"FALSO"</span><span class="p">)</span>
</code></pre></div></div>

<!-- https://womanonrails.com/operator-precedence-ruby -->

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Mais sobre Arrays nos pr√≥ximos cap√≠tulos desse guia.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET