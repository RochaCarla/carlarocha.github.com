I"¶
<p>Computadores n√£o entendem inteiros, strings, booleanos, ou objetos. Logo, toda representa√ß√£o de tipos que vimos at√© aqui n√£o s√£o intelig√≠veis, do ponto de vista do computador. Precisamos converter n√£o somente os tipos de dados, mas todas as express√µes e constru√ß√µes que existem em um programa para um formato que o computador possa entender: o formato bin√°rio.</p>

<p>Programas e dados compartilham o mesmo espa√ßo em uma fita e o computador ler um bit de cada vez nessa fita. Mas o que √© um bit?</p>

<h2 id="bit-e-bytes">Bit e bytes</h2>

<p>O <em>bit</em> (do ingl√™s, <em>binary digit</em>) √© a menor forma de se representar dados em um computador. O bit pode ter somente um dos seguintes valores: 0 ou 1.</p>

<p>No entanto, como um bit tem somente duas representa√ß√µes, ele √© muito limitante. S√≥ conseguimos representar dois n√∫mero com um bit. Como fazemos para representar todos os outros n√∫meros?</p>

<p>Podemos ir agrupando bits de forma a representar outros n√∫meros. Com dois bits, j√° poder√≠amos representar o n√∫mero dois (<code class="highlighter-rouge">10</code>) e o n√∫mero tr√™s (<code class="highlighter-rouge">11</code>). Com tr√™s bits conseguimos representar o n√∫mero quatro (<code class="highlighter-rouge">100</code>), cinco (<code class="highlighter-rouge">101</code>), seis (<code class="highlighter-rouge">110</code>) e sete (<code class="highlighter-rouge">111</code>). Para representar o n√∫mero oito precisar√≠amos de quatro bits.</p>

<p>A medida que vamos acrescentando mais bits, conseguimos representar um quantidade maior de n√∫meros. Nesse momento √© f√°cil perceber que precisamos de muitos bits para armazenar dados ligeiramente mais complexos. Uma simples string como <code class="highlighter-rouge">"UFPA"</code> precisa de 32 bits para ser representada.</p>

<p>Com tantos bits pra armazenar, facilitaria  nossa vida se tiv√©ssemos representa√ß√µes de mais alto n√≠vel pra armazenar tantos bits. A primeira representa√ß√£o mais alto n√≠vel de um bit √© o <em>byte</em>, um grupo de 8 bits. Embora pouco conhecido, um h√° tamb√©m um grupo de 4 bits, chamado <em>nibble</em>.</p>

<h2 id="c√≥digo-bin√°rio">C√≥digo bin√°rio</h2>

<p>O c√≥digo bin√°rio √© a representa√ß√£o de <em>qualquer</em> dado computacional usando um sistema de dois s√≠mbolos, 0 e 1.</p>

<h2 id="por-que-01--02--03">Por que 0.1 + 0.2 != 0.3?</h2>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>
    <p>Explique por que uma m√°quina de calcular n√£o √© um computador.</p>
  </li>
  <li>
    <p>Crie um programa para fazer convers√£o de um n√∫mero float qualquer para sua forma bin√°ria em Ruby. Explique cada pequeno passo do seu programa.</p>
  </li>
</ul>
:ET