I"ƒ<p>Express√µes s√£o constru√≠das atrav√©s de opera√ß√µes e operandos.</p>

<p>Os operadores s√£o constru√ß√µes de linguagem que indicam quais opera√ß√µes podem ser aplicadas nos operandos. Na express√£o <code class="highlighter-rouge">1 + 3</code>, os literais <code class="highlighter-rouge">2</code> e <code class="highlighter-rouge">3</code> s√£o operandos e o sinal de adi√ß√£o <code class="highlighter-rouge">+</code> √© o operador.</p>

<p>H√° diversos tipos de operadores; tr√™s grupos de operadores bem conhecidos s√£o:</p>

<ul>
  <li>Operadores aritm√©ticos (como o <code class="highlighter-rouge">+</code> na express√£o <code class="highlighter-rouge">1 + 3</code>),</li>
  <li>Operadores de compara√ß√£o (como o <code class="highlighter-rouge">&gt;</code> na express√£o <code class="highlighter-rouge">1 &gt; 3</code>),</li>
  <li>Operadores l√≥gicos (como o <code class="highlighter-rouge">&amp;&amp;</code> na express√£o <code class="highlighter-rouge">1 &amp;&amp; 3</code>).</li>
</ul>

<h2 id="operadores-aritm√©ticos">Operadores aritm√©ticos</h2>

<p>Esses operadores s√£o fundamentais para opera√ß√µes matem√°ticas.</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Descri√ß√£o</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">+</code></td>
      <td>Adi√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">-</code></td>
      <td>Subtra√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">/</code></td>
      <td>Divis√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">*</code></td>
      <td>Multiplica√ß√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">==</code></td>
      <td>Resto da divis√£o</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!=</code></td>
      <td>Diferente</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=&gt;</code></td>
      <td>Maior, igual ou menor que</td>
    </tr>
  </tbody>
</table>

<h2 id="operadores-de-compara√ß√£o">Operadores de compara√ß√£o</h2>

<p>Usamos esses operadores para comparar dois objetos, comumente dentro de uma condicional. Essa s√£o os operadores l√≥gicos implementados em Ruby:</p>

<table>
  <thead>
    <tr>
      <th>Operador</th>
      <th>Descri√ß√£o</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">&gt;</code></td>
      <td>Maior que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;</code></td>
      <td>Menor que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&gt;=</code></td>
      <td>Maior ou igual que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=</code></td>
      <td>Menor ou igual que</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">==</code></td>
      <td>Igual</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">!=</code></td>
      <td>Diferente</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">&lt;=&gt;</code></td>
      <td>Maior, igual ou menor que</td>
    </tr>
  </tbody>
</table>

<p>O resultado da avalia√ß√£o desses operadores √© um literal booleano. A √∫nica excess√£o √© o operador ‚Äúnave espacial‚Äù (<code class="highlighter-rouge">&lt;=&gt;</code>), que retorna 1 (caso maior), 0 (caso igual), ou -1 (caso menor). Alguns exemplos:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="c1"># =&gt; false</span>
<span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="c1"># =&gt; true</span>
<span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span> <span class="c1"># =&gt; true</span>
<span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span> <span class="c1"># =&gt; false</span>
<span class="mi">1</span> <span class="o">&lt;=&gt;</span> <span class="mi">1</span> <span class="c1"># =&gt; 0</span>
</code></pre></div></div>

<h2 id="operadores-l√≥gicos">Operadores l√≥gicos</h2>

<h2 id="ordem-de-avalia√ß√£o">Ordem de avalia√ß√£o</h2>

<p>Existe tamb√©m a ordem de avalia√ß√£o dos operadores, ou seja, h√° operadores que precisam ser executados antes de outros. A ordem de avalia√ß√£o √© determinada pela <em>preced√™ncia</em> dos operadores.</p>

<p>Operadores aritimeticos s√£o m√©todos</p>

<p>https://stackoverflow.com/questions/39311429/multiplying-string-by-integer-vs-integer-by-string-in-ruby/39311454</p>

<h2 id="operadores-s√£o-m√©todos">Operadores s√£o m√©todos</h2>

<p>Operadores s√£o utilizados para <em>processar</em> operandos. Logo naturalmente a express√£o express√£o <code class="highlighter-rouge">1 + 3</code> √© avaliada para <code class="highlighter-rouge">4</code>. Com base nisso, faz sentido dizer que um operando √© um par√¢metro de entrada para um operador?</p>

<p>Em outras palavras: poder√≠amos dizer que um operador √© um m√©todo que e os operandos s√£o valores passados por par√¢metro para esse m√©todo?</p>

<p>Sim, podemos! E √© exatamente assim que operadores s√£o implementados em Ruby: como m√©todos.</p>

<p>Mas, calma. Se operadores como <code class="highlighter-rouge">+</code> s√£o, na verdade, m√©todos, eu n√£o deveria usar um ponto (<code class="highlighter-rouge">.</code>) para invoc√°-los?</p>

<p>O uso do ponto (<code class="highlighter-rouge">.</code>) n√£o se faz necess√°rio pois o interpretador Ruby adiciona o ponto para voc√™, silenciosamente.</p>

<p>Logo, a express√£o <code class="highlighter-rouge">1 + 3</code> √© traduzida para <code class="highlighter-rouge">1.+(3)</code>. Ambas as express√µes s√£o c√≥digos v√°lidos, e avaliam para o mesmo resultado, <code class="highlighter-rouge">4</code>.</p>
:ET