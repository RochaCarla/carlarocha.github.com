I"˙ä<p><a href="/ruby-guide/">Voltar ao come√ßo do guia</a></p>

<h2 id="arrays">Arrays</h2>

<p>Arrays s√£o tipos de dados que podem armazenar elementos de qualquer tipo. Os elementos de um array s√£o separados por v√≠rgula, e os elementos de um array s√£o delimitados por colchetes (<code class="highlighter-rouge">[]</code>).</p>

<p>J√° trabalhamos com Arrays em v√°rios momentos nesse guia, quando por exemplo utilizamos o m√©todo <code class="highlighter-rouge">char</code> de uma <code class="highlighter-rouge">String</code>, que retorna um Array ou quando passamos v√°rios par√¢metros opcionais para um m√©todo, que s√£o agrupados em um Array, ou quando fazemos uma itera√ß√£o em um <code class="highlighter-rouge">for</code>. No entanto, em todos esses casos, est√°vamos apenas utilizando um Array que foi criado pela linguagem. Chegou o momento de n√≥s criarmos os nossos pr√≥prios <code class="highlighter-rouge">Arrays</code>.</p>

<h3 id="criando-arrays">Criando arrays</h3>

<p>Em Ruby, a maneira mais simples de se criar um Array √© da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">telefones</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">emails</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"gustavo@google.com"</span><span class="p">,</span>
  <span class="s2">"gustavo@yahoo.com"</span><span class="p">,</span>
  <span class="s2">"mail@gustavopinto.org"</span>
<span class="p">]</span>

<span class="nb">puts</span> <span class="n">telefones</span>
<span class="nb">puts</span> <span class="n">emails</span>
</code></pre></div></div>

<p>Perceba que cada elemento do Array √© separado por uma v√≠rgula. Mais acima mencionei que era a forma mais simples, o que deixou entender que existem outras formas. Sim, em Ruby h√° sempre mais de uma forma de se fazer a mesma coisa. Caso queiramos criar um Array em que cada elemento seja uma √∫nica palavra, podemos usar a nota√ß√£o <code class="highlighter-rouge">%w{}</code> que cria um Array de palavras (<em>word array</em>):</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">emails</span> <span class="o">=</span>  <span class="sx">%w{gustavo@google.com gustavo@yahoo.com mail@gustavopinto.org}</span>

<span class="nb">puts</span> <span class="n">emails</span>
</code></pre></div></div>

<p>Embora seja equivalente a nota√ß√£o de colchetes (<code class="highlighter-rouge">[]</code>), usar o <code class="highlighter-rouge">%w{}</code> pode simplificar a leitura pois n√£o exige que aspas e virgulas sejam fornecidas. Outra forma de criar um Array com valores espec√≠ficos √© usando um Range, junto com o m√©todo <code class="highlighter-rouge">to_a</code>, que converte um Range em um Array. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">).</span><span class="nf">to_a</span>       <span class="c1">#  =&gt; [1, 2, 3, 4, 5]</span>
<span class="p">(</span><span class="s2">"a"</span><span class="o">..</span><span class="s2">"e"</span><span class="p">).</span><span class="nf">to_a</span>   <span class="c1">#  =&gt; ["a", "b", "c", "d", "e"]</span>
</code></pre></div></div>

<p>Como Ruby √© uma linguagem que emprega fortemente o paradigma orientado a objetos, Arrays tamb√©m ser criados usando a estrutura <code class="highlighter-rouge">emails = Array.new(["gustavo@google.com", "gustavo@yahoo.com", "mail@gustavopinto.org"])</code>. Quais dessas voc√™ achou mais simples?</p>

<h3 id="acessando-elementos-do-array">Acessando elementos do array</h3>

<p>No nosso exemplo, criamos um Array com elementos do tipo <code class="highlighter-rouge">Integer</code> e outro Array com elementos do tipo <code class="highlighter-rouge">String</code>. No entanto, Arrays podem ser heterog√™neos, comportando elementos de tipos diferentes. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"Gustavo Pinto"</span><span class="p">,</span>
  <span class="s2">"mail@gustavopinto.org"</span><span class="p">,</span>
  <span class="mo">00011122233</span><span class="p">,</span>
  <span class="ss">:gustavopinto</span>
<span class="p">]</span>

<span class="nb">puts</span> <span class="n">dados_pessoais</span>
</code></pre></div></div>

<p>Para acessar um determinado elemento no Array, usamos tamb√©m a nota√ß√£o de colchetes (<code class="highlighter-rouge">[]</code>). No exemplo do Array acima, acessamos o primeiro elemento utilizando: <code class="highlighter-rouge">dados_pessoais[0]</code>. A posi√ß√£o zero (0) informada dentro dos colchetes se refere ao primeiro elemento do Array.
<!--Come√ßamos a contar por zero por uma quest√£o de design da linguagem, possivelmente inspirado em C. Em C um array aponta para a localiza√ß√£o na mem√≥ria, portanto a express√£o *array[n]*, n n√£o deve ser tratado como um √≠ndice, mas como um deslocamento da cabe√ßa do array.-->
Podemos acessar qualquer elemento do Array usando a nota√ß√£o de colchetes (<code class="highlighter-rouge">[]</code>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"Gustavo Pinto"</span><span class="p">,</span>
  <span class="s2">"mail@gustavopinto.org"</span><span class="p">,</span>
  <span class="mo">00011122233</span><span class="p">,</span>
  <span class="ss">:gustavopinto</span>
<span class="p">]</span>

<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1"># =&gt; Gustavo Pinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="c1"># =&gt; mail@gustavopinto.org</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>   <span class="c1"># =&gt; 00011122233</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>   <span class="c1"># =&gt; gustavopinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>   <span class="c1"># =&gt; nil</span>
</code></pre></div></div>

<p>Diferente de outras linguagens de programa√ß√£o, acessar uma posi√ß√£o sem que exista um elemento armazenado nele n√£o retorna um erro; em Ruby, isto retorna um <code class="highlighter-rouge">nil</code>. Uma outra forma de acessar os elementos de um Array √© atrav√©s do m√©todo <code class="highlighter-rouge">at</code>, que funciona de forma an√°loga a nota√ß√£o de colchetes (<code class="highlighter-rouge">[]</code>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1"># =&gt; Gustavo Pinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="c1"># =&gt; gustavopinto</span>
</code></pre></div></div>

<p>Para conveni√™ncia, podemos acessar o primeiro elemento usando o m√©todo <code class="highlighter-rouge">first</code> e o √∫ltimo elemento usando o m√©todo <code class="highlighter-rouge">last</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1"># =&gt; Gustavo Pinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="c1"># =&gt; gustavopinto</span>
</code></pre></div></div>

<p>Perceba tamb√©m que estamos acessando os elementos do Array de forma crescente, do primeiro elemento ao √∫ltimo elemento (ou da esquerda para a direita). Mas e se quis√©ssemos acessar os elementos do Array da forma inversa, do √∫ltimo ao primeiro (ou da direita para a esquerda)? Ruby tamb√©m conta com a√ß√∫cares sint√°ticos para lidar com esses casos. Para isso, basta fornecer um √≠ndice negativo. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"Gustavo Pinto"</span><span class="p">,</span>
  <span class="s2">"mail@gustavopinto.org"</span><span class="p">,</span>
  <span class="mo">00011122233</span><span class="p">,</span>
  <span class="ss">:gustavopinto</span>
<span class="p">]</span>

<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>   <span class="c1"># =&gt; gustavopinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>   <span class="c1"># =&gt; 00011122233</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>   <span class="c1"># =&gt; mail@gustavopinto.org</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>   <span class="c1"># =&gt; Gustavo Pinto</span>
<span class="nb">puts</span> <span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span>   <span class="c1"># =&gt; nil</span>
</code></pre></div></div>

<p>Logo, o √≠ndice <code class="highlighter-rouge">-1</code> acessa a √∫ltima posi√ß√£o do Array, enquanto que o <code class="highlighter-rouge">-2</code> acessa a pen√∫ltima, e assim por diante. Novamente, se passarmos um √≠ndice sem elemento na posi√ß√£o, Ruby retorna um <code class="highlighter-rouge">nil</code>.</p>

<p>Assim como aprendemos a utilizar o operador de Range em Strings, podemos tamb√©m usar o mesmo operador com Arrays.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="c1"># ...</span>

<span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span>     <span class="c1"># =&gt; ["mail@gustavopinto.org", 2401435]</span>
<span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="o">..-</span><span class="mi">1</span><span class="p">]</span>   <span class="c1"># =&gt; ["mail@gustavopinto.org", 2401435, :gustavopinto]</span>
<span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">1</span><span class="o">..-</span><span class="mi">2</span><span class="p">]</span>    <span class="c1"># =&gt; ["mail@gustavopinto.org", 2401435]</span>
<span class="n">dados_pessoais</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="o">..-</span><span class="mi">1</span><span class="p">]</span>   <span class="c1"># =&gt; []</span>
</code></pre></div></div>

<p>Como j√° discutimos em cap√≠tulos anteriores, v√°rios operadores em Ruby s√£o, na realidade, m√©todos. O operador <code class="highlighter-rouge">[]</code> √© outro exemplo. Logo, quando fazemos uma chamada como <code class="highlighter-rouge">dados_pessoais[1..2]</code>, √© o equivalente a fazer <code class="highlighter-rouge">dados_pessoais.[](1..2)</code>. Como tamb√©m j√° discutimos no cap√≠tulo sobre tipos de dados, o operador <code class="highlighter-rouge">..</code> √© implementado pela classe Range. Logo, a express√£o <code class="highlighter-rouge">1..2</code> √© equivalente a <code class="highlighter-rouge">Range.new(1,2)</code>. Logo, a nossa chamada <code class="highlighter-rouge">dados_pessoais[1..2]</code> nada mais √© do que um a√ß√∫car sint√°tico da express√£o <code class="highlighter-rouge">dados_pessoais.[](Range.new(1,2))</code>.</p>

<h3 id="manipulando-arrays">Manipulando arrays</h3>

<p>Podemos tamb√©m usar a nota√ß√£o de colchetes para manipular elementos no Array. Por exemplo, a instru√ß√£o <code class="highlighter-rouge">dados_pessoais[0] = "Gustavo"</code> altera o valor que estava na posi√ß√£o zero para o novo valor que foi passado, no caso a String <code class="highlighter-rouge">Gustavo</code>. Podemos tamb√©m fazer <a href="/ruby-guide/exp">atribui√ß√µes paralelas</a> em Arrays. Nesse caso, ao inv√©s de passar um √≠ndice espec√≠fico, podemos passar um Range. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s2">"Gustavo Pinto"</span><span class="p">,</span>
  <span class="s2">"mail@gustavopinto.org"</span><span class="p">,</span>
  <span class="mo">00011122233</span><span class="p">,</span>
  <span class="ss">:gustavopinto</span>
<span class="p">]</span>

<span class="n">dados_pessoais</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Gustavo"</span><span class="p">,</span> <span class="s2">"gpinto@ufpa.br"</span>

<span class="nb">puts</span> <span class="n">dados_pessoais</span>
</code></pre></div></div>

<p>At√© agora estamos trabalhando em um Array pre-definido. E se quis√©ssemos adicionar outros elementos no Array <em>ao longo</em> da execu√ß√£o do programa? Podemos usar o operador shovel (<code class="highlighter-rouge">&lt;&lt;</code>) que utilizamos para concatenar Strings tamb√©m para adicionar novos elementos em um Array.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>          <span class="c1"># =&gt; [1,2,3,4]</span>
</code></pre></div></div>

<p>Em outras linguagens, o operador <code class="highlighter-rouge">+</code> √© utilizado para adicionar elementos no Array. Como vimos, em Ruby fazemos isso usando o <code class="highlighter-rouge">&lt;&lt;</code>. No entanto, podemos tamb√©m utilizar o operador <code class="highlighter-rouge">+</code> em Arrays. Nesse caso, o seu comportamento √© ligeiramente diferente. Ao inv√©s de adicionar um elemento ao Array, o operador <code class="highlighter-rouge">+</code> concatena dois Arrays. Vamos experimentar um pouco com esses dois operadores:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>          <span class="c1"># =&gt; [1,2,3,4,5]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="mi">4</span>            <span class="c1"># =&gt; TypeError</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>         <span class="c1"># =&gt; [1,2,3,[4]]</span>
</code></pre></div></div>

<p>Enquanto que usar o operador <code class="highlighter-rouge">+</code> com um Array e um Inteiro retorna um <code class="highlighter-rouge">TypeError</code> (n√£o h√° convers√£o clara de Inteiro para Array), usar o <code class="highlighter-rouge">&lt;&lt;</code> com dois Arrays acabou inserindo um elemento do tipo Array dentro do nosso Array.</p>

<p>Existe tamb√©m o m√©todo <code class="highlighter-rouge">push</code> que funciona de maneira similar ao operador shovel (<code class="highlighter-rouge">&lt;&lt;</code>). No entanto h√° uma sutil diferen√ßa entre os dois: enquanto que o <code class="highlighter-rouge">&lt;&lt;</code> aceita somente um √∫nico argumento e o insere ao final do Array, o m√©todo <code class="highlighter-rouge">push</code> aceita um ou mais argumentos (mas tamb√©m insere ao final do Array). Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>          <span class="c1"># =&gt; [1,2,3,4]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">push</span> <span class="mi">4</span>        <span class="c1"># =&gt; [1,2,3,4]</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span><span class="mi">5</span>        <span class="c1"># =&gt; SyntaxError!</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">push</span> <span class="mi">4</span><span class="p">,</span><span class="mi">5</span>      <span class="c1"># =&gt; [1,2,3,4,5]</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>        <span class="c1"># =&gt; [1,2,3,[4,5]]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">push</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>      <span class="c1"># =&gt; [1,2,3,[4,5]]</span>
</code></pre></div></div>

<p>Al√©m de acessar, alterar e incluir elementos, podemos tamb√©m remove-los durante a execu√ß√£o do programa. H√° v√°rias formas de remover elementos de um Array. Algumas delas:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">shift</span>            <span class="c1"># =&gt; 1</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">pop</span>              <span class="c1"># =&gt; 3</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>        <span class="c1"># =&gt; 1</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nf">delete_at</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>     <span class="c1"># =&gt; 2</span>
</code></pre></div></div>

<p>Enquanto que o <code class="highlighter-rouge">shift</code> remove o primeiro elemento, o <code class="highlighter-rouge">pop</code> remove o √∫ltimo elemento, o <code class="highlighter-rouge">delete</code> remove um espec√≠fico, e o <code class="highlighter-rouge">delete_at</code> remove um elemento de uma posi√ß√£o espec√≠fica. Note que todos os m√©todos acima retornam o elemento removido, e n√£o o Array modificado.</p>

<p>Por fim, assim como podemos combinar Arrays usando o operador <code class="highlighter-rouge">+</code>, podemos fazer subtra√ß√£o de elementos usando o operador <code class="highlighter-rouge">-</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>        <span class="c1">#=&gt;  [2,3,4,5]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>    <span class="c1">#=&gt;  [2,4]</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>          <span class="c1">#=&gt;  TypeError</span>
</code></pre></div></div>

<p>Perceba que o operador <code class="highlighter-rouge">-</code> recebe dois Arrays como operandos. Embora pare√ßa intuitivo tentar remover um elemento sem precisar engloba-lo em um Array, essa opera√ß√£o retorna um <code class="highlighter-rouge">TypeError</code>.</p>

<h3 id="percorrendo-elementos-do-array">Percorrendo elementos do Array</h3>

<p>Para percorrer elementos em um Array, podemos usar um <code class="highlighter-rouge">for</code>, como vimos no <a href="/ruby-guide/flow">cap√≠tulo anterior</a>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="c1"># ...</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">dados_pessoais</span>
  <span class="nb">puts</span> <span class="n">i</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Embora essa seja uma forma muito comum de se percorrer Arrays em algumas linguagens de programa√ß√£o, em Ruby ela √© pouco utilizada. Isso pois Ruby conta com v√°rias outras formas (menos procedurais) que s√£o preferidas pela comunidade. Podemos por exemplo utilizar o m√©todo <code class="highlighter-rouge">each</code>, que recebe um bloco.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados_pessoais</span> <span class="o">=</span> <span class="c1"># ...</span>

<span class="n">dados_pessoais</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">i</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Como esperado, poder√≠amos escrever blocos de uma √∫nica linha usando a nota√ß√£o de chaves <code class="highlighter-rouge">{}</code>, como <code class="highlighter-rouge">dados_pessoais.each {|i| puts i}</code>.</p>

<p>Na classe Array h√° diversos outros m√©todos que podem ser utilizados para iterar por seus elementos. Outro exemplo √© o m√©todo <code class="highlighter-rouge">reverse_each</code>, que itera pela order reversa dos elementos:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">).</span><span class="nf">to_a</span>
<span class="n">items</span><span class="p">.</span><span class="nf">reverse_each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="p">}</span>  <span class="c1"># =&gt; 5, 4, 3, 2, 1</span>
</code></pre></div></div>

<p>Outro m√©todo bastante utilizado √© o <code class="highlighter-rouge">map</code>. O <code class="highlighter-rouge">map</code> n√£o somente itera pelos elementos de um Array, tamb√©m √© capaz de fazer manipula√ß√µes nesses elementos. Por exemplo, poder√≠amos converter um Array dos primeiros 50 inteiros positivos para sua representa√ß√£o bin√°ria usando um <code class="highlighter-rouge">map</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">50</span><span class="p">).</span><span class="nf">to_a</span>
<span class="n">items</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="p">.</span><span class="nf">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span>
</code></pre></div></div>

<p>Al√©m do <code class="highlighter-rouge">map</code>, o select tamb√©m √© outro m√©todo muito √∫til. O <code class="highlighter-rouge">select</code> filtra elementos do Array baseado em alguma condi√ß√£o. Por exemplo, poder√≠amos remover todos os elementos √≠mpares de um Array da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">50</span><span class="p">).</span><span class="nf">to_a</span>
<span class="n">items</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="p">.</span><span class="nf">even?</span> <span class="p">}</span>  <span class="c1"># =&gt; [2, 4, 6, 8, ..., 50]</span>
</code></pre></div></div>

<p>Podemos tamb√©m usar os m√©todos em conjunto. Por exemplo, se quis√©ssemos saber a representa√ß√£o bin√°ria somente dos n√∫meros pares, poder√≠amos fazer:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">50</span><span class="p">).</span><span class="nf">to_a</span>
<span class="n">items</span><span class="p">.</span><span class="nf">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="p">.</span><span class="nf">even?</span> <span class="p">}.</span><span class="nf">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="p">.</span><span class="nf">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span>
</code></pre></div></div>

<p>H√° diversos outros m√©todos que valem a pena ser estudados na documenta√ß√£o oficial da linguagem.</p>

<h2 id="matrizes">Matrizes</h2>

<p>A capacidade de criar um Array dentro de outro √© fundamental para que possamos manipular matrizes. Um exemplo de matriz 3x3 (ou seja, tr√™s linhas por tr√™s colunas) pode ser visto abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>

<span class="n">matriz</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">]</span> <span class="c1"># =&gt; [[0, 0, 0], [1, 1, 1], [0,1,0]]</span>
</code></pre></div></div>

<p>Imprimir o objeto <code class="highlighter-rouge">matriz</code> em uma √∫nica linha n√£o ajuda a entender o seu formato. Vamos quebra-lo em v√°rias linhas apenas para fins de facilitar a visualiza√ß√£o:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
  [0, 0, 0],
  [1, 1, 1],
  [0, 1, 0]
]
</code></pre></div></div>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>
    <p>Crie um algoritmo de <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">busca bin√°ria</a>.</p>
  </li>
  <li>
    <p>Quantos bytes s√£o necess√°rios para armazenar o seguinte array: <code class="highlighter-rouge">[1,2,3,4]</code>. Justifique sua resposta.</p>
  </li>
  <li>
    <p>Explique o resultado das seguintes express√µes:</p>
  </li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>       <span class="c1"># =&gt; true</span>
<span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">equal?</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="c1"># =&gt; false</span>
</code></pre></div></div>

<ul>
  <li>Implemente o jogo do campo minado. No jogo do campo minado, √© criado um mapa (representado por uma matriz), em que o usu√°rio deve informar uma determinada posi√ß√£o. A posi√ß√£o pode tanto ter 1) uma bandeira, e o usu√°rio ganha o jogo, 2) uma bomba, e o usu√°rio perder o jogo, ou nenhum item. A quantidade de bombas deve ocupar aproximadamente 50% da matriz. Ou seja, em uma matriz 4x4, haver√£o 12 posi√ß√µes, das quais 6 delas com bomba, 1 com a bandeira, e as outras 5 sem item.</li>
  <li>Implemente o jogo da velha. No jogo da velha, dois jogadores devem preencher com zeros ou uns uma matriz 3x3. Ganha o jogador que primeiro uma coluna, uma linha, ou uma diagonal com os mesmos elementos. H√° um empate caso nenhum jogador ganhe o jogo.</li>
</ul>

<!-- - https://www.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding -->

<ul>
  <li>Justifique a sa√≠da para cada uma das entradas a baixo:</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">letters</span> <span class="o">=</span> <span class="sx">%w{a b c d e f}</span> <span class="c1"># =&gt; ["a", "b", "c", "d", "e", "f"]</span>
<span class="o">&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">1</span><span class="p">]</span>          <span class="c1"># =&gt; ["a", "b"]</span>
<span class="o">&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>          <span class="c1"># =&gt; ["a", "b"]</span>
<span class="o">&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">0</span><span class="o">...</span><span class="mi">2</span><span class="p">]</span>         <span class="c1"># =&gt; ["a", "b"]</span>
<span class="o">&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="mi">0</span><span class="o">..-</span><span class="mi">5</span><span class="p">]</span>         <span class="c1"># =&gt; ["a", "b"]</span>
<span class="o">&gt;&gt;</span> <span class="n">letters</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>         <span class="c1"># =&gt; ["a", "b"]</span>
</code></pre></div></div>
<!-- https://www.sitepoint.com/guide-ruby-collections-part-arrays/ -->

<ul>
  <li>
    <p>Crie um m√©todo que receba um array de inteiros com valores duplicados e imprima como sa√≠da um hash com a quantidade de ocorr√™ncia de cada item do array. Por exemplo, dado o array <code class="highlighter-rouge">[1,2,2,2,2,3,3,3,4,4]</code> como entrada imprima o seguinte hash <code class="highlighter-rouge">{1 =&gt; 1, 2 =&gt; 4, 3 =&gt; 3, 4 =&gt; 2}</code>.</p>
  </li>
  <li>
    <p>Crie um programa que leia um arquivo de texto (<code class="highlighter-rouge">.txt</code>) de um diret√≥rio, separe as palavras pelo espa√ßo em branco, e converta as palavras para min√∫sculo. Imprima o total de palavras do arquivo, e o n√∫mero de vezes cada palavra foi utilizada.</p>
  </li>
</ul>
:ET