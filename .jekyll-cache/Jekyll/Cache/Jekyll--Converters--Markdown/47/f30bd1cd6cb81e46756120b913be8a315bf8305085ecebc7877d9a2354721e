I"t<p>Express√µes s√£o constru√≠das atrav√©s de opera√ß√µes e operandos.</p>

<p>Os operadores s√£o constru√ß√µes de linguagem que indicam quais opera√ß√µes podem ser aplicadas nos operandos. Na express√£o <code class="highlighter-rouge">1 + 3</code>, os literais <code class="highlighter-rouge">2</code> e <code class="highlighter-rouge">3</code> s√£o operandos e o sinal de adi√ß√£o <code class="highlighter-rouge">+</code> √© o operador.</p>

<p>H√° diversos tipos de operadores; tr√™s grupos de operadores bem conhecidos s√£o:</p>

<ul>
  <li>Operadores aritm√©ticos (como o <code class="highlighter-rouge">+</code> na express√£o <code class="highlighter-rouge">1 + 3</code>),</li>
  <li>Operadores de compara√ß√£o (como o <code class="highlighter-rouge">&gt;</code> na express√£o <code class="highlighter-rouge">1 &gt; 3</code>),</li>
  <li>Operadores l√≥gicos (como o <code class="highlighter-rouge">&amp;&amp;</code> na express√£o <code class="highlighter-rouge">1 &amp;&amp; 3</code>).</li>
</ul>

<h2 id="operadores-aritm√©ticos">Operadores aritm√©ticos</h2>

<h2 id="operadores-de-compara√ß√£o">Operadores de compara√ß√£o</h2>

<p>Usamos esses operadores para comparar dois objetos, comumente dentro de uma condicional. Essa s√£o os operadores l√≥gicos implementados em Ruby:</p>

<table>
  <tbody>
    <tr>
      <td>Operador</td>
      <td>Data</td>
      <td>Conte√∫do de Aula</td>
      <td>Links</td>
    </tr>
    <tr>
      <td>1</td>
      <td>04/03</td>
      <td>Apresenta√ß√£o da disciplina</td>
      <td><a href="https://drive.google.com/file/d/13A7FlymMjBn70VM5dDzbQF3WQAbUDEvm/view?usp=sharing">Video</a> <a href="https://docs.google.com/presentation/d/11Ja1YptvJxHf3xd0J_jHf0RWoikWBZ_r8P7EbfhctCw/edit?usp=sharing">Slides</a></td>
    </tr>
    <tr>
      <td>2</td>
      <td>09/03</td>
      <td>Atribui√ß√£o de vari√°veis</td>
      <td><a href="https://drive.google.com/file/d/1X0M8ttA20lpP2gy2VsvWLJ8CGF7Yhw1f/view?usp=sharing">Video</a></td>
    </tr>
    <tr>
      <td>3</td>
      <td>11/03</td>
      <td>Aula ass√≠ncrona</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>4</td>
      <td>16/03</td>
      <td>Controle de fluxo (if/else/ifs)</td>
      <td>¬†</td>
    </tr>
    <tr>
      <td>5</td>
      <td>18/03</td>
      <td>Aula ass√≠ncrona</td>
      <td>¬†</td>
    </tr>
  </tbody>
</table>

<h2 id="operadores-l√≥gicos">Operadores l√≥gicos</h2>

<h2 id="operadores-s√£o-m√©todos">Operadores s√£o m√©todos</h2>

<p>Operadores s√£o utilizados para <em>processar</em> operandos. Logo naturalmente a express√£o express√£o <code class="highlighter-rouge">1 + 3</code> √© avaliada para <code class="highlighter-rouge">4</code>. Com base nisso, faz sentido dizer que um operando √© um par√¢metro de entrada para um operador?</p>

<p>Em outras palavras: poder√≠amos dizer que um operador √© um m√©todo que e os operandos s√£o valores passados por par√¢metro para esse m√©todo?</p>

<p>Sim, podemos! E √© exatamente assim que operadores s√£o implementados em Ruby: como m√©todos.</p>

<p>Mas, calma. Se operadores como <code class="highlighter-rouge">+</code> s√£o, na verdade, m√©todos, eu n√£o deveria usar um ponto (<code class="highlighter-rouge">.</code>) para invoc√°-los?</p>

<p>O uso do ponto (<code class="highlighter-rouge">.</code>) n√£o se faz necess√°rio pois o interpretador Ruby adiciona o ponto para voc√™, silenciosamente.</p>

<p>Logo, a express√£o <code class="highlighter-rouge">1 + 3</code> √© traduzida para <code class="highlighter-rouge">1.+(3)</code>.</p>

<h2 id="ordem-de-avalia√ß√£o">Ordem de avalia√ß√£o</h2>

<p>Existe tamb√©m a ordem de avalia√ß√£o dos operadores, ou seja, h√° operadores que precisam ser executados antes de outros. A ordem de avalia√ß√£o √© determinada pela <em>preced√™ncia</em> dos operadores.</p>

<p>Operadores aritimeticos s√£o m√©todos</p>

<p>https://stackoverflow.com/questions/39311429/multiplying-string-by-integer-vs-integer-by-string-in-ruby/39311454</p>
:ET