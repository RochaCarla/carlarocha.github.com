I"U<p>Computadores não entendem inteiros, strings, booleanos, ou objetos. Logo, toda representação de tipos que vimos até aqui não são inteligíveis, do ponto de vista do computador. Precisamos converter não somente os tipos de dados, mas todas as expressões e construções que existem em um programa para um formato que o computador possa entender: o formato binário.</p>

<p>Programas e dados compartilham o mesmo espaço em uma fita e o computador ler um bit de cada vez nessa fita. Mas o que é um bit?</p>

<h2 id="bit-e-bytes">Bit e bytes</h2>

<p>O <em>bit</em> (do inglês, <em>binary digit</em>) é a menor forma de se representar dados em um computador. O bit pode ter somente um dos seguintes valores: 0 ou 1.</p>

<p>No entanto, como um bit tem somente duas representações, ele é muito limitante. Como esperado, conseguimos representar somente dois números decimais em um bit, o zero e o um. Mas e todos os outros números?</p>

<p>Podemos ir agrupando bits de forma a representar outros números. Com dois bits, já poderíamos representar o número dois (<code class="highlighter-rouge">10</code>) e o número três (<code class="highlighter-rouge">11</code>).</p>

<p>Podemos então agrupar bits em uma representação de mais alto nível. O <em>byte</em>, então, é um grupo de 8 bits. Embora pouco conhecido, um há também um grupo de 4 bits, chamado <em>nibble</em>.</p>

<h2 id="código-binário">Código binário</h2>

<p>O código binário é a representação de <em>qualquer</em> dado computacional usando um sistema de dois símbolos, 0 e 1.</p>

<h2 id="por-que-01--02--03">Por que 0.1 + 0.2 != 0.3?</h2>

<h2 id="exercícios-de-fixação">Exercícios de fixação</h2>

<ul>
  <li>Crie um programa para fazer conversão de um número float qualquer para sua forma binária em Ruby. Explique cada pequeno passo do seu programa.</li>
</ul>
:ET