I"Ô<p>Computadores n√£o entendem inteiros, strings, booleanos, ou objetos. Logo, toda representa√ß√£o de tipos que vimos at√© aqui n√£o s√£o intelig√≠veis, do ponto de vista do computador. Precisamos converter n√£o somente os tipos de dados, mas todas as express√µes e constru√ß√µes que existem em um programa para um formato que o computador possa entender: o formato bin√°rio.</p>

<p>Programas e dados compartilham o mesmo espa√ßo em uma fita e o computador ler um bit de cada vez nessa fita. Mas o que √© um bit?</p>

<h2 id="bit-e-bytes">Bit e bytes</h2>

<p>O <em>bit</em> (do ingl√™s, <em>binary digit</em>) √© a menor forma de se representar dados em um computador. O bit pode ter somente um dos seguintes valores: 0 ou 1.</p>

<p>Obviamente seria muito dif√≠cil fazer qualquer programa que pudesse ser armazenado somente em um √∫nico bit. Podemos ent√£o agrupar bits em uma representa√ß√£o de mais alto n√≠vel. O <em>byte</em>, ent√£o, √© um grupo de 8 bits. Embora pouco conhecido, um h√° tamb√©m um grupo de 4 bits, chamado nibble.</p>

<h2 id="c√≥digo-bin√°rio">C√≥digo bin√°rio</h2>

<p>O c√≥digo bin√°rio √© a representa√ß√£o de <em>qualquer</em> dado computacional usando um sistema de dois s√≠mbolos, 0 e 1.</p>

<h2 id="por-que-01--02--03">Por que 0.1 + 0.2 != 0.3?</h2>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>Crie um programa para fazer convers√£o de um n√∫mero float qualquer para sua forma bin√°ria em Ruby. Explique cada pequeno passo do seu programa.</li>
</ul>
:ET