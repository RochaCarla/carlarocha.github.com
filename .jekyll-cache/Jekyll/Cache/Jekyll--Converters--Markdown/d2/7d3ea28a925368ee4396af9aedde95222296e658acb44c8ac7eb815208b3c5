I"W<p><a href="/ruby-guide/">Voltar ao come√ßo do guia</a></p>

<p>Programar √© fazer com que os dados sigam um determinado caminho (podendo sofrer modifica√ß√µes ao longo desse caminho). O controle do fluxo se refere a ordem de como os dados ir√£o ser executados ao longo deste caminho (que √© a execu√ß√£o do programa).</p>

<p>H√° diversas formas de controlar o fluxo dos dados em um programa, por exemplo:</p>

<ul>
  <li>Sequencial: <em>Fa√ßa isso, depois isso, depois isso, etc</em>. Esta √© a forma mais b√°sica de controle de fluxo de execu√ß√£o. Ela se refere a realizar avalia√ß√µes de express√µes em sequencia, uma ap√≥s a outra.</li>
  <li>Condicional: <em>Se determinada condi√ß√£o for verdadeira, fa√ßa isso, do contr√°rio, fa√ßa aquilo</em>. Nessa forma de controle de fluxo, temos pelo menos duas alternativas de execu√ß√£o do nosso programa, uma das quais n√£o dever√° executada.</li>
  <li>Itera√ß√£o: <em>Fa√ßa isso enquanto determinada condi√ß√£o for verdadeira</em>. Itera√ß√£o se refere a execu√ß√£o do mesmo trecho de c√≥digo m√∫ltiplas vezes, enquanto uma determinada condi√ß√£o for verdadeira.</li>
  <li>Recurs√£o: <em>Pe√ßa para voc√™ mesmo fazer isso</em>. Recurs√£o acontece quando uma rotinha invoca ela mesma.</li>
  <li>Exce√ß√£o: <em>Caso algo d√™ errado, siga por esse outro caminho</em>. Exce√ß√£o s√£o constru√ß√µes que alteram o fluxo de dados na presen√ßa de um comportamento excepcional.</li>
  <li>Concorrente: <em>Fa√ßa m√∫ltiplas coisas ao mesmo tempo</em>. Embora as express√µes n√£o sejam <em>exatamente</em> avaliadas ao mesmo tempo, programa√ß√£o concorrente ajuda para deixar o computador menos ocioso.</li>
</ul>

<p>H√° ainda outras constru√ß√µes de linguagem como o <code class="highlighter-rouge">goto</code> (em C), que alteram o fluxo de dados. Mas esses s√£o t√≥picos para outro guia üôÉ.</p>

<p>Neste cap√≠tulo vamos aprender sobre condicionais, itera√ß√µes e recurs√£o. Mais pra frente no guia tamb√©m teremos um cap√≠tulo sobre exce√ß√£o.</p>

<h2 id="condicionais">Condicionais</h2>

<p>Durante a execu√ß√£o do programa, diferentes caminhos (ou trechos de c√≥digo) podem ser percorridos (ou executados).</p>

<p>Uma condicional √© um desvio no caminho. Condicionais necessitam de duas constru√ß√µes de linguagem:</p>

<ul>
  <li>uma constru√ß√£o que nos ajude a implementar um desvio, e</li>
  <li>um conjunto de operadores l√≥gicos (como <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&lt;</code>, ou <code class="highlighter-rouge">==</code>).</li>
</ul>

<p>A constru√ß√£o de desvio √© frequentemente implementada usando a estrutura de um <code class="highlighter-rouge">If‚Äìthen(‚Äìelse)</code>, sendo o else uma parte op√ß√£o da estrutura. Essa estrutura pode ser melhor entendida quando organizada em blocos:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>If (condi√ß√£o booleana) Then
    (consequ√™ncia)
Else
    (alternativa)
End
</code></pre></div></div>

<p>A primeira linha verifica se uma determinada condi√ß√£o √© verdadeira (por exemplo, se o usu√°rio e senha estiverem corretos). Se for, a segunda linha, com a <code class="highlighter-rouge">(consequ√™ncia)</code> √© executada . Do contr√°rio (<code class="highlighter-rouge">Else</code>), a quarta linha, com a <code class="highlighter-rouge">(alternativa)</code> √© executada. Na quinta linha se encerra o procedimento.</p>

<p>Diferentes linguagens de programa√ß√£o implementam condicionais de forma ligeiramente diferente. Em Ruby condicionais segue a seguinte estrutura sint√°tica:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"o valor de a √© 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"o valor de a n√£o √© 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<hr />
<p><strong>Curiosidade</strong></p>

<p>A linguagem de programa√ß√£o <code class="highlighter-rouge">bash</code> talvez seja a linguagem que implemente mecanismos condicionais da maneira mais sintaticamente semelhante a da estrutura de alto n√≠vel (exceto pelo uso do ponto e v√≠rgula <code class="highlighter-rouge">;</code>):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span>e1<span class="p">;</span> <span class="k">then
  </span>s1
<span class="k">else
  </span>s2
<span class="k">fi</span>
</code></pre></div></div>
<hr />

<h2 id="itera√ß√£o">Itera√ß√£o</h2>

<p>There seem to be 5 kinds of loops:</p>

<p>loop forever
loop n times
loop while/until a condition is true
loop through a range of numbers, optionally with a step
loop through each item in a collection (or each char in a string, or each node in a linked list‚Ä¶)</p>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>
    <h2 id="o-uso-de-recurs√£o-lhe-parece-natural-como-o-uso-de-itera√ß√£o-explique">O uso de recurs√£o lhe parece natural como o uso de itera√ß√£o? Explique.</h2>
  </li>
</ul>
:ET