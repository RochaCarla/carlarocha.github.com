I"†O<p><a href="/ruby-guide/">Voltar ao come√ßo do guia</a></p>

<p>Programar √© fazer com que os dados sigam um determinado caminho (podendo sofrer modifica√ß√µes ao longo desse caminho). O controle do fluxo se refere a ordem de como os dados ir√£o ser executados ao longo deste caminho (que √© a execu√ß√£o do programa).</p>

<p>H√° diversas formas de controlar o fluxo dos dados em um programa, por exemplo:</p>

<ul>
  <li>Sequencial: <em>Fa√ßa isso, depois isso, depois isso, etc</em>. Esta √© a forma mais b√°sica de controle de fluxo de execu√ß√£o. Ela se refere a realizar avalia√ß√µes de express√µes em sequencia, uma ap√≥s a outra.</li>
  <li>Condicional: <em>Se determinada condi√ß√£o for verdadeira, fa√ßa isso, do contr√°rio, fa√ßa aquilo</em>. Nessa forma de controle de fluxo, temos pelo menos duas alternativas de execu√ß√£o do nosso programa, uma das quais n√£o dever√° executada.</li>
  <li>Itera√ß√£o: <em>Fa√ßa isso enquanto determinada condi√ß√£o for verdadeira</em>. Itera√ß√£o se refere a execu√ß√£o do mesmo trecho de c√≥digo m√∫ltiplas vezes, enquanto uma determinada condi√ß√£o for verdadeira.</li>
  <li>Recurs√£o: <em>Pe√ßa para voc√™ mesmo fazer isso</em>. Recurs√£o acontece quando uma rotinha invoca ela mesma.</li>
  <li>Exce√ß√£o: <em>Caso algo d√™ errado, siga por esse outro caminho</em>. Exce√ß√£o s√£o constru√ß√µes que alteram o fluxo de dados na presen√ßa de um comportamento excepcional.</li>
  <li>Concorrente: <em>Fa√ßa m√∫ltiplas coisas ao mesmo tempo</em>. Embora as express√µes n√£o sejam <em>exatamente</em> avaliadas ao mesmo tempo, programa√ß√£o concorrente ajuda para deixar o computador menos ocioso.</li>
</ul>

<p>H√° ainda outras constru√ß√µes de linguagem como o <code class="highlighter-rouge">goto</code> (em C), que alteram o fluxo de dados. Mas esses s√£o t√≥picos para outro guia üôÉ.</p>

<p>Neste cap√≠tulo vamos aprender sobre condicionais, itera√ß√µes e recurs√£o. Mais pra frente no guia tamb√©m teremos um cap√≠tulo sobre exce√ß√£o.</p>

<h2 id="condicionais">Condicionais</h2>

<p>Durante a execu√ß√£o do programa, diferentes caminhos (ou trechos de c√≥digo) podem ser percorridos (ou executados).</p>

<p>Uma condicional √© um desvio no caminho. Condicionais necessitam de duas constru√ß√µes de linguagem:</p>

<ul>
  <li>uma constru√ß√£o que nos ajude a implementar um desvio, e</li>
  <li>um conjunto de operadores de compara√ß√£o (como <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">&lt;</code>, ou <code class="highlighter-rouge">==</code>) ou operadores l√≥gicos (como <code class="highlighter-rouge">&amp;&amp;</code> ou <code class="highlighter-rouge">||</code>).</li>
</ul>

<p>A constru√ß√£o de condicionais √© frequentemente implementada usando uma estrutura de um <code class="highlighter-rouge">If‚Äìthen(‚Äìelse)</code>. O else est√° entre parenteses pois √© parte opcional da estrutura. Essa estrutura pode ser melhor entendida quando organizada em blocos:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>If (condi√ß√£o booleana) Then
    (consequ√™ncia)
Else
    (alternativa)
End
</code></pre></div></div>

<p>A primeira linha verifica se uma determinada condi√ß√£o √© verdadeira (por exemplo, se o usu√°rio e senha estiverem corretos). Se o resultado dessa primeira linha for verdadeiro, a segunda linha, com a <code class="highlighter-rouge">(consequ√™ncia)</code> √© executada . Do contr√°rio (<code class="highlighter-rouge">Else</code>), a quarta linha, com a <code class="highlighter-rouge">(alternativa)</code> √© executada. Lembre-se que o <code class="highlighter-rouge">Else</code> n√£o √© obrigat√≥rio em um <code class="highlighter-rouge">if</code>. Ele existe para tratar casos excepcionais (que nem sempre precisam existir). Por fim, a quinta linha encerra o procedimento.</p>

<p>Diferentes linguagens de programa√ß√£o implementam condicionais de forma ligeiramente diferente. Em Ruby condicionais seguem a seguinte estrutura sint√°tica:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Em vez de executar esse c√≥digo direto no <code class="highlighter-rouge">irb</code>, dessa vez vamos criar um arquivo chamado <code class="highlighter-rouge">ifs.rb</code> e colar e salvar esse conte√∫do dentro dele. Pra rodar esse arquivo, basta navegar pela linha de comando at√© onde o arquivo foi salvo e rodar o comando <code class="highlighter-rouge">ruby ifs.rb</code>.</p>

<p>O motivo para usar um arquivo de texto no lugar de colocar o c√≥digo direto no interpretador √© que, nesse momento, vamos come√ßar a fazer v√°rias modifica√ß√µes no nosso programa. A medida que o c√≥digo for mudando e  crescendo, facilitar√° a nossa vida se n√≥s tivermos o c√≥digo salvo em algum arquivo; do contr√°rio, a cada mudan√ßa ter√≠amos que escrever todo o codigo novamente no interpretador (chato, heim?).</p>

<p>Voltando ao nosso exemplo. Perceba que sempre que n√≥s abrimos um <code class="highlighter-rouge">if</code> (ou um bloco, de maneira mais geral, como veremos mais para frente neste guia), n√≥s tamb√©m precisamos fecha-lo. Se fecha um <code class="highlighter-rouge">if</code> (ou um bloco) usando a instru√ß√£o <code class="highlighter-rouge">end</code>. E se n√£o fecharmos um bloco com um <code class="highlighter-rouge">end</code>? O que aconteceria?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
</code></pre></div></div>

<p>Neste caso, o interpretador de Ruby n√£o entende que o programa como v√°lido e lan√ßa o seguinte erro: <code class="highlighter-rouge">ifs.rb:3: syntax error, unexpected end-of-input, expecting `end'</code>.  Esta mensagem √© a forma que o interpretador tem de nos ajudar a encontrar o erro. No caso, ele est√° nos dizendo √© que o fim da entrada foi terminada de forma inesperada, e que se esperava uma instru√ß√£o <code class="highlighter-rouge">end</code>.</p>

<p>Poder√≠amos melhorar um pouco o nosso programa, fazendo com que ele nos avise quando o valor da vari√°vel seja diferente de <code class="highlighter-rouge">10</code>. A instru√ß√£o <code class="highlighter-rouge">else</code> √© excelente para tratar casos assim. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade n√£o √© igual 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Note tamb√©m que embora tenhamos agora duas condicionais (um <code class="highlighter-rouge">if</code> e um <code class="highlighter-rouge">else</code>) temos somente um √∫nico <code class="highlighter-rouge">end</code>. Isso acontece pois o <code class="highlighter-rouge">end</code> est√° associado ao bloco <code class="highlighter-rouge">if</code>, e n√£o ao bloco <code class="highlighter-rouge">else</code>.</p>

<p>Vamos continuar evoluindo o nosso programa. Em vez de apensar saber somente se um valor √© igual a <code class="highlighter-rouge">10</code>, queremos saber se ele √© maior, menor, ou igual. Como poder√≠amos fazer isso? Uma poss√≠vel solu√ß√£o seria utilizar os operadores que vimos no <a href="/ruby-guide/exp">√∫ltimo cap√≠tulo</a>, e adicionarmos um novo <code class="highlighter-rouge">if</code> para fazer as compara√ß√µes necess√°rias. Algo como o exemplo abaixo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">if</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Agora √© s√≥ salvar e rodar novamente o comando <code class="highlighter-rouge">ruby ifs.rb</code>.</p>

<p>Mas, calma. N√£o funcionou. Ao executar, apareceu novamente a mensagem de erro: <code class="highlighter-rouge">syntax error, unexpected end-of-input, expecting `end'</code>.</p>

<p>Isso acontece pois temos dois <code class="highlighter-rouge">if</code>s no c√≥digo. Como o segundo <code class="highlighter-rouge">if</code> foi declarado logo ap√≥s o primeiro <code class="highlighter-rouge">if</code>, o interpretador de Ruby entende que o segundo <code class="highlighter-rouge">if</code> est√° dentro do primeiro <code class="highlighter-rouge">if</code>; ou seja, o segundo <code class="highlighter-rouge">if</code> s√≥ ser√° executado caso a instru√ß√£o <code class="highlighter-rouge">a == 10</code> seja avaliada para <code class="highlighter-rouge">true</code> (assim como acontece com o <code class="highlighter-rouge">puts</code> dentro do primeiro <code class="highlighter-rouge">if</code>).</p>

<p>No entanto, o que queremos √© que o segundo <code class="highlighter-rouge">if</code> seja executado caso a express√£o dentro do primeiro <code class="highlighter-rouge">if</code> seja avaliada para <code class="highlighter-rouge">false</code>; ou seja, queremos que o segundo <code class="highlighter-rouge">if</code> seja o caso contr√°rio do primeiro <code class="highlighter-rouge">if</code>.</p>

<p>Em Ruby, podemos usar a instru√ß√£o <code class="highlighter-rouge">elsif</code> para indicar <em>o caso contr√°rio</em>. Para isso, o <code class="highlighter-rouge">elsif</code> nunca deve existir sozinho; deve-se sempre primeiro ter um <code class="highlighter-rouge">if</code> para que exista algum caso contr√°rio (<code class="highlighter-rouge">elsif</code>).</p>

<p>Mas, o <code class="highlighter-rouge">else</code> n√£o seria tamb√©m o caso contr√°rio do <code class="highlighter-rouge">if</code>? Qual seria a diferen√ßa de um <code class="highlighter-rouge">elsif</code> para um <code class="highlighter-rouge">else</code>? A diferen√ßa de um <code class="highlighter-rouge">elsif</code> para um <code class="highlighter-rouge">else</code> √© que o <code class="highlighter-rouge">elsif</code> trata de casos intermedi√°rios enquanto que o <code class="highlighter-rouge">else</code> trata de todos os demais casos.</p>

<p>Voltando ao nosso exemplo anterior, podemos agora corrigi-lo para usar um <code class="highlighter-rouge">elsif</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Se quisessemos ser mais espec√≠ficos, poder√≠amos ter v√°rios encadeamentos de <code class="highlighter-rouge">elsif</code> dentro uma instru√ß√£o <code class="highlighter-rouge">if</code>.  Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">30</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 20"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>A estrutra dos <code class="highlighter-rouge">if</code>s est√° certa, mas parece que tem algo de estranho nesse c√≥digo. Vamos testar com alguns valores. rode o seu programa quatro vezes, cada uma com uma entrada diferente, por exemplo: <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">15</code> e <code class="highlighter-rouge">35</code>. Testando com <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">10</code>, <code class="highlighter-rouge">15</code>, o c√≥digo imprime o que era de fato esperado. Mas quando testamos como <code class="highlighter-rouge">35</code>, o c√≥digo executado √© aquele que est√° dentro da express√£o <code class="highlighter-rouge">idade &gt; 10</code>. Isso faz sentido, uma vez que <code class="highlighter-rouge">35</code> √© maior do que <code class="highlighter-rouge">10</code>. No entanto, gostar√≠amos que o c√≥digo dentro da express√£o <code class="highlighter-rouge">idade &gt; 30</code> fosse executado. Como poder√≠amos ter essa garantia?</p>

<p>Uma poss√≠vel solu√ß√£o seria determinar uma faixa de valores para cada condi√ß√£o <code class="highlighter-rouge">elsif</code>? Algo como <em>se idade entre x e y, fa√ßa alguam coisa</em>. Perceba que fizemos uso de um conector <em>e</em> na nossa express√£o em Portugu√™s acima. Como podemos traduzir essa express√£o em Portugu√™s para Ruby? Podemos usar os operadores l√≥gicos que vimos no <a href="/ruby-guide/exp">h√° algunas cap√≠tulos</a>! A mesma express√£o em Ruby seria algo como: <code class="highlighter-rouge">idade &lt; 20 or idade &gt; 30</code>. A vers√£o com operadores l√≥gicos do nosso programa seria algo como:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idade</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>

<span class="k">if</span> <span class="n">idade</span> <span class="o">==</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© igual 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">idade</span> <span class="o">&lt;=</span> <span class="mi">20</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 10"</span>
<span class="k">elsif</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">20</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© maior que 20"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"A idade √© menor que 10"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Agora sim conseguimos resolver o problema anterior!</p>

<p>Ruby conta ainda com alguns particularidades para trabalhar com condicionais. Por exemplo, toda vez que temos uma instru√ß√£o como <code class="highlighter-rouge">if a &gt; b</code>, o <code class="highlighter-rouge">if</code> avalia se o resultado da express√£o √© <code class="highlighter-rouge">true</code>. No entanto, h√° casos em que gostar√≠amos de saber se o resultado da express√£o √© <code class="highlighter-rouge">false</code>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">not</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Usamos o operador l√≥gico <code class="highlighter-rouge">not</code> para representar a nega√ß√£o da express√£o. Como vimos no cap√≠tulo anterior, <code class="highlighter-rouge">not true # =&gt; false</code>. Por√©m, em Ruby, existe ainda a instru√ß√£o <code class="highlighter-rouge">unless</code>. A instru√ß√£o <code class="highlighter-rouge">unless</code> √© apenas um atalho para o <code class="highlighter-rouge">if not</code>. Alguns consideram quem ela facilita o entendimento de uma express√£o. Logo, o mesmo c√≥digo escrito acima poderia ser re-escrito usando <code class="highlighter-rouge">unless</code>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unless</span> <span class="n">idade</span> <span class="o">&gt;</span> <span class="mi">10</span>
  <span class="nb">puts</span> <span class="s2">"Voc√™ n√£o pode ter acesso a esse conte√∫do"</span>
<span class="k">end</span>
</code></pre></div></div>

<hr />
<p><strong>IMPORTANTE</strong></p>

<h2 id="perceba-que-a-medida-que-o-programa-cresce-a-complexidade-de-entender-o-que-acontece-com-o-programa-tamb√©m-cresce-em-poucas-linhas-de-c√≥digo-estamos-usando-cinco-operadores-e-quatro-caminhos-diferentes-raciocinar-qual-caminho-uma-determinada-entrada-vai-percorrer-necessita-de-um-esfor√ßo-cognitivo-maior-mesmo-embora-o-nosso-programa-tenha-somente-11-linhas-de-c√≥digo-condicionais-e-itera√ß√µes-como-veremos-mais-pra-frente-rapidamente-adicionam-complexidade-no-c√≥digo-no-entanto-√©-muito-d√≠ficil-programar-sem-utilizar-essas-constru√ß√µes-toda-vez-que-voc√™-for-adicionar-um-if-no-c√≥digo-tenha-em-mente-que-n√£o-√©-somente-um-if-e-sim-um-novo-degrau-de-complexidade-no-c√≥digo-programa-√©-tomar-decis√µes">Perceba que a medida que o programa cresce, a complexidade de entender o que acontece com o programa tamb√©m cresce. Em poucas linhas de c√≥digo, estamos usando cinco operadores e quatro caminhos diferentes. Raciocinar qual caminho uma determinada entrada vai percorrer necessita de um esfor√ßo cognitivo maior, mesmo embora o nosso programa tenha somente 11 linhas de c√≥digo. Condicionais (e itera√ß√µes como veremos mais pra frente) rapidamente adicionam complexidade no c√≥digo. No entanto, √© muito d√≠ficil programar sem utilizar essas constru√ß√µes. Toda vez que voc√™ for adicionar um <code class="highlighter-rouge">if</code> no c√≥digo, tenha em mente que n√£o √© somente um <code class="highlighter-rouge">if</code>, e sim um novo degrau de complexidade no c√≥digo. Programa √© tomar decis√µes.</h2>

<!--
## Itera√ß√£o

There seem to be 5 kinds of loops:

loop forever
loop n times
loop while/until a condition is true
loop through a range of numbers, optionally with a step
loop through each item in a collection (or each char in a string, or each node in a linked list...)


-->

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>O uso de recurs√£o lhe parece natural como o uso de itera√ß√£o? Explique.</li>
</ul>
:ET