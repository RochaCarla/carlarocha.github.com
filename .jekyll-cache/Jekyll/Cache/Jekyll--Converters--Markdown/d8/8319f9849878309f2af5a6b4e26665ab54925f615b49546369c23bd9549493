I"_<p><a href="/guide/ruby/">Voltar ao come√ßo do guia</a></p>

<p>O conceito de uma vari√°vel √© um dos mais importantes em programa√ß√£o.</p>

<p>Vari√°veis s√£o respons√°veis por armazenar dados que ser√£o utilizados ao longo da execu√ß√£o do programa.</p>

<p>Digamos que voc√™ queira criar um programa que calcule o valor de um produto ap√≥s a incid√™ncia do ICMS. Sabendo que o ICSM √© de 18% e produto (a ser incidido o imposto) custou R$ 1,000, poder√≠amos fazer o c√°lculo do valor final do produto da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1000</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mf">0.18</span><span class="p">)</span>
</code></pre></div></div>

<p>O valor final do nosso produto √©: R$ 1.180. Tudo certo!</p>

<p>No entanto, e se mais pra frente poder√≠amos querer adicionar um novo imposto, digamos, o IPI? O percentual do IPI √© diferente do ICSM, logo n√£o podemos reaproveita-lo. Sabendo que o IPI √© de 7% em cima do valor do produto (sem a incid√™ncia dos demais impostos), o nosso produto poderia ser calculado da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1000</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mf">0.18</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="mf">0.07</span><span class="p">)</span>
</code></pre></div></div>

<p>Funcionou de novo! Legal!</p>

<p>Mas, preciso dizer que embora pequeno, esse programa parece estar um pouco confuso. Veja, eu acabei de escrever essa linha, fui beber uma √°gua e j√° n√£o lembro exatamente o que s√£o esses n√∫meros. O 0.18 √© do IPI ou do ICSM? O 1000 √© do que mesmo? Imagina quando eu tiver que calcular o pre√ßo de outros produtos juntos com outros impostos. Isso tudo vai virar uma bagun√ßa na minha cabe√ßa.</p>

<p>Vari√°veis s√£o uma excelente forma para guardar um determinado item de dado. Uma vari√°vel consiste basicamente de uma sacola que pode guardar apenas um item. Para que a gente saiba onde vamos guardar nosso item de dado, precisamos colocar um identificador na nossa sacola. O identificador √© o nome da vari√°vel. No exemplo acima, poder√≠amos usar <code class="highlighter-rouge">IPI</code> e  <code class="highlighter-rouge">ICMS</code> como identificador. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span><span class="p">;</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span><span class="p">;</span>
</code></pre></div></div>

<p>As duas instru√ß√µes acima apresentam duas declara√ß√µes de vari√°veis. De agora em diante, toda vez que mencionarmos <code class="highlighter-rouge">icms</code> ou <code class="highlighter-rouge">ipi</code> o Ruby entender√° que estamos querendo usar os <em>valores</em> que est√£o armazenados nessas vari√°veis. Para confirmar que</p>

<blockquote>
  <p><strong>DICA:</strong> Bons nome de vari√°veis est√£o relacionados ao contexto do problema, como <code class="highlighter-rouge">IPI</code> e <code class="highlighter-rouge">ICSM</code>. Evite nomes gen√©ricos, como <code class="highlighter-rouge">var1</code>, <code class="highlighter-rouge">var2</code> e <code class="highlighter-rouge">var3</code>. Usar bons nomes de vari√°vel tamb√©m ajuda na manuten√ß√£o do programa. √â muito mais f√°cil entender o que uma vari√°vel <code class="highlighter-rouge">ICMS</code> deve armazenar do que uma vari√°vel <code class="highlighter-rouge">var3</code>.</p>
</blockquote>

<p>Agora vamos completar o nosso programa, realizando o resto do c√°lculo do imposto no produto.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="n">produto</span> <span class="o">=</span> <span class="mi">1000</span>

<span class="n">produto</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">icms</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">produto</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>
</code></pre></div></div>

<p>Melhorou muito. Mas ainda acho que pode melhorar um pouco mais. Perceba que a vari√°vel <code class="highlighter-rouge">produto</code>, embora indique que ali mora um produto, √© pouco descritiva. Talvez fosse mais adequado armazenar exatamente o produto que custa R$ 1000, do que um produto gen√©rico.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">icms</span> <span class="o">=</span> <span class="mf">0.18</span>
<span class="n">ipi</span> <span class="o">=</span> <span class="mf">0.07</span>

<span class="n">tv</span> <span class="o">=</span> <span class="mi">1000</span>

<span class="n">tv_com_imposto</span> <span class="o">=</span> <span class="n">tv</span> <span class="o">+</span> <span class="p">(</span><span class="n">tv</span> <span class="o">*</span> <span class="n">icsm</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">tv</span> <span class="o">*</span> <span class="n">ipi</span><span class="p">)</span>
</code></pre></div></div>

<p>Agora sim, muito melhor! Repare que agora temos duas vari√°veis para nosso produto: uma com valor sem imposto (<code class="highlighter-rouge">tv</code>) e outra com imposto (<code class="highlighter-rouge">tv_com_imposto</code>). Isso pode ser √∫til, digamos, mais pra frente para elabora√ß√£o da nota fiscal do produto.</p>

<p>Aqueles que j√° tiveram experi√™ncia com outra linguagem de programa√ß√£o poder√£o rapidamente perceber que n√£o encerramos cada linha com um ponto e v√≠rgula (<code class="highlighter-rouge">;</code>). O ponto e v√≠rgula, comumente utilizado para indicar o fim de uma opera√ß√£o, tem seu uso facultado em Ruby. Poder√≠amos coloca-lo ao fim de cada uma das declara√ß√µes de vari√°veis acima, mas optamos por n√£o faz√™-lo. Como vamos ver ao longo desse livro, em Ruby h√° sempre mais de uma forma de se obter o mesmo resultado.</p>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>O uso de ponto e v√≠rgula no final de uma declara√ß√£o de vari√°vel √© opcional em Ruby. Qual sua opini√£o a respeito?</li>
  <li>Descreva pelo menos um cen√°rio em que o uso de um ponto e v√≠rgula √© obrigat√≥rio, mesmo em Ruby.</li>
</ul>
:ET