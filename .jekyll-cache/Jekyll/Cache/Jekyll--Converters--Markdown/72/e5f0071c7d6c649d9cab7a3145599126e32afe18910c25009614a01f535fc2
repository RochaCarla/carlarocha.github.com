I"9ã<p><a href="/ruby-guide/">Voltar ao come√ßo do guia</a></p>

<p>Tipos de dados (ou simplesmente tipos) s√£o a principal forma de se expressar como dados s√£o interpretados em uma determinada linguagem de programa√ß√£o. Em Ruby h√° v√°rios tipos de dados. Os mais b√°sicos s√£o:</p>

<ul>
  <li>Booleans</li>
  <li>Numbers</li>
  <li>Strings</li>
  <li>Symbols</li>
</ul>

<p>Neste cap√≠tulo do Guia Ruby vamos aprender o b√°sico da manipula√ß√£o de dados em Ruby.</p>

<h2 id="booleans">Booleans</h2>

<p>Booleans s√£o tipos de dados que possuem um dos dois poss√≠veis valores: <code class="highlighter-rouge">true</code> ou <code class="highlighter-rouge">false</code>. Nenhum outro valor √© permitido. No sistema bin√°rio, valores do tipo double ocupam somente dois d√≠gitos (armazenados em um √∫nico bit): 0‚ÄùT‚Äù, ‚ÄúU‚Äù ou 1.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="kp">true</span>
<span class="n">b</span> <span class="o">=</span> <span class="kp">false</span>
</code></pre></div></div>

<h2 id="numbers">Numbers</h2>

<p>Numbers (ou n√∫meros) s√£o cadeias de d√≠gitos. N√∫meros que representam a forma decimal podem ter um ponto. Em Ruby h√° basicamente dois tipos de dados para armazenar n√∫meros: <code class="highlighter-rouge">Integer</code>s e <code class="highlighter-rouge">Float</code>s. Para descobrir qual √© o tipo do seu n√∫mero, podemos fazer novamente uma chamada ao <code class="highlighter-rouge">.class</code>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">34</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Integer</span>
<span class="mf">3.1415</span><span class="p">.</span><span class="nf">class</span> <span class="c1"># =&gt; Float</span>
</code></pre></div></div>

<p>A chamada ao c√≥digo <code class="highlighter-rouge">3.1415.class</code> torna a discuss√£o um pouco mais interessante, pois h√° dois pontos (<code class="highlighter-rouge">.</code>) definidos. O ponto que precede o <code class="highlighter-rouge">.class</code> √©, como j√° sabemos, uma chamada ao m√©todo <code class="highlighter-rouge">class(...)</code>, enquanto que o ponto no n√∫mero  <code class="highlighter-rouge">3.1415</code> √© apenas uma separa√ß√£o decimal.</p>

<hr />
<p><strong>Curiosidade</strong>
No Brasil, a separa√ß√£o de decimal √© feia com uma virgula (e.g., <code class="highlighter-rouge">3,1415</code>), enquanto que em outros pa√≠ses a separa√ß√£o √© feita com ponto (e.g., <code class="highlighter-rouge">3.1415</code>). √â por isso que a separa√ß√£o oficial acabou sendo com ponto, e tamb√©m por isso que chamamos <em>ponto flutuante</em> e n√£o <em>v√≠rgula flutuante</em>.
‚Äî</p>

<p>H√° outras formas de representar pontos flutuantes, como por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">3.1415</span> <span class="c1"># =&gt; 3.1415</span>
<span class="o">-</span><span class="mf">3.1415</span> <span class="c1"># =&gt; -3.1415</span>
<span class="mi">3_1415</span> <span class="c1"># =&gt; 31415 (underscore s√£o ignorados; o resultado √© um inteiro)</span>
<span class="mf">3e2</span> <span class="c1"># =&gt; 300 (3.0 x 10e2)</span>
<span class="mf">3.1e2</span> <span class="c1"># =&gt; 310 (3.1 x 10e2)</span>
<span class="mf">3.1E2</span> <span class="c1"># =&gt; 310 (3.1 x 10e2)</span>
</code></pre></div></div>

<p>Em Ruby h√° tamb√©m v√°rios m√©todos auxiliares que apoiam a manipula√ß√£o de tipos de dados num√©ricos. Por exemplo:</p>

<h3 id="to_s">to_s</h3>

<p>O m√©todo <code class="highlighter-rouge">to_s</code> converte um n√∫mero para uma string.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">34</span><span class="p">.</span><span class="nf">to_s</span> <span class="c1"># =&gt; "34"</span>
<span class="mf">3.1415</span><span class="p">.</span><span class="nf">to_s</span> <span class="c1"># =&gt; "3.1415"</span>
</code></pre></div></div>

<h3 id="ceilfloor">ceil/floor</h3>

<p>O m√©todo <code class="highlighter-rouge">ceil</code> faz o arredondamento para cima enquanto o m√©todo <code class="highlighter-rouge">floor</code> faz o arredondamento para baixo.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mf">34.1</span><span class="p">.</span><span class="nf">ceil</span> <span class="c1"># =&gt; "35"</span>
<span class="mf">34.9</span><span class="p">.</span><span class="nf">floor</span> <span class="c1"># =&gt; "34"</span>
</code></pre></div></div>
<blockquote>
  <p><strong>PERGUNTA:</strong> Os m√©todos <code class="highlighter-rouge">ceil</code> e <code class="highlighter-rouge">flor</code> funcionam com inteiros? Por qu√™?</p>
</blockquote>

<h3 id="nextpred">next/pred</h3>

<p>O m√©todo <code class="highlighter-rouge">next</code> retorna o pr√≥ximo consecutivo inteiro enquanto o m√©todo <code class="highlighter-rouge">pred</code> retorna o predecessor imediato.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">34</span><span class="p">.</span><span class="nf">next</span> <span class="c1"># =&gt; "35"</span>
<span class="mi">34</span><span class="p">.</span><span class="nf">pred</span> <span class="c1"># =&gt; "33"</span>
</code></pre></div></div>

<p>Al√©m dos m√©todos acima (e de v√°rios outros, rode <code class="highlighter-rouge">1.methods</code> para ter uma id√©ia), a linguagem Ruby tamb√©m implementa alguns operadores aritm√©ticos elementares. Por exemplo:</p>

<h3 id="adi√ß√£o">adi√ß√£o</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span> <span class="c1">#=&gt; 10</span>
</code></pre></div></div>

<h3 id="subtra√ß√£o">subtra√ß√£o</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">-</span> <span class="mi">5</span> <span class="c1">#=&gt; 0</span>
</code></pre></div></div>

<h3 id="multiplica√ß√£o">multiplica√ß√£o</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span> <span class="c1">#=&gt; 25</span>
</code></pre></div></div>

<h3 id="divis√£o">divis√£o</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">/</span> <span class="mi">5</span> <span class="c1">#=&gt; 1</span>
</code></pre></div></div>

<h3 id="resto">resto</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">10</span> <span class="o">%</span> <span class="mi">3</span> <span class="c1">#=&gt; 1 # uma vez que o resto da divis√£o 10/3 √© igual a 1</span>
</code></pre></div></div>

<h3 id="exponencial">exponencial</h3>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">2</span> <span class="o">**</span> <span class="mi">3</span> <span class="c1">#=&gt; 8 # uma vez que  2 a terceira pot√™ncia, ou 2 * 2 * 2, √© igual a 8</span>
</code></pre></div></div>

<h2 id="strings">Strings</h2>

<p>O nome string vem do Ingl√™s, traduzido para algo como fio ou barbante. Por isso que em Portugu√™s chamamos que uma string √© uma cadeia caracteres. String em Ruby podem ser definidas com uma (<code class="highlighter-rouge">'</code>) ou duas (<code class="highlighter-rouge">"</code>) aspas.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nome</span> <span class="o">=</span> <span class="s1">'gustavo'</span>
<span class="n">nome</span> <span class="o">=</span> <span class="s2">"gustavo"</span>
</code></pre></div></div>

<p>As duas atribui√ß√µes acima s√£o v√°lidas para uma string.</p>

<p>Como ruby n√£o cont√©m tipo de dados de caracteres (execute <code class="highlighter-rouge">'a'.class</code> no terminal e veja a sa√≠da), toda e qualquer String √© instanciada via a classe String.</p>

<p>√â poss√≠vel, no entanto, manipular o conte√∫do de uma String. Para receber os caracteres de uma string, fa√ßa: <code class="highlighter-rouge">"teste".chars</code>. O <code class="highlighter-rouge">.chars</code> √© uma chamada ao m√©todo <code class="highlighter-rouge">char()</code>, que √© implementado pela classe String. Similar ao comando <code class="highlighter-rouge">put</code> que vimos no <a href="/guide/ruby">come√ßo desse guia</a>, os par√™nteses do m√©todo char tamb√©m foram omitidos. Mas, calma. Seria ent√£o o <code class="highlighter-rouge">put</code> tamb√©m um m√©todo? Mais sobre m√©todos e classes em futuras p√°ginas desse guia.</p>

<p>O tamanho m√°ximo de uma string √© 2^63 - 1 (em uma instala√ß√£o 64 bits; 2^31 - 1 caso contr√°rio). Voc√™ pode testar o limite de tamanho m√°ximo de uma string no interpretador usando o comando: <code class="highlighter-rouge">String.new("1" * (2**32))</code>.</p>

<blockquote>
  <p><strong><em>NOTA: O que esse comando faz?</em></strong> Vamos quebrar o comando acima em v√°rias pequenas partes. Indo de tr√°s pra frente. Primeiro, n√≥s calculamos 2 elevado a 32a pot√™ncia. Isso √© feito pela opera√ß√£o <code class="highlighter-rouge">2**32</code>. Em seguida, n√≥s multiplicamos a string ‚Äú1‚Äù com o valor resultante do c√°lculo da pot√™ncia anterior (feito pera opera√ß√£o <code class="highlighter-rouge">"1" * (2**32)</code>). O resultado dessa opera√ß√£o √© uma string ‚Äú111111‚Ä¶‚Äù de tamanho 2**32. Diferente de outras linguagens, em Ruby o operador <code class="highlighter-rouge">*</code> pode ser utilizado em strings, e seu comportamento √©: multiplique a ocorr√™ncia da mesma string. Para entender melhor, execute a instru√ß√£o <code class="highlighter-rouge">"oi" * 2</code> ou similares no seu interpretador. Por fim, a opera√ß√£o <code class="highlighter-rouge">String.new(...)</code> cria um novo objeto string, com o valor resultante.</p>
</blockquote>

<p>Alguns m√©todos comumente empregado em strings incluem, incluem:</p>

<h3>[]</h3>

<p>Similar a outras linguagens de programa√ß√£o, usa-se colchetes para acessar um determinado caracter em uma string. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># =&gt; "U"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># =&gt; "F"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># =&gt; "P"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="c1"># =&gt; "A"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="c1"># =&gt; nil</span>
</code></pre></div></div>

<p>No entanto, diferente de outras linguagens de programa√ß√£o, o operador <code class="highlighter-rouge">[]</code> √© implementado como um m√©todo, de mesmo nome, dentro da classe String. Logo a mesma chamada pode ser feita de forma an√°loga usando:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">[</span><span class="p">](</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; "F"</span>
</code></pre></div></div>

<p>Parece estranho, n√£o? No cap√≠tulo sobre m√©todos iremos descrever mais sobre esse tipo de comportamento. Por hora, basta-nos saber que o operador <code class="highlighter-rouge">[]</code> √© um m√©todo. E por ser um m√©todo, pode aceitar par√¢metros (no caso do exemplo de c√≥digo acima, o valor <code class="highlighter-rouge">1</code> foi passado como par√¢metro do m√©todo <code class="highlighter-rouge">[]</code>).</p>

<p>O operador <code class="highlighter-rouge">[]</code> pode tamb√©m receber dois par√¢metros. Nesse acaso, em vez de retornar o caracter armazenado em uma determinada posi√ß√£o, ele retornar√° uma faixa de caracteres. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="c1"># =&gt; "UF"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="c1"># =&gt; "PA"</span>

<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">[</span><span class="p">](</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; "UF"</span>
<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">[</span><span class="p">](</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; "PA"</span>
</code></pre></div></div>

<p>Em Ruby h√° sempre mais de uma forma de se fazer a mesma coisa. Alternativamente, poder√≠amos usar o m√©todo <code class="highlighter-rouge">slice</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; "UF"</span>
<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; "PA"</span>
</code></pre></div></div>

<p>Por fim, poder√≠amos tamb√©m usar <em>range operator</em>, que √© o s√≠mbolo <code class="highlighter-rouge">..</code> (dois pontos consecutivos) no lugar da virgula.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">[</span><span class="p">](</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; "UFP"</span>
<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">[</span><span class="p">](</span><span class="mi">2</span><span class="o">..</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; "PA"</span>

<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># =&gt; "UFP"</span>
<span class="s2">"UFPA"</span><span class="p">[</span><span class="mi">2</span><span class="o">..</span><span class="mi">3</span><span class="p">]</span> <span class="c1"># =&gt; "PA"</span>

<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; "UFP"</span>
<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">2</span><span class="o">..</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; "PA"</span>
</code></pre></div></div>

<p>Perceba que agora o comportamento foi ligeiramente diferente. O que aconteceu? E por que isso aconteceu?</p>

<h3 id="sizelength">size/length</h3>

<p>Calcula o tamanho de uma string.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">size</span> <span class="c1"># =&gt; 4</span>
<span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">length</span> <span class="c1"># =&gt; 4</span>
</code></pre></div></div>

<blockquote>
  <p>**PERGUNTA:<em>** Por qu√™ existem dois m√©todos que fazem _exatamente</em> a mesma coisa?</p>
</blockquote>

<h3 id="to_i">to_i</h3>

<p>De forma an√°loga ao <code class="highlighter-rouge">to_s</code>, o m√©todo <code class="highlighter-rouge">to_i</code> converte uma string para um inteiro.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"3"</span><span class="p">.</span><span class="nf">to_i</span> <span class="c1"># =&gt; 3</span>
<span class="s2">"3.1415"</span><span class="p">.</span><span class="nf">to_i</span> <span class="c1"># =&gt; 3</span>
</code></pre></div></div>

<p>Como pedimos para passar uma string que continha um n√∫mero decimal para um formato de n√∫mero inteiro, o arredondamento para para inteiro (sem ponto) ocorreu naturalmente. No entanto, se quis√©ssemos manter a precis√£o do n√∫mero decimal, ter√≠amos que usar o m√©todo <code class="highlighter-rouge">to_f</code>.</p>

<h3 id="shovel">¬´¬†(shovel)</h3>

<p>O shovel (<code class="highlighter-rouge">&lt;&lt;</code>) √© um operador (e tamb√©m um m√©todo) que realiza a concatena√ß√£o de strings. O operador <code class="highlighter-rouge">&lt;&lt;</code> tem um comportamento muito similar ao do operador <code class="highlighter-rouge">+</code>, que √© mais conhecido em outras linguagens de programa√ß√£o.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">universidade</span> <span class="o">=</span> <span class="s2">"UFPA"</span>
<span class="n">curso</span> <span class="o">=</span> <span class="s2">"Ci√™ncia da Computa√ß√£o"</span>

<span class="n">string</span> <span class="o">=</span> <span class="s2">""</span>
<span class="n">string</span> <span class="o">&lt;&lt;</span> <span class="s2">"Estou cursando o curso de "</span>
<span class="n">string</span> <span class="o">&lt;&lt;</span> <span class="n">curso</span>
<span class="n">string</span> <span class="o">&lt;&lt;</span> <span class="s2">" na "</span>
<span class="n">string</span> <span class="o">&lt;&lt;</span> <span class="n">universidade</span>
</code></pre></div></div>

<p>N√£o custa tamb√©m mencionar que a concatena√ß√£o usando shovel poderia tamb√©m ser feita usando o formato de chamada de m√©todo: <code class="highlighter-rouge">string.&lt;&lt;(string)</code>.</p>

<p>No entanto, o operador <code class="highlighter-rouge">+</code> tamb√©m¬†√© fornecido na linguagem Ruby. Como pode-se imaginar, a concatena√ß√£o de strings tamb√©m poderia ser implementada da seguinte forma:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">universidade</span> <span class="o">=</span> <span class="s2">"UFPA"</span>
<span class="n">curso</span> <span class="o">=</span> <span class="s2">"Ci√™ncia da Computa√ß√£o"</span>

<span class="n">string</span> <span class="o">=</span> <span class="s2">""</span>
<span class="n">string</span> <span class="o">+=</span> <span class="s2">"Estou cursando o curso de "</span>
<span class="n">string</span> <span class="o">+=</span> <span class="n">curso</span>
<span class="n">string</span> <span class="o">+=</span> <span class="s2">" na "</span>
<span class="n">string</span> <span class="o">+=</span> <span class="n">universidade</span>
</code></pre></div></div>

<p>Um outro recurso fornecido pela linguagem Ruby para concatena√ß√£o de strings √© a interpola√ß√£o. Interpola√ß√£o de strings √© a capacidade de combinar duas ou mais strings em uma s√≥. Em Ruby isso pode ser feito atrav√©s do constructo <code class="highlighter-rouge">#{}</code>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">universidade</span> <span class="o">=</span> <span class="s2">"UFPA"</span>
<span class="n">curso</span> <span class="o">=</span> <span class="s2">"Ci√™ncia da Computa√ß√£o"</span>

<span class="nb">puts</span> <span class="s2">"Estou cursando o curso de </span><span class="si">#{</span><span class="n">curso</span><span class="si">}</span><span class="s2"> na </span><span class="si">#{</span><span class="n">universidade</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="upcasedowncase">upcase/downcase</h3>

<p>Esses m√©todos colocam o texto de uma string para caixa alta (<code class="highlighter-rouge">upcase</code>) ou caixa baixa (<code class="highlighter-rouge">downcase</code>).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">universidade</span> <span class="o">=</span> <span class="s2">"UFPA"</span><span class="p">.</span><span class="nf">downcase</span>
<span class="n">curso</span> <span class="o">=</span> <span class="s2">"Ci√™ncia da Computa√ß√£o"</span><span class="p">.</span><span class="nf">upcase</span>

<span class="nb">puts</span> <span class="s2">"Estou cursando o curso de </span><span class="si">#{</span><span class="n">curso</span><span class="si">}</span><span class="s2"> na </span><span class="si">#{</span><span class="n">universidade</span><span class="si">}</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="chomp">chomp</h3>

<p>O <code class="highlighter-rouge">chomp</code> √© um m√©todo muito comum de ser utilizado junto com o m√©todo <code class="highlighter-rouge">gets</code>. O m√©todo gets l√™ toda a entrada de dados fornecida pelo usu√°rio, inclu√≠ndo o <code class="highlighter-rouge">ENTER</code> que o usu√°rio aperta para poder enviar os dados. O <code class="highlighter-rouge">ENTER</code>, por sua vez, √© traduzido para uma quebra de linha, identificada pelo s√≠mbolo <code class="highlighter-rouge">\n</code>.</p>

<p>Mas porque precisamos nos preocupar com um <code class="highlighter-rouge">\n</code> em uma string? Considere o trecho a seguir.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">advinhacao</span> <span class="o">=</span> <span class="s2">"42"</span>
<span class="n">chute</span> <span class="o">=</span> <span class="nb">gets</span>

<span class="n">advinhacao</span> <span class="o">==</span> <span class="n">chute</span> <span class="c1"># =&gt; false</span>
</code></pre></div></div>

<p>Nesse exemplo acima, mesmo que o usu√°rio passe a string <code class="highlighter-rouge">"42"</code> por par√¢metro, a express√£o <code class="highlighter-rouge">advinhacao == chute</code> ser√° avaliada para <code class="highlighter-rouge">false</code>. Isso acontece, pois, na verdade, a express√£o em avalia√ß√£o √© a seguinte: <code class="highlighter-rouge">"42" == "42\n"</code>, que s√£o naturalmente duas strings diferentes.</p>

<h3 id="striplstriprstrip">strip/lstrip/rstrip</h3>

<p>O <code class="highlighter-rouge">strip</code> remove a quantidade extra de espa√ßo em branco no come√ßo e no final de uma string. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"         UFPA         "</span><span class="p">.</span><span class="nf">strip</span>
</code></pre></div></div>

<p>Os m√©todos auxiliares (<code class="highlighter-rouge">lstrip</code> e <code class="highlighter-rouge">rstrip</code>) funcionam da mesma forma, exceto que estes s√£o espec√≠ficos para retirar o excesso de caracteres em branco na esquerda e na direita da string, respectivamente.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="s2">"         UFPA         "</span><span class="p">.</span><span class="nf">lstrip</span>
</code></pre></div></div>

<h3 id="splitjoin">split/join</h3>

<p>O m√©todo <code class="highlighter-rouge">split</code> quebra uma string em um array. Para identificar o ponto de separa√ß√£o da string (chamado de delimitador), o m√©todo <code class="highlighter-rouge">split</code> usa por padr√£o um espa√ßo em branco como separador. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">curso</span> <span class="o">=</span> <span class="s2">"Ci√™ncia da Computa√ß√£o"</span>
<span class="n">curso</span><span class="p">.</span><span class="nf">split</span> <span class="c1"># =&gt; ["Ci√™ncia", "da", "Computa√ß√£o"]</span>
</code></pre></div></div>

<p>No entanto, o programador pode fornecer qualquer outro delimitador. Isso √© feito atrav√©s da passagem de um valor por par√¢metro do m√©todo <code class="highlighter-rouge">split</code>. Por exemplo:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">texto</span> <span class="o">=</span> <span class="s2">"Meu primeiro carro"</span>
<span class="n">texto</span><span class="p">.</span><span class="nf">split</span> <span class="s2">"primeiro"</span> <span class="c1"># =&gt;  ["Meu ", " carro"]</span>
</code></pre></div></div>

<p>Lembrando que o uso de par√™nteses √© opcional na chamada de m√©todos.</p>

<h2 id="symbols">Symbols</h2>

<p>Um outro tipo de dados que √© extremamente importante em Ruby (e n√£o t√£o frequente encontrado em outras linguagens) √© o <code class="highlighter-rouge">:symbol</code>, isto √©, um identificador que √© precedido por um dois pontos (<code class="highlighter-rouge">:</code>). S√≠mbolos s√£o usados para identificar um recurso espec√≠fico, seja um m√©todo, uma vari√°vel, uma chave de um hash, etc.</p>

<p>S√≠mbolos s√£o de certa forma compar√°veis a string, o que faz com que programadores novatos em Ruby se confundam em como usa-los. S√≠mbolos tem duas importantes caracter√≠sticas:</p>

<ul>
  <li>S√≠mbolos tem sempre o mesmo valor, e</li>
  <li>S√≠mbolos tem sempre o mesmo <code class="highlighter-rouge">object_id</code></li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">puts</span> <span class="ss">:a</span>

<span class="nb">puts</span> <span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span>  
<span class="nb">puts</span> <span class="s2">"a"</span><span class="p">.</span><span class="nf">object_id</span>  

<span class="nb">puts</span> <span class="ss">:a</span><span class="p">.</span><span class="nf">object_id</span>  
<span class="nb">puts</span> <span class="ss">:a</span><span class="p">.</span><span class="nf">object_id</span>  
</code></pre></div></div>

<p>Como s√≠mbolos s√£o √∫nicos e n√£o podem ser alterados durante a execu√ß√£o do programa. Seu maior benef√≠cio √© deixar o c√≥digo com uma nomenclatura consistente.</p>

<p>H√° uma regra simples para saber quando usar uma string ou um s√≠mbolo:</p>

<ul>
  <li>Se o conte√∫do (a sequ√™ncia de caracteres) for mais importante, use uma string.</li>
  <li>Se a identidade do objeto for mais importante, use um s√≠mbolo.</li>
</ul>

<p>Basicamente, um s√≠mbolo √© utilizado quando voc√™ quer referenciar alguma coisa como uma string, mas n√£o tem a inten√ß√£o de altera-lo ou imprimi-lo.</p>

<p>√â poss√≠vel, no entanto, transformar uma string em um s√≠mbolo (e vice-versa).</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"ufpa"</span><span class="p">.</span><span class="nf">to_sym</span> <span class="c1"># =&gt; :ufpa</span>
<span class="ss">:ufpa</span><span class="p">.</span><span class="nf">to_s</span> <span class="c1"># =&gt; "ufpa"</span>
</code></pre></div></div>

<p>Ainda est√° confuso? Nos pr√≥ximos cap√≠tulos vamos trazer exemplos mais concretos da utilidade de s√≠mbolos no dia a dia do desenvolvedor Rubista.</p>

<h2 id="sistemas-de-tipos">Sistemas de tipos</h2>

<p>Uma parte extremamente importante de linguagens de programa√ß√£o √© seu sistema de tipos. Um sistema de tipos √© compostos por diversas regras que s√£o capazes de associar uma determinada propriedade (por exemplo, uma vari√°vel) a um determinado tipo (por exemplo, string).</p>

<p>Um dos principais objetivos de um sistema de tipos √© tentar diminuir a quantidade de bugs que podem existir em um programa, checando se express√µes foram bem definidas. Por exemplo, a express√£o <code class="highlighter-rouge">3 / "Ol√° mundo"</code> n√£o √© bem definida pois n√£o existem regras que especificam como um inteiro pode ser dividido por uma string. Se executarmos esse c√≥digo no <code class="highlighter-rouge">IRB</code>, receberemos um <code class="highlighter-rouge">TypeError</code>, que √© uma forma do interpretador nos dizer que h√° algum problema com os tipos da express√£o (no caso, <code class="highlighter-rouge">String can't be coerced into Integer</code>).</p>

<p>Essa checagem pode acontecer tanto em tempo de compila√ß√£o, quanto em tempo de execu√ß√£o. Algumas linguagens, inclusive, optam por usar uma combina√ß√£o dos dois m√©todos. Ruby realiza checagem de tipos em tempo de execu√ß√£o, por isso Ruby √© conhecida como tipada dinamicamente (ou <em>dynamic typed</em>). Isto n√£o implica, no entanto, que o tipo seja explicitamente declarado antes do seu uso. Como j√° vimos ao longo desse guia, declara√ß√£o de vari√°veis em Ruby pode ser simples como <code class="highlighter-rouge">dez = 10</code> (sem informar o tipo).</p>

<p>No entanto, Ruby tamb√©m √© conhecida por ser uma linguagem fortemente tipada (ou <em>strongly typed</em>). De forma simplista, isto significa que o tipo de uma vari√°vel deve ser definido (e pode ser ser alterado) <em>antes</em> que opera√ß√µes que necessitem do tipo sejam executadas. Isto n√£o implica, no entanto, que o tipo seja explicitamente declarado antes do seu uso. Por exemplo, em Ruby n√£o h√° nenhum problema em declarar uma vari√°vel como um inteiro e depois como uma string:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dez</span> <span class="o">=</span> <span class="s2">"dez"</span>
<span class="n">dez</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div></div>

<p>Como mencionado, mudan√ßas no tipo de uma vari√°vel podem acontecer antes de uma opera√ß√£o que necessite desse tipo, pois o que importa √© o tipo no momento da avalia√ß√£o da express√£o.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dez</span> <span class="o">=</span> <span class="s2">"dez"</span>
<span class="n">dez</span><span class="p">.</span><span class="nf">upcase</span>   <span class="c1"># =&gt; "DEZ"</span>

<span class="n">dez</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">dez</span><span class="p">.</span><span class="nf">upcase</span>   <span class="c1"># =&gt; NoMethodError</span>
</code></pre></div></div>

<p>Seja em comunidades de desenvolvimento de software ou na comunidade cient√≠fica, h√° um aquecido debate sobre a quais caracter√≠sticas de um sistema de tipos s√£o mais adequadas. Para se aprofundar na discuss√£o, sugiro a leitura do artigo.</p>

<h2 id="exerc√≠cios-de-fixa√ß√£o">Exerc√≠cios de fixa√ß√£o</h2>

<ul>
  <li>
    <p>O tipo de dados String contem incr√≠veis 183 m√©todos (rode <code class="highlighter-rouge">"".methods.count</code> e se surpreenda). Veja se voc√™ reconhece algum m√©todo familiar? E quais aqueles que voc√™ n√£o conheceu? Pesquise e entenda mais sobre eles.</p>
  </li>
  <li>M√©todo ou operador? Percebemos que alguns operadores s√£o implementados como m√©todos. Pesquise como foi feita a implementa√ß√£o dos seguintes operadores:
    <ul>
      <li>Inteiros: +, /, **</li>
      <li>String: +, *, []</li>
    </ul>
  </li>
  <li>
    <p>Existe alguma diferen√ßa entre usar <code class="highlighter-rouge">+=</code> e <code class="highlighter-rouge">&lt;&lt;</code> para concatena√ß√£o de strings? Pesquise.</p>
  </li>
  <li>
    <p>Percebemos que os operadores podem tamb√©m ser executados via chamada de m√©todo tradicional. Fa√ßa a implementa√ß√£o do exemplo do operador shovel usando chamada de m√©todos. Depois, compare com a solu√ß√£o apresentada aqui. Na sua opini√£o, qual das vers√µes √© mais leg√≠vel e por qu√™?</p>
  </li>
  <li>
    <p>Al√©m dos tipos b√°sicos mencionados, h√° tamb√©m a inexist√™ncia de um tipo, o chamado <code class="highlighter-rouge">nil</code>. Usamos <code class="highlighter-rouge">nil</code> quando, por exemplo, queremos inicializar uma vari√°vel mas n√£o sabemos, no momento da instancia√ß√£o, qual ser√° seu valor. Usamos <code class="highlighter-rouge">nil</code> nesse caso. No entanto, o uso do <code class="highlighter-rouge">nil</code> √© percebidamente uma m√° pr√°tica de programa√ß√£o. Voc√™ saberia explicar o por qu√™?</p>
  </li>
  <li>
    <p>Talvez n√£o seja novidade pra voc√™ que a express√£o <code class="highlighter-rouge">0.2 + 0.1 == 0.3</code> √© avaliado para <code class="highlighter-rouge">false</code>. Mas, por que isso acontece? Explique detalhadamente.</p>
  </li>
  <li>
    <p>Como voc√™ poderia criar programas que fa√ßam uso de casas decimais e que n√£o exibem esse comportamento?</p>
  </li>
  <li>O DNA √© uma string cujo alfabeto cont√©m os seguintes s√≠mbolo: <code class="highlighter-rouge">"A"</code>, <code class="highlighter-rouge">"C"</code>, <code class="highlighter-rouge">"G"</code> e <code class="highlighter-rouge">"T"</code>. Dado um DNA, calcule a ocorr√™ncia de cada s√≠mbolo. Imprima cada ocorr√™ncia separado por um espa√ßo.
    <ul>
      <li>Entrada: <code class="highlighter-rouge">"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"</code></li>
      <li>Sa√≠da: 20 12 17 21</li>
    </ul>
  </li>
  <li>
    <p>Um RNA √© uma string formada de um alfabeto contendo os s√≠mbolos <code class="highlighter-rouge">"A"</code>, <code class="highlighter-rouge">"C"</code>, <code class="highlighter-rouge">"G"</code> e <code class="highlighter-rouge">"U"</code>. Dado uma string de RNA, sua transcri√ß√£o √© feita atrav√©s da substitui√ß√£o de todas ocorr√™ncias de ‚ÄúT‚Äù em para ‚ÄúU‚Äù.  Transcreva o RNA a seguir: <code class="highlighter-rouge">"GATGGAACTTGACTACGTAAATT"</code>.</p>
  </li>
  <li>Em um DNA, os s√≠mbolos ‚ÄúA‚Äù e ‚ÄúT‚Äù complementos de cada um, da mesma forma que ‚ÄúC‚Äù e ‚ÄúG‚Äù. O complemento reverso (<em>reverse complement</em>) de uma string de DNA √© formada pelo reverso do DNA e ent√£o aplicando seus complementos. Por exemplo, o complemento reverso de ‚ÄúGTCA‚Äù √© ‚ÄúTGAC‚Äù.
    <ul>
      <li>Entrada: <code class="highlighter-rouge">"AAAACCCGGT"</code></li>
      <li>Sa√≠da: <code class="highlighter-rouge">"ACCGGGTTTT"</code></li>
    </ul>
  </li>
  <li>JavaScript √© conhecida por ser uma linguagem com tipagem din√¢mica e fraca. Cite alguns exemplos de problemas que um sistema de tipos como JavaScript pode trazer para um desenvolvedor de software desatento?</li>
</ul>
:ET