<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gustavo Pinto</title>
    <description>Professinal webpage for Gustavo Pitno.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Aug 2017 16:50:21 -0300</pubDate>
    <lastBuildDate>Tue, 15 Aug 2017 16:50:21 -0300</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>POSSE 2017 An experience report</title>
        <description>&lt;p&gt;POSSE (Professors’ Open Source Software Experience) is a workshop aimed at bringing world-wide professors to discuss how they can improve their CS courses in order to take advantage of free/open-source software (FOSS for short). FOSS is a topic very dear to my heart. When I was a student, I participated in several FOSS conferences and I also used to contribute to some FOSS projects. As a researcher (and, eventually, as a professor) I shifted my interest a bit. Although I’m not coding as much as I would like to, I’m still interested in FOSS. Indeed, some of my research research is about FOSS (e.g., communities, engagement, perceptions, etc). In addition, as of today, I’m a faculty running for tenure, with nearly no previous teaching experience. Needless to say that I was with high expectations for the workshop.&lt;/p&gt;

&lt;p&gt;This year the workshop took place at the beautiful Bologna, Italy. This blog post describes my personal yet biased view about the 2 intensive days of chatting with other professors about CS courses, open-source, pasta, and wine. The workshop was a mix of several lectures and group activities. Although I agree that both parts are equally important, this blog post is focused on the lecture part, which I took some notes  (I did not have time to write down notes during the group activities).&lt;/p&gt;

&lt;p&gt;One of the first advice for professors that want to introduce FOSS in their courses is to inform students upfront that the course will not be a normal one. That is, the professor is not supposed to know everything about the FOSS under study (in fact, depending on the FOSS, no one knows), although, professors have to figure out with students what they do not know — which is perfectly fine. It is important to note that the learning curve is significant for both faculties and students. On the other hand, this approach provide excellent opportunities for technical/non-technical learning. We need to adapt the learning approach, though.&lt;/p&gt;

&lt;p&gt;To minimize the learning curve, professors need materials. Good materials can be found at the &lt;a href=&quot;http://teachingopensource.org/&quot;&gt;teachingopensource.org&lt;/a&gt; and at the &lt;a href=&quot;http://foss2serve.org/&quot;&gt;foss2serve.org&lt;/a&gt; websites. Take the time to explore them – they have a rich database.&lt;/p&gt;

&lt;p&gt;While you learn something new from these websites, think about how students can contribute to open-source. One point that was largely debated is that open-source contributions is not only about code. There are many many ways that one can contribute – code is only one of them. Indeed, in order to be a FOSSer, a student does not even need to commit changes to a repository. A FOSSer can (1) create a blog post, (2) test the software, or (3) answer questions in a malling list. There are, at least, &lt;a href=&quot;http://foss2serve.org/index.php/50_Ways_to_be_a_FOSSer&quot;&gt;50 ways that one can contribute to FOSS&lt;/a&gt;. Find one that can fit your needs and tell students to do that.&lt;/p&gt;

&lt;p&gt;However, we cannot throw a student that does not how to swim in the deep end of a pool and say: swim. We need a scaffold. Some questions you should ask yourself: What we need to do to contribute to FOSS? What are the steps? Forget students! What I have to do? After you figure out, think about how can you teach students to do that?&lt;/p&gt;

&lt;p&gt;Since both professors and students are immersing into not well-known waters, it is important to have a contact within the FOSS community, who could provide help. How to find a contact? One way is to observe the community. Examples include: (1) Go to an IRC channel, (2) assign a malling list, or (3) participate in a slack group. After a while, you would be able to answer questions such as: Is this community active? Do they answer novice questions? Can you tell who are the core developers?&lt;/p&gt;

&lt;p&gt;If this community seems to be a good one, then it is time to introduce yourself, explain that you have some students that might be able to contribute, describe your goal, etc. Is someone willing to help? Good! No? Do not give up. Repeat until you find a suitable community. If we have success finding good communities, the chances that students succeed should be higher.&lt;/p&gt;

&lt;p&gt;Some students have a hard time trying to find meaningful things to contribute during the short term of a course. Some FOSS projects provide labels for “easy” tasks, while others provide Roadmaps (i.e., known features/bugs that the FOSS project want to have done/fixed for the next release). These are good ways to search for meaningful tasks. However, Roadmaps might contain critical bugs. Although the community do want to get them fixed (therefore they might provide good support for the student), such bugs might be non-trivial, requiring students to spend much time in learning (instead of coding) activities. It might be tempting to work on such fancy bugs. However, the suggestion is not to work on the critical path! This might delay the contribution process — and demotivate students.&lt;/p&gt;

&lt;p&gt;Another thing to pay attention are the release dates. If there are releases scheduled during the course, contributions might be frozen for a while. Another challenge is related to architectural changes. If that is the case, some contributions might not be needed anymore (e.g., thanks for the fix, but this feature does not work like that anymore). The best way to prevent such problems is by understanding your community. Invest some time to figure out its needs and where it plans to go.&lt;/p&gt;

&lt;p&gt;Remember that the goal is to engage students. Therefore, in some classes (e.g., high school, introductory classes), placing a source code contribution is not necessary. In some cases, understanding the steps for contributing might be ideal. In any case, some professors mentioned that the acceptance of a contribution should not be graded. This is out of the your (and students’) control. Instead, students can earn additional credits if the contribution is accepted.&lt;/p&gt;

&lt;p&gt;It is important to change the mindset of having everything done before publishing. This not gonna work with FOSS. Teach students to release early and release often. This should be the norm. Also, tell students to avoid risks by working on small problems. One way to start is by working with documentation issues. Remember students that a lot of bugs are not code bugs. Typos are bugs! It is also important to engage students early – do not way for the last minute to provide a patch. How to do that? Create such assignment: get a patch by the end of this week.&lt;/p&gt;

&lt;p&gt;After passing the first contribution barrier, prepare students to become independent in the FOSS world. Most of it is done by teaching students how to ask good questions. Rule of thumb: if Google has the answer, it is not a good question. I heard that it is better to have students that ‘‘know how to ask good questions, rather than students with great technical skills’’. The rationale here is that when you get stuck (and you will), you should know where to find help. Finding help, however, is not only about asking for help, but also about asking politely and asking at the right place (or for the right person). That is, communication skills are highly demanded. If you have students such as this one:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just heard from a student: &amp;quot;I joined CS because I don&amp;#39;t need to talk to anybody&amp;quot;. What we did wrong?&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/881490978774945792&quot;&gt;July 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;Remember them: Communication is part of your job!&lt;/p&gt;

&lt;p&gt;All in all, I think this approach can lead to significantly improvements, in terms of both technical and non-technical skills. I will give it a try soon (and report the result too, hopefully).&lt;/p&gt;

&lt;p&gt;If you have experience teaching CS with FOSS, why not reporting them? I’d love to read.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jul 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/posse2017-experience-report/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/posse2017-experience-report/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>msr17 in 5 tweets</title>
        <description>&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The Mining Software Repositories (MSR) conference is the real place to go, if you want to learn the new advances regarding msr techniques, datasets, and tools. As data science is becoming increasingly important at a steady pace, the same is true for the msr conference.&lt;/p&gt;

&lt;p&gt;This year, msr17 had a beautiful program. I had been tweeting a lot during the two conference days. This blog post represents my personal and biased tentative of summarizing the whole conference in only five tweets. (If you haven’t been there and want to know more about what happened, just search for the #msr17 hashtag on Twitter)&lt;/p&gt;

&lt;p&gt;To get started, there was a plenary session about what are the MSR research pillars. Among the topics, some attendees suggested Open Access is something that the msr community must adopt. To decrease the adoption barrier, one attended mentioned that Docker should be much more used, in particular, for increasing the reproducibility of msr studies. However..&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;MSR encourages people for making their code available. But only few &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; attendees use &lt;a href=&quot;https://twitter.com/Docker&quot;&gt;@docker&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/865921799317585921&quot;&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;That said, maybe one of the first takeaway of #msr17 is that we need to encourage msr researchers to adopt such kind of tools that can help other researchers to replicate msr studies. Docker might be an interesting option. Indeed, there was a #msr17 paper about docker. According to this study, docker takes only 2 minutes to build, docker size can be as small as 4mb, and docker files have on average 3 revisions per year. That is, docker images are small, fast, and do not require much maintenance effort. It might not be that hard to convince your peers and students to use docker, right?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Most of the &lt;a href=&quot;https://twitter.com/Docker&quot;&gt;@docker&lt;/a&gt; image are Linux OSes. Size varies from 4MB to 200MB. &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866301745496018945&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;Another hot topic discussed at #msr17 was Continuous Integration (CI). Indeed, there was not only an entire session about CI, but also the mining track this year was all about CI. Interestingly, in 2016, there was no papers about CI at the msr conference. In 2017, #msr17 had 17 papers about CI (14 at the mining track, and 3 at the research track). One explanation is that high-quality, open-source CI servers became popular roughly in the last years. Other than that, most of the CI data was hidden in software companies databases – which is a challenge itself for a community that praises Open Access. Anyway, needless to say that, if you like CI, #msr17 was a real fun. Are you a Ph.D. student looking for a research topic? Maybe CI can be a good start point. However, the best yet most unexpected thing is that my co-authors and I won the Best Mining Challenge Paper Award! How cool is that?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Congratulations to &lt;a href=&quot;https://twitter.com/fernandocastor&quot;&gt;@fernandocastor&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gustavopinto&quot;&gt;@gustavopinto&lt;/a&gt; for the Best Mining Challenge Paper &lt;a href=&quot;https://t.co/9I2gvHo48p&quot;&gt;pic.twitter.com/9I2gvHo48p&lt;/a&gt;&lt;/p&gt;&amp;mdash; MSR 2017 (@msrconf) &lt;a href=&quot;https://twitter.com/msrconf/status/866378622596247553&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;The mining track was only possible due to the efforts from TU Delft folks, who created and maintained a high-quality CI dataset. Similarly, due to his seminal contributions to high-quality datasets (in particular to the Promisse repository), Tim Menzies won the Foundational Contribution Award. During his keynote talk, prof. Menzies mentioned that “There is not enough science in data science”, that is, there is too much knowledge waiting to be discovered in all this myriad of data. If that is the case, maybe the question is: where to start? prof. Menzies gave some insights on how to find important research problems:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What is the strangest thing in software science? &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; &lt;a href=&quot;https://t.co/gXegdPrVBe&quot;&gt;pic.twitter.com/gXegdPrVBe&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866378094394867714&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;That is, figure out what is the strangest thing about your research and go mining!&lt;/p&gt;

&lt;p&gt;My last tweet was actually a farewell one. While #msr17 was a pleasant experience, I’m already looking forward to #msr18. #msr18 will take place at Gothenburg, Sweden, and Yasutaka Kamei is the General chair. I briefly talked with him, and he is very excited about organizing #msr18. I believe we can expect another awesome msr! See you there?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; is now over. See you in &lt;a href=&quot;https://twitter.com/hashtag/msr18?src=hash&quot;&gt;#msr18&lt;/a&gt; in Gothenburg &lt;a href=&quot;https://t.co/rBGwoNhaIv&quot;&gt;pic.twitter.com/rBGwoNhaIv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866390115182153729&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;
</description>
        <pubDate>Thu, 25 May 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/msr17-in-5-tweets/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/msr17-in-5-tweets/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Where did I submit papers during my phd</title>
        <description>&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;Publishing papers take time. If you want to publish in a good venue, it takes even more time. Start as early as you can.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;I often tell students that they should submit papers to good conferences. During my Ph.D., I think I have submitted to &lt;em&gt;some&lt;/em&gt; good conferences. This is a rant about my submissions, while a Ph.D. student. I remember submitting a reasonable number of paper. Most of them were through easychair, which I can see 21 submissions during 2011-2015 (I graduated in Feb 2015). Among them, 11 papers were accepted. I learnt a lot while working on them, although I’m really proud of less than half of them. Let’s tell the story.&lt;/p&gt;

&lt;p&gt;During my first year, I just made one submission. It was to &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2095067&quot;&gt;Workshop on Transitioning to Multicore (TMC’2011)&lt;/a&gt;. It was co-located with SPLASH, a prestigious SE+PL conference. During that time, I was looking for a problem to work on, and my advisor was interested at better understanding the state of the use of Java’s concurrency constructs. The workshop was a perfect fit. I worked in this paper for months in a row, and I remember working intensively on it during the deadline week. It was the first time in my life that I didn’t sleep trying to finish a paper. My English was terrible at the time and somehow I was responsible for writing most of the stuff. The paper had only 6 pages, and we had a ton of data (needless to say that we didn’t understand some numbers). At the end, the paper was conditionally accepted – and I was super excited about it. As of 2017, it’s on the top-5 of my &lt;a href=&quot;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=dOeggYMAAAAJ&amp;amp;citation_for_view=dOeggYMAAAAJ:u5HHmVD_uO8C&quot;&gt;most cited papers&lt;/a&gt;. I’m really proud of what I learnt during the process. That was it for 2011.&lt;/p&gt;

&lt;p&gt;In 2012, I submitted four papers. One to FASE (rejected; and I don’t even recall), one to EASE (accepted), one to TISE (rejected, I don’t recall either), and another one to ICSM (rejected). I don’t have a major merit for the acceptance of the EASE paper, I just helped reviewing some papers (it is a systematic literature review). The ICSM is another story. It was an extended version of the TMC paper. 10 pages long, much more comprehensive and polished. Again, this submission made me go to bed after 7am. The paper was rejected, and I started to dislike this paper.&lt;/p&gt;

&lt;p&gt;It was 2013 and I was scratching a problem for my Ph.D. I submitted an early version of it to SBLP (a Brazilian PL conference), and it was brutally rejected (scored 0, -2 and -3). That was shocking. I thought I had a competitive paper, but I was wrong. I kept working on it, aiming at PLATEU, another workshop co-located with SPLASH. At the day of the deadline, my advisor called me and said that we must withdraw our submission (we have submitted an abstract). He thought that the paper was so bad that does not even deserve be submitted to this workshop (I also have another last minute canceled paper. But this time I turned down the submission (we were aiming at GREENS, a workshop co-located with ICSE)). I kept working on this paper, and we submitted it to CSMR (reject) and afterwards to ECOOP (rejected). Four rejections in a row. I also submitted to the &lt;a href=&quot;http://refactoring.info/WRT13/&quot;&gt;Workshop on Refactoring Tools (WRT)&lt;/a&gt; – co-located with SPLASH. This was my first submission without my advisor. It was also my first study targeting StackOverflow. Reviewers seem to like it (scored 2, 3, and 3), and it got into. Although naive, I like this paper.&lt;/p&gt;

&lt;p&gt;2014 was the beginning of the end. My advisor liked my WRT paper, and suggested to do the same, but now targeting my Ph.D. subject. We did and submitted to MSR (accepted). This was my first paper related to my Ph.D. – and it was accepted one year before graduating! In parallel, I kept working on the SBLP/PLATEU/CSMR/ECOOP paper. This time, we submitted to OOPSLA, and we made it (YAY!). The second paper related to my Ph.D. was accepted – and I’m very proud of it. I did another spin off, and submitted to OSS (accepted). This was my first paper targeting Github. Still, I submitted a paper to SEPS (another SPLASH co-located workshop, do you see the pattern?). It was accepted, related to my thesis, and invited to submit an extended version. We submitted it right afterwards – three main chapters done.&lt;/p&gt;

&lt;p&gt;In 2015, in cooperation with another students, I submitted to MSR (accepted) and to FASE (accepted; this time I remember). Although I like both of these papers, the FASE paper is very dear to my heart. However, none of them helped me graduating. I also submitted to SANER (former CSMR), but it was rejected. Remember the TMC/ICSM paper? In 2015 we submitted it to JSS (accepted). The complete story of this paper can be found at my advisor &lt;a href=&quot;http://fernandocastor.github.io/general/2016/10/11/long-hard-road.html&quot;&gt;blog post&lt;/a&gt;. In 2015 I start submitting more regularly (the rejected SANER paper was also rejected at SBLP, but accepted at PLATEU), but it was after my Ph.D.&lt;/p&gt;

&lt;p&gt;It is April 2017, and I got another contribution of my Ph.D. accepted last month. We submitted it twice to IEEE SW (twice rejected), to IST (rejected), but it landed at CACM (YAY!). The first submission to CACM was more than one year after graduating. I still have one chapter of my Ph.D. thesis not published. We got rejections at ASPLOS and FSE. I think it is a strong paper, and it will eventually be accepted somewhere (maybe 3 years after my Ph.D.!).&lt;/p&gt;

&lt;p&gt;Although I missed some submitted papers (I remember submitting to GPCE and PLDI, but they are nowhere to be found), this list is pretty much comprehensive. Tell your story too :-)&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/where-did-i-submit-papers-during-my-phd/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/where-did-i-submit-papers-during-my-phd/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Transfering Knowledge from Systematic Reviews to Practitioners</title>
        <description>&lt;p&gt;Researchers have few incentives to write to the general public. On the other hand, practitioners are not used to consume software engineering research. This “Two Solitude” problem is well-known, and several attempts have been made in order to remedying it.&lt;/p&gt;

&lt;p&gt;In a study called &lt;a href=&quot;/lost+found/esem2016.pdf&quot;&gt;Evidence Briefings: Towards a Medium to Transfer Knowledge from Systematic Reviews to Practitioners&lt;/a&gt;, published at &lt;a href=&quot;http://alarcos.esi.uclm.es/eseiw2016/esem/&quot;&gt;ESEM’16&lt;/a&gt;, we propose and evaluate “Evidence Briefings”, a new method for dissaminating research results to practitioners. This model is inspired by the “Rapid Reviews”, a well-known method used in Evidence-Based Medicine (EBM). Rapid Reviews are aimed at reducing the effort of the traditional systematic reviews by provididing brief documents with few pages focusing only on the main findings that are useful to practice. More interestingly, however, is the fact that Rapid Reviews are gaining attention lately. Among 100 rapid reviews published between 1997 and 2013, 51% of them were published between 2009 and 2012.&lt;/p&gt;

&lt;p&gt;Differently than Rapid Reviews, Evidence Briefings are an one-page document, extracted from a systematic review. It uses the principles of Information Design and Gestalt Theory. The primary objective is to develop documents that are comprehensible, accurately retrievable, natural, and as pleasant as possible.&lt;/p&gt;

&lt;h1 id=&quot;method&quot;&gt;Method&lt;/h1&gt;

&lt;p&gt;Figure below shows an example of an Evidence Briefing.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/briefing-structure.png&quot; alt=&quot;Gustavo Pinto&quot; width=&quot;320&quot; height=&quot;421&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;There are several design techniques applied in this briefing. Here we discuss only ot ones about the structure of the briefing (represented by the numbers within squares). They are: (1) The title of the briefing. (2) A short paragraph to present the goal of the briefing. (3) The main section that present the findings extracted from the original systematic review. (4) Informative box that outlines the intended audience and explains the nature of the briefings’ content. (5) The reference to the original systematic review. (6) The logos of our research group and university. All concepts obtained in the previous steps were analyzed and applied in an evidence template, which is open-sourced under CC-BY license.&lt;/p&gt;

&lt;p&gt;We create Evidence Briefings to 12 representative systematic reviews that were selected in a tertiary study. All the 12 evidence briefings as well as the briefing’s template can be found in &lt;a href=&quot;http://cin.ufpe.br/eseg/briefings&quot;&gt;http://cin.ufpe.br/eseg/briefings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We evaluated the evidence briefings in terms of both content and format. We used personal opinion surveys to ask researchers and practitioners what they think about evidence briefings. Our group of practitioners is composed by the authors of the systematic reviews. Our group of practitioners is composed by StackExchange users that posted questions related to the systematic review in charge.&lt;/p&gt;

&lt;p&gt;Our sample of reseachers is composed by 7 authors that answered the questionnaire, which corresponds to 31% of the 22 invitations. Our sample of practitioners is composed by 32 StackExchange users that responded the questionnaire. This corresponds to 21.9% of the 146 invitations.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;In the practitioners survey, we asked six questions to evaluate the briefing’s content. Here we discuss only two of them. We start by asking “To what degree do you think the information available in the briefing we sent to you can answer your question on StackExchange?”. Among the answers, 10% said that the briefing has totally answered, and another 20% said that it has partially answered their StackExchange questions. Another 32% said that the briefing touches a related topic, but does not help to answer the question. The remaining 38% said that the briefing is not related to the question and, therefore, it does not help in answering it.&lt;/p&gt;

&lt;p&gt;In the next question, we asked “Regardless the briefing answers or not your question, how important do you think is the research presented on the briefing?”. We found that 62% of the respondents said that the researches presented in the briefings are “Very important” or “Important”. Moreover, 25%, 6% believe they are “Moderately important” and “Slightly Important” respectively. The remaining 6% believe they are “Unwise”.&lt;/p&gt;

&lt;p&gt;In the reseachers survey, we asked “How does the briefing cover the main find- ings of your paper?”. We found that 72% (5) of the respondents describe as “Very good” or “Good”. The remaining 28% (2) said that it is “Acceptable”. This suggests that even though we are not the authors of the research papers, we were capable of creating, at least, acceptable briefings.&lt;/p&gt;

&lt;p&gt;In terms of format, we observed that 71% (5) of them “Strongly agree” or “Agree” that it is easy to find information in the briefings. Another 71% (5) “Strongly agree” or “Agree” that the briefing interface is clear and understandable. Finally, 56% (4) “Strongly agree” or “Agree” that the briefings look reliable.&lt;/p&gt;

&lt;h1 id=&quot;concluding&quot;&gt;Concluding&lt;/h1&gt;

&lt;p&gt;Our results suggest that Evidence Briefings was positively evaluated. For instance, most of the researchers and practitioners believe that it is easy to find information on Evidence Briefings. Also, most of them believe that it they clear, understandable, and reliable. We believe that Evidence Briefings can play a role on transferring knowledge from systematic reviews to practice.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/evidence-briefings/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/evidence-briefings/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>The story behind casual contributors</title>
        <description>&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.github.io/lost+found/saner2016.pdf&quot;&gt;More Common Than You Think: An In-Depth Study of Casual Contributors&lt;/a&gt;”. For the impatient, there is a summary of the summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributors are rather common&lt;/strong&gt;. 48.98% of the overall contributors that we analyzed are actually casual contributors. However, these contributors are responsible for only 1.73% of the total contributions in our set of analyzed projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributions are far from being trivial&lt;/strong&gt;. After a manual inspection of a sample of casual contributions, we found that although 28.64% of them are related to grammar and typo fixes, 30.20% of them fix bugs, 18.75% propose new features, and 8.85% refactor code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributions are well liked&lt;/strong&gt;. These contributions are perceived as a beneficial phenomenon from the perspective of project maintainters and casual contributors. Personal needs was the most reported motivation for the casual contributors. As a shortcoming, project maintainters reported an increasing number of reviews, which demands time from core developers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;Github changed the way developers contribute to OSS projects, in particular by providing a single process of contribution, which is called pull-based model. Using this model, developers do not need to have write access to the repository in order to provide changes to the software. This kind of environment, together with its contribution model, encourages newcomers to participate in the process.&lt;/p&gt;

&lt;p&gt;However, while some contributors want to have a key role on the project, some others do not share the same desire, although they still want to contribute nevertheless. In fact, it is well-known that popular projects have a restricted set of core developers, who drive the project, but also a broad set of “not that involved” developers, which are responsible for a long tail of small contributions.&lt;/p&gt;

&lt;p&gt;Despite the growing number of newcomers interested in contributing to OSS, little is known about this particular kind of contributor: the &lt;em&gt;casual contributor&lt;/em&gt;. In a study published on &lt;a href=&quot;http://saner.inf.usi.ch/&quot;&gt;SANER’16&lt;/a&gt;, we investigate (1) how common casual contribtuors are, (2) what are the characteristics of their contributions, and (3) how they are perceived.&lt;/p&gt;

&lt;p&gt;Here in this blog post, we will describe the main findings of the paper. If you want to know more about this research, consider reading the &lt;a href=&quot;http://gustavopinto.github.io/lost+found/saner2016.pdf&quot;&gt;pre-print&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;oss-selection&quot;&gt;OSS selection&lt;/h1&gt;

&lt;p&gt;We selected the top 20 most popular open-source projects hosted on Github written in: C, C++, Clojure, CoffeeScript, Erlang, Go, Haskell, Java, JavaScript, Objective-C, Perl, PHP, Python, Ruby, Scala, and TypeScript. Our initial corpus comprises 320 mature, non-trivial, OSS projects. However, we removed 45 false-positive projects (&lt;em&gt;e.g.,&lt;/em&gt; projects that are not software projects). Our final list of projects included &lt;a href=&quot;https://github.com/rails/rails&quot;&gt;rails&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django&quot;&gt;django&lt;/a&gt;, and &lt;a href=&quot;https://github.com/torvalds/linux/&quot;&gt;linux&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;surveys-with-practitioners&quot;&gt;Surveys with practitioners&lt;/h1&gt;

&lt;p&gt;We conducted two surveys with 197 the casual contributors and 64 project maintainers. These surveys were aimed at understanding the motivation, the benefits, and the drawbacks of this kind of contribution. Given the opportunity, I would like to thank the 261 developers that answered the survey. Assuming that it took about 10 minutes to answer the survey, the combined effort amounts to 2 full days. As one reviewer said, “The big deal is the story in the survey part”. &lt;strong&gt;Thank you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We observed that 65.8% of our respondents contribute to OSS at least once per month, and 75.2% of them are used to making casual contributions.&lt;/p&gt;

&lt;h1 id=&quot;how-common-are-casual-contributors-in-oss-projects&quot;&gt;How common are casual contributors in OSS projects?&lt;/h1&gt;

&lt;p&gt;Figure below presents an overall picture of some of the studied projects. Each histogram groups the projects analyzed of each programming language.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/post-casual/overall.png&quot; alt=&quot;Contributions per programming language&quot; height=&quot;330&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;To some extent, the analyzed projects have a similar characteristic: most of the contributors perform very few contributions. A non-negligible number of contributors (48.98%) performed a single contribution, which varies from programming language to programming language (&lt;em&gt;e.g.,&lt;/em&gt; C projects have 39% of casual contributors, whereas JavaScript has 61%). Based on this finding, we decided that the casual contributor is a contributor that performed at most one commit to a software project.&lt;/p&gt;

&lt;p&gt;This significant number of casual contributors might lead one to believe that an important proportion of the projects are intrinsically made by casual contributions. In reality, we found the opposite: these casual contributors are responsible for only 1.73% of the total number of contributions in our corpus of OSS projects (linux: 1.02%, rails: 3.46%, django: 3.19%). For a more detailed perspective, next figure shows the percentage of the casual contributors (top) and contributions (bottom) for each programming language analyzed.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/post-casual/percentage.png&quot; alt=&quot;Percentage of casual contributors&quot; width=&quot;400&quot; height=&quot;330&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;We can see that the programming language used matters. With some exception, projects written in static typed programming languages (&lt;em&gt;e.g.&lt;/em&gt;, C, TypeScript and C++) seem to be less favorable to receive casual contributions than those using dynamic typed ones (&lt;em&gt;e.g.&lt;/em&gt;, Ruby, Python and JavaScript). We believe this is because scripting programming languages are more concise than procedural and object-oriented ones, and size really matters when it comes to casual contributors.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-characteristics-of-a-casual-contribution&quot;&gt;What are the characteristics of a casual contribution?&lt;/h1&gt;

&lt;p&gt;We observed that the number of additions, deletions and files touched of contributions do not vary signifi- cantly among the analyzed projects. In particular, the project &lt;a href=&quot;https://github.com/thoughtbot/paperclip/&quot;&gt;paperclip&lt;/a&gt; is the one with the highest number of additions and deletions among the Ruby projects. See table below. With more than 8 years old, 63% of its contributors are casual ones, who contributed to 12.74% of the project.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Change&lt;/th&gt;
      &lt;th&gt;Mean&lt;/th&gt;
      &lt;th&gt;3rd Quartile&lt;/th&gt;
      &lt;th&gt;Std. Dev&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Additions&lt;/td&gt;
      &lt;td&gt;4.15&lt;/td&gt;
      &lt;td&gt;5.75&lt;/td&gt;
      &lt;td&gt;1.72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Deletions&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.26&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We also analyzed the contributions with the lowest number of additions and deletions. In fact, 22.7% of the casual contributions performed on Ruby projects changed a single line of code. Some of them include, (1) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/6f2ca93&quot;&gt;preventing a type from being null&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/d49bca2&quot;&gt;updating documentation files&lt;/a&gt;, or (3) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/62a9f64&quot;&gt;setting an option to a default value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also analyzed a &lt;a href=&quot;https://en.wikipedia.org/wiki/Statistical_significance&quot;&gt;statistically significant&lt;/a&gt; sample of 384 casual contributions. We identified 8 categories of casual contributions, summarized next. Afterwards, we discuss the top 3 ones.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;#&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;%&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bug Fix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;116&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30.20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Documentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;110&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28.64%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Add new feature&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;72&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18.75%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Refactoring&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;34&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.85%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update dependencies&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6.51%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Improve error message&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.64%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Improve resource usage&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.08%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Add test cases&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.30%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bug fix&lt;/strong&gt;. It is the most common kind of casual contribution found in our dataset. Some examples include: (1) &lt;a href=&quot;https://github.com/TransitApp/SVProgressHUD/commit/eebd6ec&quot;&gt;layout fix&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/koalaman/shellcheck/commit/f054e2e&quot;&gt;fixing compilation problems&lt;/a&gt;, and (3) &lt;a href=&quot;https://github.com/lulzlabs/AirChat/commit/03cd91d&quot;&gt;fixing a broken URL&lt;/a&gt;. Still, some bug fixes are far from being trivial, as the one that &lt;a href=&quot;https://github.com/torvalds/linux/commit/ddca3b8&quot;&gt;fixed a race condition at the linux operating system&lt;/a&gt;. Not only difficult to identify (such bugs are non-deterministic), the solution employed was also scattered between C preprocessors, which difficulties the reasoning of the compiled program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;. This category includes fix for typos, grammar, translation, formatting, and documentation issues. Although these contributions do not require significant programming effort, we found contributions that have &lt;a href=&quot;https://github.com/codecombat/codecombat/commit/237b97a&quot;&gt;thoroughly rewritten the original material&lt;/a&gt;. Also, we found that 27 out of these 110 contributions were fixing typos on code examples. This finding reinforces the importance of complete and verified working code examples.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Add New Feature&lt;/strong&gt;. Some of the examples include (1) &lt;a href=&quot;https://github.com/rg3/youtube-dl/commit/1a2adf3&quot;&gt;adding a new option for a command line tool&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/angular/angular.js/commit/da9eac8&quot;&gt;adding support for disabling an option&lt;/a&gt;, and (3) &lt;a href=&quot;https://github.com/apenwarr/sshuttle/commit/95c9b78&quot;&gt;adding support for IPv6 remote hosts&lt;/a&gt;. Interestingly, 24 out of the 72 contributions in this category were performed at the Linux operating system. Most of them were adding support for a new driver/device, which usually require few additions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-do-casual-contributors-and-project-maintainers-perceive-casual-contributions&quot;&gt;How do casual contributors and project maintainers perceive casual contributions?&lt;/h1&gt;

&lt;p&gt;We explicitly asked casual contributors and project maintainers “what motivates casual contributors’ behavior”, and the top cited perceived motivation was &lt;strong&gt;scratch their own itch&lt;/strong&gt;, highly mentioned by both casual contributors (90 out of 197) and project maintainers (23 out of 64). Part of this high number of casual contributions can be explained by the pull-request model, which provided a clear and easy contribution process. It was mentioned by 9 out of 64 project maintainters.&lt;/p&gt;

&lt;p&gt;Aligned with some studies on the motivation behind OSS contributors, we found that &lt;strong&gt;give back to community&lt;/strong&gt; fosters casual contributions, as said by one casual contributor “As I use a lot of OSS projects, I like to give back to the community”. Another motivation that is inline with the literature is &lt;strong&gt;gaining reputation and prestige&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Not among the top cited motivations, we found that four casual contributors reported that their motivation was &lt;strong&gt;improving the project&lt;/strong&gt;. The following quotes clearly illustrate such motivation: “I want to improve the quality of the project”, “That the project is in better shape after my contribution”.&lt;/p&gt;

&lt;p&gt;In addition to motivation, we investigated the reasons why casual contributors do not become full active contributors. &lt;strong&gt;Lack of time&lt;/strong&gt; was far the most cited reason by the casual contributors (96 out of 197), like one mentioned “I don’t have time to devote to a more active role”.  From the perspective of the project maintainters, &lt;strong&gt;Lack of time&lt;/strong&gt; was also the most mentioned reason why casual contributors do not become a long term contributor (17 out of 64 respondents). The following quote exemplify it: “People often don’t have the time or desire to be long term contributors”.&lt;/p&gt;

&lt;p&gt;We also found people who reported that they do not contribute because of their &lt;strong&gt;limited skills or knowledge&lt;/strong&gt;. Some also mentioned that the effort and knowledge needed to become a full contributor was too high. In both cases, they prefer to work on small or peripheral issues, which do not need specific abilities and usually require low effort. Like one of them said: “lack of skills (most of the low hanging fruit is gone)”. Project maintainers noticed this, and eight participants mentioned that &lt;strong&gt;code/project is hard to learn&lt;/strong&gt; was a reason why casual contributors do not become more active.&lt;/p&gt;

&lt;p&gt;We also asked the participants their opinion about the main benefits and problems brought by the casual contributors phenomenon. The overall impression is that the benefits overcome the drawbacks brought by this phenomenon. One quote from a project maintainter shows: “Every little piece helps everyone else. We stand on the shoulders of many small giants. Problems? None”.&lt;/p&gt;

&lt;p&gt;On the other side, the most reported problems were &lt;strong&gt;Time spent by the core members to review newcomers’ code&lt;/strong&gt; (reported by 12 people) and &lt;strong&gt;contributions may go unmaintained&lt;/strong&gt; (reported by 5 people).&lt;/p&gt;

&lt;h1 id=&quot;take-away-message&quot;&gt;Take away message&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributors&lt;/strong&gt; can see that they are not alone, and this behavior is, in fact, rather common in OSS communities. Also, we found that 22.93% of the casual contributions changed a single line of code. Thus, a developer does not need to be shy to contribute, even though her contribution is small. Yet,  this study revealed that project maintainers believe that casual contributions are a healthy way of contributing to OSS. Therefore, casual contributors can become even more motivated to do this kind of contribution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Project owners&lt;/strong&gt; can label tasks specific for casual contributors. Similarly, some casual contributors are more comfortable on solving low effort tasks. Thus, project owners can create specific roles for casual contributors (&lt;strong&gt;e.g.&lt;/strong&gt;, casual translators), which could also foster more engagement. Finally, since several projects maintainers do not have enough time to review casual contributions, they can introduce “contributions guidelines”, so that newcomers can read and get acquainted with them, therefore reducing code review effort.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 01 Jan 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/the-story-behind-casual-contributors/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/the-story-behind-casual-contributors/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Do developers care about software energy consumption?</title>
        <description>&lt;p&gt;Is energy consumption a real issue in the software development process? Do developer really care about that?&lt;/p&gt;

&lt;p&gt;These questions were the start point of our paper, “&lt;a href=&quot;http://gustavopinto.github.io/lost+found/msr2014.pdf&quot;&gt;Mining Questions About Software Energy Consumption&lt;/a&gt;”. In this paper, we investigated several questions about software energy consumption. Since we believe that research needs to be grounded in practice, we analyzed StackOverflow, one of the most famus software development web site.&lt;/p&gt;

&lt;p&gt;We filter out all questions that contain at least one energy consumption related word (&lt;em&gt;e.g.,&lt;/em&gt; energy efficiency). After this process, we found 615 question, but after removing false positives, we ended up with only 325  valid questions. We used a qualitative approach to analyze these questions, named &lt;a href=&quot;http://en.wikipedia.org/wiki/Thematic_analysis&quot;&gt;Thematic Analysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Analyzing such questions, we observed that practitioners are aware of the energy consumption problems: the questions they ask are not only diverse – we found 5 main themes of questions – but also often more &lt;em&gt;interesting&lt;/em&gt; and &lt;em&gt;challenging&lt;/em&gt; when compared to the remaining questions on StackOverflow.&lt;/p&gt;

&lt;p&gt;We found five main themes regarding energy consumption questions. They are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Measurements&lt;/strong&gt;. Questions about measurement tools or techniques.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;General Knowledge&lt;/strong&gt;. Questions that do not have a concrete use case.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Design&lt;/strong&gt;. Questions about programming techniques that can help in saving energy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Context-specific&lt;/strong&gt;. The authors of such questions need to provide more details in order for other users to better understand the problem, and to facilitate replication&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Noise&lt;/strong&gt;. These questions are not directly associated with an energy consumption issue. Usually, the user first wants to improve one aspect of her application and, as a secondary goal, also improve energy consumption&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since questions in the Code Design theme are usually focused on how programmer decisions may improve energy consumption, we believe that the Code Design category is the most important one for future energy-aware software development. This category is also the most popular among developers. In a in-depth analysis of this theme, we identified 8 solutions that developers use in order to save energy. They are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep IO to a minimum.&lt;/li&gt;
  &lt;li&gt;Bulk operations.&lt;/li&gt;
  &lt;li&gt;Avoid Polling.&lt;/li&gt;
  &lt;li&gt;Hardware Coordination.&lt;/li&gt;
  &lt;li&gt;Concurrent programming.&lt;/li&gt;
  &lt;li&gt;Lazy Initialization.&lt;/li&gt;
  &lt;li&gt;Race to Idle.&lt;/li&gt;
  &lt;li&gt;Efficient Data structure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also observed that some reseachers support such solutions proposed by software developers. However, for some of them, like concurrent programming, solutions cannot be seen as one-size-fits-all, since no consensus has emerged from the relationship between concurrent programming, performance and energy consumption.&lt;/p&gt;

&lt;p&gt;In conclusion, this study serves as a research agenda for future energy consumption research. The needs of developers and the challenges they face may help energy-efficiency researchers stay focused on the real-world problems. The collective wisdom shared by developers may serve as a practical guide for future energy- aware and energy-efficient software development. The conceptually incorrect views they hold may inspire educators to develop more state-of-the-art curricula.&lt;/p&gt;

&lt;p&gt;For more details, please check out &lt;a href=&quot;http://gustavopinto.github.io/lost+found/msr2014.pdf&quot;&gt;our paper&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/do-developers-care-about-software-energy-consumption/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/do-developers-care-about-software-energy-consumption/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Why do you keep doing surveys?</title>
        <description>&lt;p&gt;When I say survey, I mean online questionnaires.&lt;/p&gt;

&lt;p&gt;First of all, don’t get me wrong. I do like surveys. Actually, I have done few of them in my premature researcher career. And I think that we can keep conducting surveys; but I believe that we now have other good options.&lt;/p&gt;

&lt;p&gt;Surveys are good when you have a specific, and small, target population. For example, if you want to know what the rails core developers eat on lunch, survey is definitely the way to go. But, what do you do if you want know what the rails community eat on lunch?&lt;/p&gt;

&lt;p&gt;Yes, of course, you can do a survey.&lt;/p&gt;

&lt;p&gt;But, there are some concerns that you have to keep in mind: First, survey has its own problems (the subject may lie in a difficult questions, or may remember incorrectly about a long time question, or may not fully understand a question and then give a faulty response). Second, the survey response rate is pretty low. If you are a luck guy, you can get 10% or 15% of response rate. So, if you are targeting the entire rails population, you may draw conclusions from a biased part of it. And finally, you may have to wait for several weeks (months?) until you have collected enough data.&lt;/p&gt;

&lt;p&gt;Or you can simply change your data source.&lt;/p&gt;

&lt;p&gt;If you are doing computer science research, you have on hand a number of great on line data sources. All you have to do is pick up the right one, use your programming skill to extract the data, and proceed to the analysis.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Do you want to know what rails core developers eat at lunch? Find them on &lt;a href=&quot;http://www.github.com&quot;&gt;Github&lt;/a&gt; and mine their actives on there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you want to know if developers are facing problems with the newest rails feature? Mine questions and answers about this topic on &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;StackOverfow&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you want to know if projects are moving to the newest rails version? Mine ruby/rails projects on &lt;a href=&quot;http://www.github.com&quot;&gt;Github&lt;/a&gt; and/or &lt;a href=&quot;http://www.sourceforge.com&quot;&gt;SourceForge&lt;/a&gt;, and parse their source code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do you want to know if final users are facing energy consumption problems in mobile applications? Mine &lt;a href=&quot;http://play.google.com&quot;&gt;Google Play&lt;/a&gt; comments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And the list goes on.&lt;/p&gt;

&lt;p&gt;You see? Surveys are good. But, you can get a ton of data if you mine such websites.&lt;/p&gt;

&lt;p&gt;Nowadays, mining software repositories is not only about software, but human behaviour as well.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Dec 2013 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/Why-keep-doing-surveys/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/Why-keep-doing-surveys/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Tips to attend OOPSLA with low budget</title>
        <description>&lt;p&gt;Are you a [under]grad student who is wondering how amazing it could be to attend a flagship conference such as OOPSLA? But, as a student, you might have a low budget, right? If so, I may have some tips to share with you.&lt;/p&gt;

&lt;p&gt;In this year (2013) I attended my very first OOPSLA. It was awesome. &lt;a href=&quot;https://twitter.com/gustavopinto/status/394562681253810176&quot;&gt;I&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gustavopinto/status/395050744291659776&quot;&gt;shared&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gustavopinto/status/395210719022436352&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gustavopinto/status/395683470971641856&quot;&gt;stories&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gustavopinto/status/396020564361371648&quot;&gt;on&lt;/a&gt; &lt;a href=&quot;https://twitter.com/gustavopinto/status/396021132479827969&quot;&gt;twitter&lt;/a&gt;. However, one of the things that made it so great was because I didn’t needed to pay anything. Neither my advisor.&lt;/p&gt;

&lt;p&gt;How it could be possible?&lt;/p&gt;

&lt;p&gt;I basically follow three steps: (i) submit a paper to ACM SRC, (ii) apply to be a student volunteer, and (iii) request PAC funding.&lt;/p&gt;

&lt;p&gt;I’ll briefly describe these steps here.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consider submitting a paper to ACM SRC&lt;/strong&gt;: One good reason to go to a conference is to give a talk about your reasearch (hopefully, in the main track of the conference). In this case, you will probably get money from your advisor/department/university. But, if you are on the early stages of your research, or if you got rejected, you can also consider submitting to the ACM SRC track. The goal of the ACM SRC is to facilitate interaction between researchers and practitioners, providing both sides the opportunity to learn of ongoing research. Additionally, the ACM SRC gives students experience with both formal presentations and evaluations. Finally, you can receive up to $ 500 to spend on your trip. Not bad.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Apply to be a student volunteer&lt;/strong&gt;: When you are a student volunteer, you don’t need to pay for your registration. You could eventually receive other interesting things, such as a costumed t-shirt, or an invitation to a fancy dinner. &lt;strong&gt;Update: Student Volunteers for OOPSLA’2014 also received free hotel&lt;/strong&gt;. On the other hand, you have to work during the conference. Some duties include: help in the registration process, help inside the rooms, or help speakers/attends to find their rooms. But, don’t worry. You will find time to enjoy the conference.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Request PAC funding&lt;/strong&gt;: Finally, if you have a paper accepted in one conference sponsored by SGIPLAN, you can also request funding from PAC. Note that not all conferences are sponsored by SIGPLAN. The ACM SRC, for example, is not sponsored. However, the SPLASH/Poster sesssion is sponsored. These two tracks happens together at SPLASH. Also, if you don’t have any paper accepted, but was accepted to be a student volunteer, you can also request PAC funding. That is great, hun? And it is pretty easy to apply. You just have to fill up a form, explaing how do you plan to spend this money.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, these were my tips.&lt;/p&gt;

&lt;p&gt;Nevertheless, I’m not sure if you can follow these steps if you are planing to attend other top-tier conference. It works for OOPSLA.&lt;/p&gt;

&lt;p&gt;That is all. I hope to see you at SPLASH/OOPSLA’2014 in Portland :)&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Nov 2013 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/tips-to-attend-oopsla-with-low-budget/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/tips-to-attend-oopsla-with-low-budget/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>Pycon 2014 - Call for posters</title>
        <description>&lt;p&gt;PyCon is the premier Python Conference, and in 2014 it is being held for the first very time outside US - in the beautify Montéal/CA. It is not only a great opportunity to met the best python programmers across the world, but also to make the PyCon even better.&lt;/p&gt;

&lt;p&gt;How?&lt;/p&gt;

&lt;p&gt;What about presenting a poster in the Python premier conference?&lt;/p&gt;

&lt;h1 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;As a presenter, you get to interact directly with your audience, share your passion and your idea, and immediately address questions in a more conversational manner. Moreover, the environment is generally less stressful and more easygoing than giving a formal talk. On top of that, you met a lot of interesting people.&lt;/p&gt;

&lt;p&gt;The idea is to present your topic on a 4’x4’ poster board and as attendees mingle through the rows, they find your topic, read through what you have written, the strike up a discussion on it.&lt;/p&gt;

&lt;p&gt;Users of all levels go to the poster session, so your topic can focus on novice, intermediate or even expert programmers. Focus on what you think is interesting, rather than difficult/complex. This video will give you an idea of what poster sessions are.&lt;/p&gt;

&lt;h1 id=&quot;what-kind-of-proposal-can-i-submit&quot;&gt;What kind of proposal can I submit?&lt;/h1&gt;

&lt;p&gt;You may be wondering about what kind of python stuff you will be able to talk. As an advice, we can told you that you can talk about anything you want to. Don’t be shy. We would love hear what make you exciting with Python. But, if the problem is missing ideas, why don’t take a look in the poster section of &lt;a href=&quot;https://us.pycon.org/2013/schedule/posters/list/&quot;&gt;PyCon’13&lt;/a&gt; or &lt;a href=&quot;https://us.pycon.org/2012/schedule/lists/posters/&quot;&gt;PyCon’12&lt;/a&gt;? People made an incredible work in there.&lt;/p&gt;

&lt;h1 id=&quot;hmm-im-interested-how-to-submit-a-proposal&quot;&gt;Hmm.. I’m interested. How to submit a proposal?&lt;/h1&gt;

&lt;p&gt;To submit a poster proposal, you should first create an account in the PyCon site. When you are logged in, you will need to include the following information.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The title of your post&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The category&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The intended audience (assumed level of knowledge)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A brief description - 300 chars max&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A detailed description&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additional notes for the proposal reviewers. This can include additional background information such as links to other presentations you have done, or links to blog posts, articles or code related to your presentation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that the posters should follow all of the usual &lt;a href=&quot;http://us.pycon.org/2014/speaking/proposal_advice/&quot;&gt;guidelines&lt;/a&gt; that we look for in talk and tutorial proposals.&lt;/p&gt;

&lt;h1 id=&quot;important-dates&quot;&gt;Important Dates&lt;/h1&gt;

&lt;p&gt;Do not miss the application deadline!&lt;/p&gt;

&lt;p&gt;Poster submission deadline: November 1st, 2013.&lt;/p&gt;

&lt;p&gt;Poster announced: December 15th, 2013.&lt;/p&gt;

&lt;p&gt;Poster session at PyCon’14: April 13th, 2014.&lt;/p&gt;

&lt;p&gt;If you need more information, you can see the &lt;a href=&quot;http://us.pycon.org/2014/posters/faq/&quot;&gt;Poster FAQ&lt;/a&gt; and the &lt;a href=&quot;https://us.pycon.org/2014/posters/&quot;&gt;Poster CFP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We look forward to seeing you in Montreal in 2014!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jul 2013 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/pycon-2014-call-for-poster/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/pycon-2014-call-for-poster/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
      <item>
        <title>From where come the Brazilian open-source contributions?</title>
        <description>&lt;h1 id=&quot;from-where-come-the-brazilian-open-source-contributions&quot;&gt;From where come the Brazilian open-source contributions?&lt;/h1&gt;

&lt;p&gt;Hi there.&lt;/p&gt;

&lt;p&gt;Some days ago I was wondering why open-source communities are so cool! You can meet a lot of interesting people, who devote a lot time of their time-lifes just to create stuffs that other people will use. It is strange. Usually, this people actually have their own business, work, family, whatever, and they still find time to work for free. It sounds weird to me (even though I devote part of my time to open-source activities).&lt;/p&gt;

&lt;p&gt;But, the point is: how active these communities are? And if you take into consideration only the Brazilian community, what is the general picture that we can drawn from they? Thinking about it, I collected a lot of data about Brazilian developers in the github social coding website. There is a lot of interesting findings.&lt;/p&gt;

&lt;h4&gt;1. Are the brazilian open-source community active&lt;/h4&gt;

&lt;p&gt;Not as I expected. I gathered data for a total of 4.481 users, which 3.121 ones do not have any kind of contribution. That is, 30% of the users (the active group) are responsible for 100% of the contribution. The active group was sub-divided in more three groups: low active (up to 19 contribution per year),  fairly active (up to 49 contributions per year) and very active (more than 49 contributions per year). Furthermore, the percentage of the low actives, fairly actives and very actives are, respectively, 57.8%, 20.9%, 21.3%. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Pareto_principle&quot;&gt;Pareto’s principle&lt;/a&gt; also works here: from 30% of the users come the 100% of the contributions. This results show us that the brazilian open-source community is not so active as we may guess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post3/users-active-percentage.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;2. From where they come?&lt;/h4&gt;

&lt;p&gt;If we take into consideration the user locale, we observed that 46% of these users come from the Northeast region, which is very interesting, since, here in Brazil, the most economical region (or, in this case, from where have the most job offers) is the southeast region. If we take into consideration the specific State, the most active are Paraná (13.65%), followed by Ceará (12.37%) and followed by (11.25%). All theses states are not part of the southeast region. Nonetheless, this kind of analysis is very difficult to perform, since the user can omit the location field (which represents 8% of the total), provide unreliable information, or use acronym, nicknames, etc. But, if we can draw a chart of the Brazilian open-source contribution per state, it may look like this one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post3/total_commits.png&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;3. Which are the most popular programming languages?&lt;/h4&gt;

&lt;p&gt;Github can infer the most used language on a given project. Then, analyzing the set of projects contributed, the list of the ten more used programming language are: JavaScript (22.77%), Ruby (18.78%), Java (14.19%), PHP (13.95%), Python (9.86%), C (3.36%), C++ (2.94%), Shell (2.55%), Objective-C (1.95%) e C# (1.88%). I have to tell that these results surprised me a bit. Since I’m a Java-guy, my heart used to fell that Java is the most popular language in Brazil. But, it seems that Brazilian hackers are more likely to use untyped languages, such as JS, Ruby, PHP, although the Java language remains in the top-3. It is cool.&lt;/p&gt;

&lt;p&gt;Now I’m wondering if these data are only related to github, or if it could be possible to generalize. Someday I want to correlate this result with stackoverflow, or other similar forge.&lt;/p&gt;

&lt;p&gt;If you want to read more about, please check out &lt;a href=&quot;http://gustavopinto.github.io/lost+found/oss2014.pdf&quot;&gt;our paper&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jul 2013 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/codefather/from-where-come-the-brazilian-open-source-contributions/</link>
        <guid isPermaLink="true">http://localhost:4000/codefather/from-where-come-the-brazilian-open-source-contributions/</guid>
        
        
        <category>codefather</category>
        
      </item>
    
  </channel>
</rss>
