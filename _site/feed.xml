<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-23T16:12:25-03:00</updated><id>http://localhost:4000/</id><title type="html">Gustavo Pinto</title><subtitle>Professional webpage for Gustavo Pinto.</subtitle><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><entry><title type="html">How do Scientists Develop Software</title><link href="http://localhost:4000/blog/how-do-scientists-develop-software/" rel="alternate" type="text/html" title="How do Scientists Develop Software" /><published>2018-02-26T00:00:00-03:00</published><updated>2018-02-26T00:00:00-03:00</updated><id>http://localhost:4000/blog/how-do-scientists-develop-software</id><content type="html" xml:base="http://localhost:4000/blog/how-do-scientists-develop-software/">&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.org/lost+found/saner-rene2018.pdf&quot;&gt;How Do Scientists Develop Scientific Software? An External Replication&lt;/a&gt;”. As the name suggests, we conducted an external replication (different authors in a different context) of a well-known paper about &lt;a href=&quot;http://files.software-carpentry.org/training-course/2012/08/hannay-survey-2009.pdf&quot;&gt;how scientists develop and use software&lt;/a&gt;. The original paper was published in 2009, and given the recent changes in the software development practices in the last few years (e.g., the introduction of social coding websites and the prevalence of on-line learning platforms) and unique challenges of scientific research (e.g., the frequent and unforeseen changes in requirements and the need for both highly specialized domain knowledge and programming expertise), we believe that we should update our understanding about this topic.&lt;/p&gt;

&lt;p&gt;In the original study, the authors conducted an on-line survey with 2,000 scientists. In our replication, we surveyed 1,574 R developers. One might argue that not all R developers are indeed scientists. We concur. To mitigate this threat, in our invitation email we kindly asked R developers that do not consider themselves as scientists not to answer the questionnaire. We also asked them not to share the questionnaire with their peers, since some of them might not be scientists as well. We also mined their R repositories to complement some of the findings. For instance, the following figure shows the number of projects with commits in the master branch over the last decade.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/R-projects.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;The following table compares the main findings of the two studies:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Original  Study&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Replication Study&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;96.9% of the respondents state that informal self study is important or very important for developing scientific software (60.1% state that informal learning from peers is important or very important). Only 34.4% state that formal education at an educational institution is important or very important.&lt;/td&gt;
      &lt;td&gt;99% of the respondents agree that self-study was important or very important (60% suggested that learning from peers is important or very important). However, 35% of the respondents believe that formal education is important or very important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The importance of graduate studies is clearly greater than undergraduate studies. This, in turn, is clearly greater than that of high school studies. Formal training at work was considered as important or very important for only 13.1%.&lt;/td&gt;
      &lt;td&gt;Similarly, most of the respondents believe that graduate studies (72%) and their last five years at work (76%) were important or very important to learn what they know about software development. Our respondents also perceived High school (61%) and over the last 15 years at work (51%) as not important or not important at all.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;84.3% of the responses state that developing scientific software is important or very important for their own research. 46.4% state that developing scientific software is important or very important for the research of others&lt;/td&gt;
      &lt;td&gt;86% of the respondents believe that scientific software is important or very important to their own research. However, 63% of our respondents stated that developing software for the research of others is important or very important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;On average, scientist spend approximately 30% of their work time developing scientific software.&lt;/td&gt;
      &lt;td&gt;On average, our respondents spent 30% of their working hours developing software per week (min: 0%, 1st quartile: 10%, median: 20%, max: 100%, std dev: 23.73%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;53.5% of the respondents state that they spend more or much more time developing scientific software than they did 10 years ago (44.7% spend more or much more time than they did 5 years ago and 14.5% spend more or much more time than they did 1 year ago.&lt;/td&gt;
      &lt;td&gt;82% of the respondents believe that they spend ‘‘much more time’’ or ‘‘more time’’ developing software than 10 years ago; 72% when compared to the last five years. Over the last decade, there is also an increase in activity, in terms of commits, in the studied projects.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scientific software is either used by a very large number of people (more than 5,000 users) or by a very small number of people (less than three).&lt;/td&gt;
      &lt;td&gt;Our respondents work mostly alone (53% of the respondents develop software alone) or in small teams (another 42% develop software within a team of two to five). At maximum, we found 723 stars and 139 forks in the analyzed projects&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The level of importance that scientists assigned to a software engineering concepts is mostly consistent with their understanding of this concept. Except for ‘‘software testing’’ and ‘‘software verification’’ scientists assigned a higher level of importance to these concepts than they judged understand.&lt;/td&gt;
      &lt;td&gt;Generally speaking, we observed that the respondents judged they knew less about the concepts of what they believe are important. A Chi-Square test confirmed that the scientist knowledge depends from what they judge important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;There is no consistent trend of association that links an increase of project or team size to perceived importance of software engineering concepts.&lt;/td&gt;
      &lt;td&gt;After performed the ANOVA test, we could not reject the null hypothesis that project and team size influences the respondent’s perceptions about the software engineering concepts, once all p-values were higher than 0.05.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of a SANER'18 paper</summary></entry><entry><title type="html">What are quasi-contributors and how common are them?</title><link href="http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them/" rel="alternate" type="text/html" title="What are quasi-contributors and how common are them?" /><published>2018-02-11T00:00:00-03:00</published><updated>2018-02-11T00:00:00-03:00</updated><id>http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them</id><content type="html" xml:base="http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them/">&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.github.io/lost+found/icse2018.pdf&quot;&gt;Almost There: A Study on Quasi-Contributors in Open-Source Software Projects&lt;/a&gt;”. Quasi-contributor is a contributor that tried to contribute to open-source software but did not succeed, i.e., the pull-request was not accepted, for any reason. For the impatient, there is a summary of the summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quasi-contributors are rather common&lt;/strong&gt;. They are about 70% the number of actual-contributors. In some projects, there are more quasi-contributors than actual contributors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Many reasons for non-acceptance&lt;/strong&gt;. Quasi-contributors believe there is a lack of communication, commitment, and experience. Integrators agree with quasi-contributors that not needed pull-requests are among the most common cause for nonacceptance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1/3 of Quasi-contributors disagree with nonacceptance&lt;/strong&gt;. 32% of the quasi-contributors do not agree with the decision of not having their contribution accepted — for 19% of quasi-contributors that did not concur also felt demotivated or prevented to place additional contributions. 12% of the quasi-contributors reported that the feedback from the code review was not constructive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;Although there is a need of workforce to drive open source projects, many developers, newcomers to a project, send contributions which are not incorporated into the source code and give up trying. To better understand quasi-contributors and their rejected contributions, we mined data and metadata of 21 well-known, nontrivial, and popular OSS projects. We also surveyed 335 quasi-contributors and 21 project integrators (maintainers that are in charge of integrating changes proposed).&lt;/p&gt;

&lt;p&gt;We observed that quasi-contributors are rater common. In three projects analyzed (angular.js, bootstrap, rails), there are more than 1,000 quasi-contributors in each one of them. In five out of the 21 projects, there are more quasi-contributors than actual ones. In some cases, the number of quasi-contributors is significantly higher: for instance, project bootstrap, has 2.3x more quasi-contributors than actual ones (it has 1,962 quasi-contributors and 844 contributors). On average, there are 480.9 quasi-contributors per project. Regarding the number of attempts, on average, a quasi-contributor tried  1.22 times (85% of the quasi-contributors tried only once). On the other side of the distribution, however, we found some quasi-contributors that tried really hard, but still did not succeed. In the bootstrap project, one quasi-contributor proposed 13 unaccepted pull-requests.&lt;/p&gt;

&lt;p&gt;We conducted a survey with quasi-contributors, and they mentioned several reasons for why the pull-request proposed was not accepted. The most common reason is &lt;strong&gt;superseded/duplicated&lt;/strong&gt; pull-request (e.g., “Other pull-requests fixed the same issues as my pull-requests”). &lt;strong&gt;Mismatch between developer’s and team’s vision/opinion&lt;/strong&gt; is also common (e.g., “when you add a new feature to the project, your vision can be out of tune with the vision of the project’s team, and this is natural”). We also observed a &lt;strong&gt;lack of interest from integrators&lt;/strong&gt; (e.g. “It was ignored maybe because it was a very minor fix”). We also asked integrators about the reasons for non-acceptance. According to them, the most common reason for nonacceptance is &lt;strong&gt;PR not needed/not relevant&lt;/strong&gt; (e.g., “[such contribution] solves the immediate/local problem but does not address the deeper systemic issue”). The second most common reason is &lt;strong&gt;Guidelines not followed&lt;/strong&gt;. According to one integrator, such guidelines can range from “coding style, lack of tests, or messy versioning history”. Interestingly, none of the integrators assumed the mea culpa, i.e., the &lt;strong&gt;lack of interest from integrators&lt;/strong&gt; aforementioned.&lt;/p&gt;

&lt;p&gt;Most of the quasi-contributors surveyed agreed with the decision of having the pull-request unmerged (67.4%) and that the comments were constructive (88.8%). However, the number of unmerged pull-requests, the 30.3% of the developers that reported demotivation, and the 32.6% that reported disagreement with the community decision are not negligible. Moreover, 99 quasi-contributors did not agree with the pull-request nonacceptance, and 62.6% of them (62) answered that this fact demotivated or prevented them from placing another pull-request.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of an ICSE'18 paper</summary></entry><entry><title type="html">A call for good figures in research papers</title><link href="http://localhost:4000/blog/a-call-for-good-figures-in-research-papers/" rel="alternate" type="text/html" title="A call for good figures in research papers" /><published>2018-01-09T00:00:00-03:00</published><updated>2018-01-09T00:00:00-03:00</updated><id>http://localhost:4000/blog/a-call-for-good-figures-in-research-papers</id><content type="html" xml:base="http://localhost:4000/blog/a-call-for-good-figures-in-research-papers/">&lt;p&gt;Over the last few years, I became more and more into creating good figures to use in research papers. It probably started when I was reading a book about &lt;a href=&quot;http://shop.oreilly.com/product/0636920034919.do&quot;&gt;data science&lt;/a&gt; in the mid of my phd. Back then I start to learn about matplotlib for Python and ggplot for R. I was somehow impressed by the quality of these figures and the reasonably low effort required to create them. I also remember that I convinced myself to update all figures of a &lt;a href=&quot;http://gustavopinto.org/lost+found/jss_2015.pdf&quot;&gt;30+ pages paper&lt;/a&gt; that we have been working on for, at least, &lt;a href=&quot;http://fernandocastor.github.io/general/2016/10/11/long-hard-road.html&quot;&gt;3 years&lt;/a&gt;. Needless to say that I was very proud about the new figures on the paper (and its eventual acceptance).&lt;/p&gt;

&lt;p&gt;But it was not always like that. In the first paper published during my phd, I used OpenOffice to create the figures. By the time, the quality of the figure didn’t bother much me; In fact, I was still learning what is research and how to do it. The quality of the figures was not more important than trying to finish a 6-page paper and submit for that first edition workshop that we never heard of. As a result, this figure came along with our workshop paper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lost+found/figure+tmc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(If you agree that the above figure is far from being good, keep reading.)&lt;/p&gt;

&lt;p&gt;Figures should not only convey an information, but they should also do it easily and quickly (“a picture is worth a thousand words”, they said). However, it only works if you have good figures. For instance, would you be surprised if I tell you that the values of the red line of the third figure is greater than the red line in the first figure? Why would that be the case? This happens because these three figures are under different scales; this makes such a comparison misleading. Still, the x axis use different time windows for each figure, which is also misleading (I’m not sure if that was a typo or if the x axis indeed employs different time window). A simple fix (put the figures in the same scale and using the same time window) would make this figure much more comprehensible. This is why I wholeheartedly agree with Philip Guo when he says:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;paper-writing is like 95% making good figures, and then 5% describing those figures in a sensible way&lt;/p&gt;&amp;mdash; Philip Guo (@pgbovine) &lt;a href=&quot;https://twitter.com/pgbovine/status/765256392429047808?ref_src=twsrc%5Etfw&quot;&gt;August 15, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;Fast-forwarding to 2018, and after many other figures created throughout the course, I started to observe bad patterns that prevent researchers from plotting good figures (although I’m not assuming the figure I create are the best ones; but I’m always trying to improve this). Even though the presence of these bad patterns in a paper does not mean that one would argue for rejection, it will hardly convince anyone to accept it. Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Similar figures under different scale&lt;/strong&gt;: This is the problem address in the figure above. The solution is simple: employ the same y axis for all figures. (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/saner2016.pdf&quot;&gt;fig 1 of this paper&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save figures as PNG or JPG&lt;/strong&gt;: Or any other compressed figure format. These formats degrade the image quality, which is particularly relevant when our peers still have the culture of printing papers in b&amp;amp;w for review. Moreover, when reading on screen, if one wants to zoom in an image for a better understanding, compressed figures degrade even more. The solution: save figures using a vectorial format (e.g., eps or pdf).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;50 shades of the same color&lt;/strong&gt;: This is also to ease the review for those used to print in b&amp;amp;w. This happens when one uses different shades of the same colors, a common practice in heat maps (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/fase2015.pdf&quot;&gt;fig 11 of this paper&lt;/a&gt;). As a fix, instead of having 50 shades of blue, many heat maps can be done with 3-5 shades.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Skewed by outliers&lt;/strong&gt;: This is a common pattern. The data has outliers and the figure is skewed when they are present. Sometimes we are forced to remove them, otherwise they could limit the understanding of the figure. However, removing outliers only because they do not appear handsome in the graph is not a strong argument (although I did that myself too). A better approach is to use the logarithmic scale.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Labels with small font&lt;/strong&gt;: This makes it harder to understand the meaning of the figure (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/ase2017.pdf&quot;&gt;fig 5 of this paper&lt;/a&gt;). Add to this a low quality JPG figure. No one would understand what the figure is supposed to say. The fix? Increase the font. If necessary, increase the figure size.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">Take care of your figures</summary></entry><entry><title type="html">First year of professoring</title><link href="http://localhost:4000/blog/first-year-of-professoring/" rel="alternate" type="text/html" title="First year of professoring" /><published>2018-01-03T00:00:00-03:00</published><updated>2018-01-03T00:00:00-03:00</updated><id>http://localhost:4000/blog/first-year-of-professoring</id><content type="html" xml:base="http://localhost:4000/blog/first-year-of-professoring/">&lt;p&gt;While I’m starting my second year of Assistant professor, it is worth to look
back and see how was my first year. It may help to improve my professoring
skills or maybe help someone else who is just about to start his academic
career. In numbers, last year I taught five courses (all of them new to me),
supervised tree urop students, and co-supervised tree masters student and one
phd student. In terms of service, I reviewed 12 papers to four conferences and
journals. I also published nine research papers and submitted two research grants.&lt;/p&gt;

&lt;p&gt;Let me distill this.&lt;/p&gt;

&lt;h2 id=&quot;teaching&quot;&gt;Teaching&lt;/h2&gt;

&lt;p&gt;I taught five courses in 2017, all of them for undergrad. My peers in the US
would consider this a very high workload, but I would say that this is the
normal workload in Brazil. In my department, in particular, no professor
teaches less than 4 courses per year. But a professor can teach as many as five
in a single semester. The exact number depends on some variables such as
the number of urop students or if the professor teaches grad courses. If the
value of the first variable is greater than 2 or if the second one is true, you
can teach the minimum number of courses in that given term (which is two).
One interesting thing in my university, which is quite common in other Brazilian
universities, is the fact that when you join an university as a professor, you
do not teach for grad school straight ahead. Instead, you should “apply” for
teaching in grad school. They do that to make sure only professors interested in
research are within the set of professors that teach grad courses. And your
permanence in this set depends if you are doing good work. Otherwise you are
out (of the grad school program) and should apply again. Important to say that you
can only supervise master or phd students if you are in a grad program. Not sure
if that makes much sense, but this is how things work over here. I applied in
the second semester and I can have master students this year (phd students only
after one master student graduate).&lt;/p&gt;

&lt;p&gt;Getting back to the courses, I taught Algorithms,
Databases 101, Operating Systems (Lab), Advanced Data structure, and Advanced
Databases. All these courses were new to me. It took a lot of time to create
the material for these courses, and I still have say they are not great. The
problem was that I was not &lt;em&gt;that&lt;/em&gt; excited with teaching. I like teaching but
my first semester workload was a kind of disappointed to me (I want to do
research and other things). I also have a hard time with one class of students
that were not motivated at all. This issue was completely new to me and I had
no idea on how to address it. I chatted with some colleagues and some of them
also reported the same felling. Last year I went to two educational-focused
software engineering conferences. I also discussed this matter over there, but
this time I went back with some possible solutions, which can be summarized in
PBL (Problem-based learning). The courses that I taught followed that traditional
lecture format (e.g., the professor talks, the students listen). Although
students have problems to work on, the most interesting ones were in
mid to the end of the course. Only later I realized that if a student is not
motivated from the beginning, it is not an interesting problem at the end of
the course that will change her mind.&lt;/p&gt;

&lt;p&gt;Although I was very passionate about some of the topics, it was hard to
transmit such passion to students. One initiative that I’m willing to give
another shot is to &lt;a href=&quot;http://gustavopinto.org/codefather/training-students-with-open-source-software/&quot;&gt;bring open-source software projects inside the classroom&lt;/a&gt;.
Generally speaking, the students really learned new skills and enjoyed the work.
There were also students that faced many barriers with Git and those that did not even try.
Students’ motivation is still one thing that I should learn more.&lt;/p&gt;

&lt;h2 id=&quot;advising&quot;&gt;Advising&lt;/h2&gt;

&lt;p&gt;Advising students is one of the most fun and interesting thing in this academic
career, I think. However, as I said, it was not straightforward to join in the
grad school program. Since I just get into it, one could think now I can have many
students. However, new professors are limited to one master student per year. They say
that because they do know how do the professor work. Only after the first
master student graduate is when you can have
as many as you want. Actually, up to three master students per year (department
rules). The good thing about this restriction is that it forced me to
look for collaborators. In 2017 I co-supervised four students (3 masters and
1 phd). Only one of them is a student at my university. 3/4 of these students
were fist authors in papers published last year. The one without paper has
one paper under submission and is currently working in another one. I believe
these are good results. I also advised three urop students. This group of
students was particularly interesting to me because I perceived that there are
many undergrad students that are as skilled as or even more skilled than
many master students. One particular urop student really impressed me and we may
submit her work to a good software engineering conference in 2018 (which
sometimes is hard to do with master students).&lt;/p&gt;

&lt;h2 id=&quot;research-and-service&quot;&gt;Research and Service&lt;/h2&gt;

&lt;p&gt;In 2017 I published nine papers. However, six of them are short papers. I have
to say that I was tempted to submitted that many short papers (some of them were
very old stuff that I’d pay to not touch in the data anymore). Still, I am
the first author of four papers (although two of them are remaining
unpublished parts of my phd). The other two papers pretty much reflect my lack
of students: short papers with little depth. Don’t get me wrong. Short papers are
good: the information is quickly transmitted and easily consumed. However,
publishing a lot of short papers is not a synonym of high quality research.
I plan to do less of it in 2018.&lt;/p&gt;

&lt;p&gt;Finally, I reviewed 12 papers for four conferences. This is a low rate and I’d
like to improve it. However, I’ll only receive more invitations if I keep
publishing good work.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of new career</summary></entry><entry><title type="html">Training students with open-source software</title><link href="http://localhost:4000/blog/training-students-with-open-source-software/" rel="alternate" type="text/html" title="Training students with open-source software" /><published>2017-08-30T00:00:00-03:00</published><updated>2017-08-30T00:00:00-03:00</updated><id>http://localhost:4000/blog/training-students-with-open-source-software</id><content type="html" xml:base="http://localhost:4000/blog/training-students-with-open-source-software/">&lt;p&gt;Following my recent experience with &lt;a href=&quot;http://gustavopinto.org/codefather/posse2017-experience-report/&quot;&gt;POSSE workshop&lt;/a&gt;, I went back decided to put all of that in practice as soon as possible. My setting was an operating system lab, which consisted of 2 hours class per week. The course has two parts: first we cover basic Linux principles and commands, followed by some shell scripting. The second part was about concurrent programming. In such short course, students were introduced to basic threading and synchronization stuff. Although it touches basic concepts, I recognize that the second part is harder than the first one. Concurrent programming is hard itself. Exposing concurrent programming to second year students is even harder. Because of that, I decided to leverage open-source only in the first part of the course.&lt;/p&gt;

&lt;p&gt;Since the first part was about Linux and shell script, I motivated students to work with &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/&quot;&gt;funcoeszz&lt;/a&gt;, which is a long history, fairly active, Brazilian open-source software. More interesting to our subjects is that fact that this project is mostly written in shell script. Another important decision here was to focus on a Brazilian open-source software. Before students joined the project, I thought that students &lt;em&gt;may&lt;/em&gt; benefit from having a community of developers that speak the same language. Turns out that students benefited a lot from sharing the same language. Still regarding the section of the open-source project, I didn’t pay much attention whether funcoeszz had an active community of not. Again, turns out that one of the project maintainers (&lt;a href=&quot;https://github.com/itamarnet&quot;&gt;@itamarnet&lt;/a&gt;) is very active. He answered most (all?) questions that students raised in a timely manner (e.g., many questions were answered in the same day!). Low language barrier and an active community were key (unexpected) decisions.&lt;/p&gt;

&lt;p&gt;Students worked in groups. Students were told to follow several “steps for contributing”. For instance, they were told to (1) create a blog post about the given open-source project, (2) report bugs, (3) improve documentation, and (4) implement a change to the source code. In my opinion, the 1-3 steps were required because, if students start with implementing changes, they might face problems that might demotivate them to contribute. Turns out that most of the students skipped the 1-3 steps and went directly to implement the source code changes. I also asked students to find and fix an issue. This did not happen as well. Students proposed the changes they thought would be useful. To perform these tasks, students had 3 weeks. Ideally, in the first week students would get acquainted with open-source and the pull-request model. In the second week students would try funcoeszz locally, and look for bugs. In the final week, students would learn the code and propose changes. In practice, none of this happened. Students left the assignment to the very last minute.&lt;/p&gt;

&lt;p&gt;Students have no Github or git background. I was not able to teach them git basics because (1) the course was too short and (2) it was not the main goal of the course — they should catch up for themselves. Turns out that &lt;em&gt;all&lt;/em&gt; students used the Github web interface to propose changes to the source code. Even with no pull-request background, total of 9 pull-requests were made. All pull-requests performed were aimed at introducing new features – no one was interested in fixing bugs. This might make sense. To fix a bug, students might need to understand more about the source code than when introducing a feature. As regarding the contributions, I was kinda impressed to see that many of them were non-trivial. For instance, although incomplete, one student proposed a &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/pull/433&quot;&gt;JSON parser&lt;/a&gt;. The project maintainer, although liked the contribution, politely said that it’s incompleteness turns it unlikely to be accepted. He ended up encouraging the student to keep working on the pull-request, ‘‘I hope you take this project forward’’ (which did not happen unfortunately). Another interesting example is a pull-request that introduces a feature that, given a person id, it checks the state from where the person comes. In Brazil, there is an unified id system, with 11 digits. The pull-request gets the 9th digit, then matches the digit in a list states associated with that given digit, and returns the state found. This contribution went through a thorough code review. After making her suggestions, the project maintainer said that she would merge the contribution, if the the suggestions were made. In this case, the student did implement the suggestions, but the pull-request was not yet accepted (the project maintainer seems currently busy). After that, the student expressed to me her positive perception about this process. In particular, she highlighted that she learnt a lot with the code review process.&lt;/p&gt;

&lt;p&gt;On the other hand, students opened 9 issues. All issues were reporting bugs – no one was proposing new features or asking questions. Students might not be aware that issues serve for different purposes. Unfortunately, most of the issues had shallow description. For instance, in issue &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/issues/429&quot;&gt;429&lt;/a&gt;, the student said the “the zztop function is not working on my side”. The student did not provide any details about the environment she was using. Fortunately, our project maintainer politely asked additional questions about the problem that student was facing. It is worth noting such triangulation challenge. On the one hand, students have no idea on how to report a bug. On the other hand, this particular project did not have explicitly guidelines for reporting bugs. Still, I myself thought I do not need to teach students how to report a bug, since it is fairly easy. Although there is no universal right or wrong, I recognized that all of us could do a better job.&lt;/p&gt;

&lt;p&gt;I acknowledge that introducing open-source software to such course made students shift the focus to non-related operating system activities, such as creating blog posts or learning Github. However, I think students learned several important lessons that are beyond the scope of the course. However, I also acknowledge that professors need to find a good balance between the goal of the course and the open-source thing in order to not lose focus. In this particular instance, I think the were more benefits than drawbacks. I plan to run it again next semester. Let’s see how it goes.&lt;/p&gt;

&lt;h3 id=&quot;my-take-away-is-not-necessarily-what-i-did-but-what-i-learnt&quot;&gt;My take-away is (not necessarily what I did, but what I learnt):&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Find active open-source projects;&lt;/li&gt;
  &lt;li&gt;Make sure that there is at least one maintainer that could provide help;&lt;/li&gt;
  &lt;li&gt;Look for maintainers that speak the same language that students speak;&lt;/li&gt;
  &lt;li&gt;Introduce yourself to the maintainer, and explain your goals;&lt;/li&gt;
  &lt;li&gt;Teach students the basics for contributing (if possible);&lt;/li&gt;
  &lt;li&gt;Put students to work on small problems first;&lt;/li&gt;
  &lt;li&gt;Ask for partial results; Do not wait for the last minute;&lt;/li&gt;
  &lt;li&gt;Have fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: If you are a researcher and this topic interest you, I just published a &lt;a href=&quot;https://github.com/gustavopinto/gustavopinto.github.com/raw/e63b8eac596ff65030a6d82baf67bcbb0019b2dd/_site/lost%2Bfound/cseet2017.pdf&quot;&gt;paper on this topic&lt;/a&gt;. Happy reading.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">My first experience training students with OSS</summary></entry><entry><title type="html">POSSE 2017 An experience report</title><link href="http://localhost:4000/blog/posse2017-experience-report/" rel="alternate" type="text/html" title="POSSE 2017 An experience report" /><published>2017-07-03T00:00:00-03:00</published><updated>2017-07-03T00:00:00-03:00</updated><id>http://localhost:4000/blog/posse2017-experience-report</id><content type="html" xml:base="http://localhost:4000/blog/posse2017-experience-report/">&lt;p&gt;POSSE (Professors’ Open Source Software Experience) is a workshop aimed at bringing world-wide professors to discuss how they can improve their CS courses in order to take advantage of free/open-source software (FOSS for short). FOSS is a topic very dear to my heart. When I was a student, I participated in several FOSS conferences and I also used to contribute to some FOSS projects. As a researcher (and, eventually, as a professor) I shifted my interest a bit. Although I’m not coding as much as I would like to, I’m still interested in FOSS. Indeed, some of my research research is about FOSS (e.g., communities, engagement, perceptions, etc). In addition, as of today, I’m a faculty running for tenure, with nearly no previous teaching experience. Needless to say that I was with high expectations for the workshop.&lt;/p&gt;

&lt;p&gt;This year the workshop took place at the beautiful Bologna, Italy. This blog post describes my personal yet biased view about the 2 intensive days of chatting with other professors about CS courses, open-source, pasta, and wine. The workshop was a mix of several lectures and group activities. Although I agree that both parts are equally important, this blog post is focused on the lecture part, which I took some notes  (I did not have time to write down notes during the group activities).&lt;/p&gt;

&lt;p&gt;One of the first advice for professors that want to introduce FOSS in their courses is to inform students upfront that the course will not be a normal one. That is, the professor is not supposed to know everything about the FOSS under study (in fact, depending on the FOSS, no one knows), although, professors have to figure out with students what they do not know — which is perfectly fine. It is important to note that the learning curve is significant for both faculties and students. On the other hand, this approach provide excellent opportunities for technical/non-technical learning. We need to adapt the learning approach, though.&lt;/p&gt;

&lt;p&gt;To minimize the learning curve, professors need materials. Good materials can be found at the &lt;a href=&quot;http://teachingopensource.org/&quot;&gt;teachingopensource.org&lt;/a&gt; and at the &lt;a href=&quot;http://foss2serve.org/&quot;&gt;foss2serve.org&lt;/a&gt; websites. Take the time to explore them – they have a rich database.&lt;/p&gt;

&lt;p&gt;While you learn something new from these websites, think about how students can contribute to open-source. One point that was largely debated is that open-source contributions is not only about code. There are many many ways that one can contribute – code is only one of them. Indeed, in order to be a FOSSer, a student does not even need to commit changes to a repository. A FOSSer can (1) create a blog post, (2) test the software, or (3) answer questions in a malling list. There are, at least, &lt;a href=&quot;http://foss2serve.org/index.php/50_Ways_to_be_a_FOSSer&quot;&gt;50 ways that one can contribute to FOSS&lt;/a&gt;. Find one that can fit your needs and tell students to do that.&lt;/p&gt;

&lt;p&gt;However, we cannot throw a student that does not how to swim in the deep end of a pool and say: swim. We need a scaffold. Some questions you should ask yourself: What we need to do to contribute to FOSS? What are the steps? Forget students! What I have to do? After you figure out, think about how can you teach students to do that?&lt;/p&gt;

&lt;p&gt;Since both professors and students are immersing into not well-known waters, it is important to have a contact within the FOSS community, who could provide help. How to find a contact? One way is to observe the community. Examples include: (1) Go to an IRC channel, (2) assign a malling list, or (3) participate in a slack group. After a while, you would be able to answer questions such as: Is this community active? Do they answer novice questions? Can you tell who are the core developers?&lt;/p&gt;

&lt;p&gt;If this community seems to be a good one, then it is time to introduce yourself, explain that you have some students that might be able to contribute, describe your goal, etc. Is someone willing to help? Good! No? Do not give up. Repeat until you find a suitable community. If we have success finding good communities, the chances that students succeed should be higher.&lt;/p&gt;

&lt;p&gt;Some students have a hard time trying to find meaningful things to contribute during the short term of a course. Some FOSS projects provide labels for “easy” tasks, while others provide Roadmaps (i.e., known features/bugs that the FOSS project want to have done/fixed for the next release). These are good ways to search for meaningful tasks. However, Roadmaps might contain critical bugs. Although the community do want to get them fixed (therefore they might provide good support for the student), such bugs might be non-trivial, requiring students to spend much time in learning (instead of coding) activities. It might be tempting to work on such fancy bugs. However, the suggestion is not to work on the critical path! This might delay the contribution process — and demotivate students.&lt;/p&gt;

&lt;p&gt;Another thing to pay attention are the release dates. If there are releases scheduled during the course, contributions might be frozen for a while. Another challenge is related to architectural changes. If that is the case, some contributions might not be needed anymore (e.g., thanks for the fix, but this feature does not work like that anymore). The best way to prevent such problems is by understanding your community. Invest some time to figure out its needs and where it plans to go.&lt;/p&gt;

&lt;p&gt;Remember that the goal is to engage students. Therefore, in some classes (e.g., high school, introductory classes), placing a source code contribution is not necessary. In some cases, understanding the steps for contributing might be ideal. In any case, some professors mentioned that the acceptance of a contribution should not be graded. This is out of the your (and students’) control. Instead, students can earn additional credits if the contribution is accepted.&lt;/p&gt;

&lt;p&gt;It is important to change the mindset of having everything done before publishing. This not gonna work with FOSS. Teach students to release early and release often. This should be the norm. Also, tell students to avoid risks by working on small problems. One way to start is by working with documentation issues. Remember students that a lot of bugs are not code bugs. Typos are bugs! It is also important to engage students early – do not way for the last minute to provide a patch. How to do that? Create such assignment: get a patch by the end of this week.&lt;/p&gt;

&lt;p&gt;After passing the first contribution barrier, prepare students to become independent in the FOSS world. Most of it is done by teaching students how to ask good questions. Rule of thumb: if Google has the answer, it is not a good question. I heard that it is better to have students that ‘‘know how to ask good questions, rather than students with great technical skills’’. The rationale here is that when you get stuck (and you will), you should know where to find help. Finding help, however, is not only about asking for help, but also about asking politely and asking at the right place (or for the right person). That is, communication skills are highly demanded. If you have students such as this one:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just heard from a student: &amp;quot;I joined CS because I don&amp;#39;t need to talk to anybody&amp;quot;. What we did wrong?&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/881490978774945792&quot;&gt;July 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;Remember them: Communication is part of your job!&lt;/p&gt;

&lt;p&gt;All in all, I think this approach can lead to significantly improvements, in terms of both technical and non-technical skills. I will give it a try soon (and report the result too, hopefully).&lt;/p&gt;

&lt;p&gt;If you have experience teaching CS with FOSS, why not reporting them? I’d love to read.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">My thoughts about this workshop</summary></entry><entry><title type="html">msr17 in 5 tweets</title><link href="http://localhost:4000/blog/msr17-in-5-tweets/" rel="alternate" type="text/html" title="msr17 in 5 tweets" /><published>2017-05-25T00:00:00-03:00</published><updated>2017-05-25T00:00:00-03:00</updated><id>http://localhost:4000/blog/msr17-in-5-tweets</id><content type="html" xml:base="http://localhost:4000/blog/msr17-in-5-tweets/">&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The Mining Software Repositories (MSR) conference is the real place to go, if you want to learn the new advances regarding msr techniques, datasets, and tools. As data science is becoming increasingly important at a steady pace, the same is true for the msr conference.&lt;/p&gt;

&lt;p&gt;This year, msr17 had a beautiful program. I had been tweeting a lot during the two conference days. This blog post represents my personal and biased tentative of summarizing the whole conference in only five tweets. (If you haven’t been there and want to know more about what happened, just search for the #msr17 hashtag on Twitter)&lt;/p&gt;

&lt;p&gt;To get started, there was a plenary session about what are the MSR research pillars. Among the topics, some attendees suggested Open Access is something that the msr community must adopt. To decrease the adoption barrier, one attended mentioned that Docker should be much more used, in particular, for increasing the reproducibility of msr studies. However..&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;MSR encourages people for making their code available. But only few &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; attendees use &lt;a href=&quot;https://twitter.com/Docker&quot;&gt;@docker&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/865921799317585921&quot;&gt;May 20, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;That said, maybe one of the first takeaway of #msr17 is that we need to encourage msr researchers to adopt such kind of tools that can help other researchers to replicate msr studies. Docker might be an interesting option. Indeed, there was a #msr17 paper about docker. According to this study, docker takes only 2 minutes to build, docker size can be as small as 4mb, and docker files have on average 3 revisions per year. That is, docker images are small, fast, and do not require much maintenance effort. It might not be that hard to convince your peers and students to use docker, right?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Most of the &lt;a href=&quot;https://twitter.com/Docker&quot;&gt;@docker&lt;/a&gt; image are Linux OSes. Size varies from 4MB to 200MB. &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866301745496018945&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;Another hot topic discussed at #msr17 was Continuous Integration (CI). Indeed, there was not only an entire session about CI, but also the mining track this year was all about CI. Interestingly, in 2016, there was no papers about CI at the msr conference. In 2017, #msr17 had 17 papers about CI (14 at the mining track, and 3 at the research track). One explanation is that high-quality, open-source CI servers became popular roughly in the last years. Other than that, most of the CI data was hidden in software companies databases – which is a challenge itself for a community that praises Open Access. Anyway, needless to say that, if you like CI, #msr17 was a real fun. Are you a Ph.D. student looking for a research topic? Maybe CI can be a good start point. However, the best yet most unexpected thing is that my co-authors and I won the Best Mining Challenge Paper Award! How cool is that?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Congratulations to &lt;a href=&quot;https://twitter.com/fernandocastor&quot;&gt;@fernandocastor&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gustavopinto&quot;&gt;@gustavopinto&lt;/a&gt; for the Best Mining Challenge Paper &lt;a href=&quot;https://t.co/9I2gvHo48p&quot;&gt;pic.twitter.com/9I2gvHo48p&lt;/a&gt;&lt;/p&gt;&amp;mdash; MSR 2017 (@msrconf) &lt;a href=&quot;https://twitter.com/msrconf/status/866378622596247553&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;The mining track was only possible due to the efforts from TU Delft folks, who created and maintained a high-quality CI dataset. Similarly, due to his seminal contributions to high-quality datasets (in particular to the Promisse repository), Tim Menzies won the Foundational Contribution Award. During his keynote talk, prof. Menzies mentioned that “There is not enough science in data science”, that is, there is too much knowledge waiting to be discovered in all this myriad of data. If that is the case, maybe the question is: where to start? prof. Menzies gave some insights on how to find important research problems:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What is the strangest thing in software science? &lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; &lt;a href=&quot;https://t.co/gXegdPrVBe&quot;&gt;pic.twitter.com/gXegdPrVBe&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866378094394867714&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;

&lt;p&gt;That is, figure out what is the strangest thing about your research and go mining!&lt;/p&gt;

&lt;p&gt;My last tweet was actually a farewell one. While #msr17 was a pleasant experience, I’m already looking forward to #msr18. #msr18 will take place at Gothenburg, Sweden, and Yasutaka Kamei is the General chair. I briefly talked with him, and he is very excited about organizing #msr18. I believe we can expect another awesome msr! See you there?&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/msr17?src=hash&quot;&gt;#msr17&lt;/a&gt; is now over. See you in &lt;a href=&quot;https://twitter.com/hashtag/msr18?src=hash&quot;&gt;#msr18&lt;/a&gt; in Gothenburg &lt;a href=&quot;https://t.co/rBGwoNhaIv&quot;&gt;pic.twitter.com/rBGwoNhaIv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/866390115182153729&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;/center&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">My personal and biased view about MSR'17</summary></entry><entry><title type="html">Where did I submit papers during my phd</title><link href="http://localhost:4000/blog/where-did-i-submit-papers-during-my-phd/" rel="alternate" type="text/html" title="Where did I submit papers during my phd" /><published>2017-04-08T00:00:00-03:00</published><updated>2017-04-08T00:00:00-03:00</updated><id>http://localhost:4000/blog/where-did-i-submit-papers-during-my-phd</id><content type="html" xml:base="http://localhost:4000/blog/where-did-i-submit-papers-during-my-phd/">&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;Publishing papers take time. If you want to publish in a good venue, it takes even more time. Start as early as you can.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;I often tell students that they should submit papers to good conferences. During my Ph.D., I think I have submitted to &lt;em&gt;some&lt;/em&gt; good conferences. This is a rant about my submissions, while a Ph.D. student. I remember submitting a reasonable number of paper. Most of them were through easychair, which I can see 21 submissions during 2011-2015 (I graduated in Feb 2015). Among them, 11 papers were accepted. I learnt a lot while working on them, although I’m really proud of less than half of them. Let’s tell the story.&lt;/p&gt;

&lt;p&gt;During my first year, I just made one submission. It was to &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2095067&quot;&gt;Workshop on Transitioning to Multicore (TMC’2011)&lt;/a&gt;. It was co-located with SPLASH, a prestigious SE+PL conference. During that time, I was looking for a problem to work on, and my advisor was interested at better understanding the state of the use of Java’s concurrency constructs. The workshop was a perfect fit. I worked in this paper for months in a row, and I remember working intensively on it during the deadline week. It was the first time in my life that I didn’t sleep trying to finish a paper. My English was terrible at the time and somehow I was responsible for writing most of the stuff. The paper had only 6 pages, and we had a ton of data (needless to say that we didn’t understand some numbers). At the end, the paper was conditionally accepted – and I was super excited about it. As of 2017, it’s on the top-5 of my &lt;a href=&quot;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=dOeggYMAAAAJ&amp;amp;citation_for_view=dOeggYMAAAAJ:u5HHmVD_uO8C&quot;&gt;most cited papers&lt;/a&gt;. I’m really proud of what I learnt during the process. That was it for 2011.&lt;/p&gt;

&lt;p&gt;In 2012, I submitted four papers. One to FASE (rejected; and I don’t even recall), one to EASE (accepted), one to TISE (rejected, I don’t recall either), and another one to ICSM (rejected). I don’t have a major merit for the acceptance of the EASE paper, I just helped reviewing some papers (it is a systematic literature review). The ICSM is another story. It was an extended version of the TMC paper. 10 pages long, much more comprehensive and polished. Again, this submission made me go to bed after 7am. The paper was rejected, and I started to dislike this paper.&lt;/p&gt;

&lt;p&gt;It was 2013 and I was scratching a problem for my Ph.D. I submitted an early version of it to SBLP (a Brazilian PL conference), and it was brutally rejected (scored 0, -2 and -3). That was shocking. I thought I had a competitive paper, but I was wrong. I kept working on it, aiming at PLATEU, another workshop co-located with SPLASH. At the day of the deadline, my advisor called me and said that we must withdraw our submission (we have submitted an abstract). He thought that the paper was so bad that does not even deserve be submitted to this workshop (I also have another last minute canceled paper. But this time I turned down the submission (we were aiming at GREENS, a workshop co-located with ICSE)). I kept working on this paper, and we submitted it to CSMR (reject) and afterwards to ECOOP (rejected). Four rejections in a row. I also submitted to the &lt;a href=&quot;http://refactoring.info/WRT13/&quot;&gt;Workshop on Refactoring Tools (WRT)&lt;/a&gt; – co-located with SPLASH. This was my first submission without my advisor. It was also my first study targeting StackOverflow. Reviewers seem to like it (scored 2, 3, and 3), and it got into. Although naive, I like this paper.&lt;/p&gt;

&lt;p&gt;2014 was the beginning of the end. My advisor liked my WRT paper, and suggested to do the same, but now targeting my Ph.D. subject. We did and submitted to MSR (accepted). This was my first paper related to my Ph.D. – and it was accepted one year before graduating! In parallel, I kept working on the SBLP/PLATEU/CSMR/ECOOP paper. This time, we submitted to OOPSLA, and we made it (YAY!). The second paper related to my Ph.D. was accepted – and I’m very proud of it. I did another spin off, and submitted to OSS (accepted). This was my first paper targeting Github. Still, I submitted a paper to SEPS (another SPLASH co-located workshop, do you see the pattern?). It was accepted, related to my thesis, and invited to submit an extended version. We submitted it right afterwards – three main chapters done.&lt;/p&gt;

&lt;p&gt;In 2015, in cooperation with another students, I submitted to MSR (accepted) and to FASE (accepted; this time I remember). Although I like both of these papers, the FASE paper is very dear to my heart. However, none of them helped me graduating. I also submitted to SANER (former CSMR), but it was rejected. Remember the TMC/ICSM paper? In 2015 we submitted it to JSS (accepted). The complete story of this paper can be found at my advisor &lt;a href=&quot;http://fernandocastor.github.io/general/2016/10/11/long-hard-road.html&quot;&gt;blog post&lt;/a&gt;. In 2015 I start submitting more regularly (the rejected SANER paper was also rejected at SBLP, but accepted at PLATEU), but it was after my Ph.D.&lt;/p&gt;

&lt;p&gt;It is April 2017, and I got another contribution of my Ph.D. accepted last month. We submitted it twice to IEEE SW (twice rejected), to IST (rejected), but it landed at CACM (YAY!). The first submission to CACM was more than one year after graduating. I still have one chapter of my Ph.D. thesis not published. We got rejections at ASPLOS and FSE. I think it is a strong paper, and it will eventually be accepted somewhere (maybe 3 years after my Ph.D.!).&lt;/p&gt;

&lt;p&gt;Although I missed some submitted papers (I remember submitting to GPCE and PLDI, but they are nowhere to be found), this list is pretty much comprehensive. Tell your story too :-)&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A brief story about my short research career</summary></entry><entry><title type="html">Transferring Knowledge from Systematic Reviews to Practitioners</title><link href="http://localhost:4000/blog/evidence-briefings/" rel="alternate" type="text/html" title="Transferring Knowledge from Systematic Reviews to Practitioners" /><published>2016-05-05T00:00:00-03:00</published><updated>2016-05-05T00:00:00-03:00</updated><id>http://localhost:4000/blog/evidence-briefings</id><content type="html" xml:base="http://localhost:4000/blog/evidence-briefings/">&lt;p&gt;Researchers have few incentives to write to the general public. On the other hand, practitioners are not used to consume software engineering research. This “Two Solitude” problem is well-known, and several attempts have been made in order to remedying it.&lt;/p&gt;

&lt;p&gt;In a study called &lt;a href=&quot;/lost+found/esem2016.pdf&quot;&gt;Evidence Briefings: Towards a Medium to Transfer Knowledge from Systematic Reviews to Practitioners&lt;/a&gt;, published at &lt;a href=&quot;http://alarcos.esi.uclm.es/eseiw2016/esem/&quot;&gt;ESEM’16&lt;/a&gt;, we propose and evaluate “Evidence Briefings”, a new method for dissaminating research results to practitioners. This model is inspired by the “Rapid Reviews”, a well-known method used in Evidence-Based Medicine (EBM). Rapid Reviews are aimed at reducing the effort of the traditional systematic reviews by provididing brief documents with few pages focusing only on the main findings that are useful to practice. More interestingly, however, is the fact that Rapid Reviews are gaining attention lately. Among 100 rapid reviews published between 1997 and 2013, 51% of them were published between 2009 and 2012.&lt;/p&gt;

&lt;p&gt;Differently than Rapid Reviews, Evidence Briefings are an one-page document, extracted from a systematic review. It uses the principles of Information Design and Gestalt Theory. The primary objective is to develop documents that are comprehensible, accurately retrievable, natural, and as pleasant as possible.&lt;/p&gt;

&lt;h1 id=&quot;method&quot;&gt;Method&lt;/h1&gt;

&lt;p&gt;Figure below shows an example of an Evidence Briefing.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/briefing-structure.png&quot; alt=&quot;Gustavo Pinto&quot; width=&quot;320&quot; height=&quot;421&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;There are several design techniques applied in this briefing. Here we discuss only ot ones about the structure of the briefing (represented by the numbers within squares). They are: (1) The title of the briefing. (2) A short paragraph to present the goal of the briefing. (3) The main section that present the findings extracted from the original systematic review. (4) Informative box that outlines the intended audience and explains the nature of the briefings’ content. (5) The reference to the original systematic review. (6) The logos of our research group and university. All concepts obtained in the previous steps were analyzed and applied in an evidence template, which is open-sourced under CC-BY license.&lt;/p&gt;

&lt;p&gt;We create Evidence Briefings to 12 representative systematic reviews that were selected in a tertiary study. All the 12 evidence briefings as well as the briefing’s template can be found in &lt;a href=&quot;http://cin.ufpe.br/eseg/briefings&quot;&gt;http://cin.ufpe.br/eseg/briefings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We evaluated the evidence briefings in terms of both content and format. We used personal opinion surveys to ask researchers and practitioners what they think about evidence briefings. Our group of practitioners is composed by the authors of the systematic reviews. Our group of practitioners is composed by StackExchange users that posted questions related to the systematic review in charge.&lt;/p&gt;

&lt;p&gt;Our sample of reseachers is composed by 7 authors that answered the questionnaire, which corresponds to 31% of the 22 invitations. Our sample of practitioners is composed by 32 StackExchange users that responded the questionnaire. This corresponds to 21.9% of the 146 invitations.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;In the practitioners survey, we asked six questions to evaluate the briefing’s content. Here we discuss only two of them. We start by asking “To what degree do you think the information available in the briefing we sent to you can answer your question on StackExchange?”. Among the answers, 10% said that the briefing has totally answered, and another 20% said that it has partially answered their StackExchange questions. Another 32% said that the briefing touches a related topic, but does not help to answer the question. The remaining 38% said that the briefing is not related to the question and, therefore, it does not help in answering it.&lt;/p&gt;

&lt;p&gt;In the next question, we asked “Regardless the briefing answers or not your question, how important do you think is the research presented on the briefing?”. We found that 62% of the respondents said that the researches presented in the briefings are “Very important” or “Important”. Moreover, 25%, 6% believe they are “Moderately important” and “Slightly Important” respectively. The remaining 6% believe they are “Unwise”.&lt;/p&gt;

&lt;p&gt;In the reseachers survey, we asked “How does the briefing cover the main find- ings of your paper?”. We found that 72% (5) of the respondents describe as “Very good” or “Good”. The remaining 28% (2) said that it is “Acceptable”. This suggests that even though we are not the authors of the research papers, we were capable of creating, at least, acceptable briefings.&lt;/p&gt;

&lt;p&gt;In terms of format, we observed that 71% (5) of them “Strongly agree” or “Agree” that it is easy to find information in the briefings. Another 71% (5) “Strongly agree” or “Agree” that the briefing interface is clear and understandable. Finally, 56% (4) “Strongly agree” or “Agree” that the briefings look reliable.&lt;/p&gt;

&lt;h1 id=&quot;concluding&quot;&gt;Concluding&lt;/h1&gt;

&lt;p&gt;Our results suggest that Evidence Briefings was positively evaluated. For instance, most of the researchers and practitioners believe that it is easy to find information on Evidence Briefings. Also, most of them believe that it they clear, understandable, and reliable. We believe that Evidence Briefings can play a role on transferring knowledge from systematic reviews to practice.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of an ESEM'16 paper</summary></entry><entry><title type="html">The story behind casual contributors</title><link href="http://localhost:4000/blog/the-story-behind-casual-contributors/" rel="alternate" type="text/html" title="The story behind casual contributors" /><published>2016-01-01T00:00:00-03:00</published><updated>2016-01-01T00:00:00-03:00</updated><id>http://localhost:4000/blog/the-story-behind-casual-contributors</id><content type="html" xml:base="http://localhost:4000/blog/the-story-behind-casual-contributors/">&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.github.io/lost+found/saner2016.pdf&quot;&gt;More Common Than You Think: An In-Depth Study of Casual Contributors&lt;/a&gt;”. For the impatient, there is a summary of the summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributors are rather common&lt;/strong&gt;. 48.98% of the overall contributors that we analyzed are actually casual contributors. However, these contributors are responsible for only 1.73% of the total contributions in our set of analyzed projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributions are far from being trivial&lt;/strong&gt;. After a manual inspection of a sample of casual contributions, we found that although 28.64% of them are related to grammar and typo fixes, 30.20% of them fix bugs, 18.75% propose new features, and 8.85% refactor code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributions are well liked&lt;/strong&gt;. These contributions are perceived as a beneficial phenomenon from the perspective of project maintainters and casual contributors. Personal needs was the most reported motivation for the casual contributors. As a shortcoming, project maintainters reported an increasing number of reviews, which demands time from core developers.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;Github changed the way developers contribute to OSS projects, in particular by providing a single process of contribution, which is called pull-based model. Using this model, developers do not need to have write access to the repository in order to provide changes to the software. This kind of environment, together with its contribution model, encourages newcomers to participate in the process.&lt;/p&gt;

&lt;p&gt;However, while some contributors want to have a key role on the project, some others do not share the same desire, although they still want to contribute nevertheless. In fact, it is well-known that popular projects have a restricted set of core developers, who drive the project, but also a broad set of “not that involved” developers, which are responsible for a long tail of small contributions.&lt;/p&gt;

&lt;p&gt;Despite the growing number of newcomers interested in contributing to OSS, little is known about this particular kind of contributor: the &lt;em&gt;casual contributor&lt;/em&gt;. In a study published on &lt;a href=&quot;http://saner.inf.usi.ch/&quot;&gt;SANER’16&lt;/a&gt;, we investigate (1) how common casual contribtuors are, (2) what are the characteristics of their contributions, and (3) how they are perceived.&lt;/p&gt;

&lt;p&gt;Here in this blog post, we will describe the main findings of the paper. If you want to know more about this research, consider reading the &lt;a href=&quot;http://gustavopinto.github.io/lost+found/saner2016.pdf&quot;&gt;pre-print&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;oss-selection&quot;&gt;OSS selection&lt;/h1&gt;

&lt;p&gt;We selected the top 20 most popular open-source projects hosted on Github written in: C, C++, Clojure, CoffeeScript, Erlang, Go, Haskell, Java, JavaScript, Objective-C, Perl, PHP, Python, Ruby, Scala, and TypeScript. Our initial corpus comprises 320 mature, non-trivial, OSS projects. However, we removed 45 false-positive projects (&lt;em&gt;e.g.,&lt;/em&gt; projects that are not software projects). Our final list of projects included &lt;a href=&quot;https://github.com/rails/rails&quot;&gt;rails&lt;/a&gt;, &lt;a href=&quot;https://github.com/django/django&quot;&gt;django&lt;/a&gt;, and &lt;a href=&quot;https://github.com/torvalds/linux/&quot;&gt;linux&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;surveys-with-practitioners&quot;&gt;Surveys with practitioners&lt;/h1&gt;

&lt;p&gt;We conducted two surveys with 197 the casual contributors and 64 project maintainers. These surveys were aimed at understanding the motivation, the benefits, and the drawbacks of this kind of contribution. Given the opportunity, I would like to thank the 261 developers that answered the survey. Assuming that it took about 10 minutes to answer the survey, the combined effort amounts to 2 full days. As one reviewer said, “The big deal is the story in the survey part”. &lt;strong&gt;Thank you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We observed that 65.8% of our respondents contribute to OSS at least once per month, and 75.2% of them are used to making casual contributions.&lt;/p&gt;

&lt;h1 id=&quot;how-common-are-casual-contributors-in-oss-projects&quot;&gt;How common are casual contributors in OSS projects?&lt;/h1&gt;

&lt;p&gt;Figure below presents an overall picture of some of the studied projects. Each histogram groups the projects analyzed of each programming language.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/post-casual/overall.png&quot; alt=&quot;Contributions per programming language&quot; height=&quot;330&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;To some extent, the analyzed projects have a similar characteristic: most of the contributors perform very few contributions. A non-negligible number of contributors (48.98%) performed a single contribution, which varies from programming language to programming language (&lt;em&gt;e.g.,&lt;/em&gt; C projects have 39% of casual contributors, whereas JavaScript has 61%). Based on this finding, we decided that the casual contributor is a contributor that performed at most one commit to a software project.&lt;/p&gt;

&lt;p&gt;This significant number of casual contributors might lead one to believe that an important proportion of the projects are intrinsically made by casual contributions. In reality, we found the opposite: these casual contributors are responsible for only 1.73% of the total number of contributions in our corpus of OSS projects (linux: 1.02%, rails: 3.46%, django: 3.19%). For a more detailed perspective, next figure shows the percentage of the casual contributors (top) and contributions (bottom) for each programming language analyzed.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/post-casual/percentage.png&quot; alt=&quot;Percentage of casual contributors&quot; width=&quot;400&quot; height=&quot;330&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;We can see that the programming language used matters. With some exception, projects written in static typed programming languages (&lt;em&gt;e.g.&lt;/em&gt;, C, TypeScript and C++) seem to be less favorable to receive casual contributions than those using dynamic typed ones (&lt;em&gt;e.g.&lt;/em&gt;, Ruby, Python and JavaScript). We believe this is because scripting programming languages are more concise than procedural and object-oriented ones, and size really matters when it comes to casual contributors.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-characteristics-of-a-casual-contribution&quot;&gt;What are the characteristics of a casual contribution?&lt;/h1&gt;

&lt;p&gt;We observed that the number of additions, deletions and files touched of contributions do not vary signifi- cantly among the analyzed projects. In particular, the project &lt;a href=&quot;https://github.com/thoughtbot/paperclip/&quot;&gt;paperclip&lt;/a&gt; is the one with the highest number of additions and deletions among the Ruby projects. See table below. With more than 8 years old, 63% of its contributors are casual ones, who contributed to 12.74% of the project.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Change&lt;/th&gt;
      &lt;th&gt;Mean&lt;/th&gt;
      &lt;th&gt;3rd Quartile&lt;/th&gt;
      &lt;th&gt;Std. Dev&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Additions&lt;/td&gt;
      &lt;td&gt;4.15&lt;/td&gt;
      &lt;td&gt;5.75&lt;/td&gt;
      &lt;td&gt;1.72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Deletions&lt;/td&gt;
      &lt;td&gt;1.02&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;0.26&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We also analyzed the contributions with the lowest number of additions and deletions. In fact, 22.7% of the casual contributions performed on Ruby projects changed a single line of code. Some of them include, (1) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/6f2ca93&quot;&gt;preventing a type from being null&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/d49bca2&quot;&gt;updating documentation files&lt;/a&gt;, or (3) &lt;a href=&quot;https://github.com/thoughtbot/paperclip/commit/62a9f64&quot;&gt;setting an option to a default value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also analyzed a &lt;a href=&quot;https://en.wikipedia.org/wiki/Statistical_significance&quot;&gt;statistically significant&lt;/a&gt; sample of 384 casual contributions. We identified 8 categories of casual contributions, summarized next. Afterwards, we discuss the top 3 ones.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;#&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;%&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bug Fix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;116&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30.20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Documentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;110&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;28.64%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Add new feature&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;72&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;18.75%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Refactoring&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;34&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8.85%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update dependencies&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6.51%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Improve error message&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3.64%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Improve resource usage&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2.08%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Add test cases&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1.30%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bug fix&lt;/strong&gt;. It is the most common kind of casual contribution found in our dataset. Some examples include: (1) &lt;a href=&quot;https://github.com/TransitApp/SVProgressHUD/commit/eebd6ec&quot;&gt;layout fix&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/koalaman/shellcheck/commit/f054e2e&quot;&gt;fixing compilation problems&lt;/a&gt;, and (3) &lt;a href=&quot;https://github.com/lulzlabs/AirChat/commit/03cd91d&quot;&gt;fixing a broken URL&lt;/a&gt;. Still, some bug fixes are far from being trivial, as the one that &lt;a href=&quot;https://github.com/torvalds/linux/commit/ddca3b8&quot;&gt;fixed a race condition at the linux operating system&lt;/a&gt;. Not only difficult to identify (such bugs are non-deterministic), the solution employed was also scattered between C preprocessors, which difficulties the reasoning of the compiled program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;. This category includes fix for typos, grammar, translation, formatting, and documentation issues. Although these contributions do not require significant programming effort, we found contributions that have &lt;a href=&quot;https://github.com/codecombat/codecombat/commit/237b97a&quot;&gt;thoroughly rewritten the original material&lt;/a&gt;. Also, we found that 27 out of these 110 contributions were fixing typos on code examples. This finding reinforces the importance of complete and verified working code examples.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Add New Feature&lt;/strong&gt;. Some of the examples include (1) &lt;a href=&quot;https://github.com/rg3/youtube-dl/commit/1a2adf3&quot;&gt;adding a new option for a command line tool&lt;/a&gt;, (2) &lt;a href=&quot;https://github.com/angular/angular.js/commit/da9eac8&quot;&gt;adding support for disabling an option&lt;/a&gt;, and (3) &lt;a href=&quot;https://github.com/apenwarr/sshuttle/commit/95c9b78&quot;&gt;adding support for IPv6 remote hosts&lt;/a&gt;. Interestingly, 24 out of the 72 contributions in this category were performed at the Linux operating system. Most of them were adding support for a new driver/device, which usually require few additions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-do-casual-contributors-and-project-maintainers-perceive-casual-contributions&quot;&gt;How do casual contributors and project maintainers perceive casual contributions?&lt;/h1&gt;

&lt;p&gt;We explicitly asked casual contributors and project maintainers “what motivates casual contributors’ behavior”, and the top cited perceived motivation was &lt;strong&gt;scratch their own itch&lt;/strong&gt;, highly mentioned by both casual contributors (90 out of 197) and project maintainers (23 out of 64). Part of this high number of casual contributions can be explained by the pull-request model, which provided a clear and easy contribution process. It was mentioned by 9 out of 64 project maintainters.&lt;/p&gt;

&lt;p&gt;Aligned with some studies on the motivation behind OSS contributors, we found that &lt;strong&gt;give back to community&lt;/strong&gt; fosters casual contributions, as said by one casual contributor “As I use a lot of OSS projects, I like to give back to the community”. Another motivation that is inline with the literature is &lt;strong&gt;gaining reputation and prestige&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Not among the top cited motivations, we found that four casual contributors reported that their motivation was &lt;strong&gt;improving the project&lt;/strong&gt;. The following quotes clearly illustrate such motivation: “I want to improve the quality of the project”, “That the project is in better shape after my contribution”.&lt;/p&gt;

&lt;p&gt;In addition to motivation, we investigated the reasons why casual contributors do not become full active contributors. &lt;strong&gt;Lack of time&lt;/strong&gt; was far the most cited reason by the casual contributors (96 out of 197), like one mentioned “I don’t have time to devote to a more active role”.  From the perspective of the project maintainters, &lt;strong&gt;Lack of time&lt;/strong&gt; was also the most mentioned reason why casual contributors do not become a long term contributor (17 out of 64 respondents). The following quote exemplify it: “People often don’t have the time or desire to be long term contributors”.&lt;/p&gt;

&lt;p&gt;We also found people who reported that they do not contribute because of their &lt;strong&gt;limited skills or knowledge&lt;/strong&gt;. Some also mentioned that the effort and knowledge needed to become a full contributor was too high. In both cases, they prefer to work on small or peripheral issues, which do not need specific abilities and usually require low effort. Like one of them said: “lack of skills (most of the low hanging fruit is gone)”. Project maintainers noticed this, and eight participants mentioned that &lt;strong&gt;code/project is hard to learn&lt;/strong&gt; was a reason why casual contributors do not become more active.&lt;/p&gt;

&lt;p&gt;We also asked the participants their opinion about the main benefits and problems brought by the casual contributors phenomenon. The overall impression is that the benefits overcome the drawbacks brought by this phenomenon. One quote from a project maintainter shows: “Every little piece helps everyone else. We stand on the shoulders of many small giants. Problems? None”.&lt;/p&gt;

&lt;p&gt;On the other side, the most reported problems were &lt;strong&gt;Time spent by the core members to review newcomers’ code&lt;/strong&gt; (reported by 12 people) and &lt;strong&gt;contributions may go unmaintained&lt;/strong&gt; (reported by 5 people).&lt;/p&gt;

&lt;h1 id=&quot;take-away-message&quot;&gt;Take away message&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Casual contributors&lt;/strong&gt; can see that they are not alone, and this behavior is, in fact, rather common in OSS communities. Also, we found that 22.93% of the casual contributions changed a single line of code. Thus, a developer does not need to be shy to contribute, even though her contribution is small. Yet,  this study revealed that project maintainers believe that casual contributions are a healthy way of contributing to OSS. Therefore, casual contributors can become even more motivated to do this kind of contribution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Project owners&lt;/strong&gt; can label tasks specific for casual contributors. Similarly, some casual contributors are more comfortable on solving low effort tasks. Thus, project owners can create specific roles for casual contributors (&lt;strong&gt;e.g.&lt;/strong&gt;, casual translators), which could also foster more engagement. Finally, since several projects maintainers do not have enough time to review casual contributions, they can introduce “contributions guidelines”, so that newcomers can read and get acquainted with them, therefore reducing code review effort.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of a SANER'16 paper</summary></entry></feed>