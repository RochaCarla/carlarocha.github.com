<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-02T23:38:07-03:00</updated><id>http://localhost:4000/</id><title type="html">Gustavo Pinto</title><subtitle>Professional webpage for Gustavo Pinto.</subtitle><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><entry><title type="html">How to send a student to attend ICSE (with zero budget)</title><link href="http://localhost:4000/blog/how-to-sent-a-student-to-icse/" rel="alternate" type="text/html" title="How to send a student to attend ICSE (with zero budget)" /><published>2019-03-31T00:00:00-03:00</published><updated>2019-03-31T00:00:00-03:00</updated><id>http://localhost:4000/blog/how-to-sent-a-student-to-icse</id><content type="html" xml:base="http://localhost:4000/blog/how-to-sent-a-student-to-icse/">&lt;p&gt;This year, an undergraduate student of mine first-authored a paper in the &lt;a href=&quot;http://gustavopinto.github.io/lost+found/msr2019c.pdf&quot;&gt;MSR
challenge track&lt;/a&gt; on the
presence of violations in JavaScript code snippets available on StackOverflow.
This blog post is an attempt to summarize all the steps taken to find a way
to send the student to attend the conference (and present his paper). Perhaps
it could help some other students to make it to ICSE.&lt;/p&gt;

&lt;p&gt;Overall, my student applied to four sources of funding: the &lt;a href=&quot;https://2019.icse-conferences.org/track/icse-2019-Student-Volunteers&quot;&gt;student volunteers&lt;/a&gt;, the
&lt;a href=&quot;https://2019.icse-conferences.org/track/icse-2019-Software-Engineering-Mentoring-Workshop&quot;&gt;Software Engineering Mentoring Workshop (SMeW)&lt;/a&gt;, the &lt;a href=&quot;https://www.sigsoft.org/resources/caps.html&quot;&gt;CAPS SIGSOFT&lt;/a&gt; grant, and an internal grant in my
university. I will detail each one of them next.&lt;/p&gt;

&lt;p&gt;As far as I can tell, the student volunteer program happens every single year in
ICSE (and also happens in several other software engineering conferences, such as
ICSME and ASE). In ICSE, an accepted student volunteer receives a free registration
for the main conference, but could also be scheduled to work in the co-located
events (granting one-two more registration days). Therefore, applying for student
volunteer greatly reduces one of the most costly part of attending a conference:
the conference registration. Besides of it, students volunteers also have an unique
opportunity to meet senior researchers that run the student volunteer program,
and also other students (which could ended up in new research opportunities).
I myself participated as a student volunteer in three conferences (2 OOPSLAs and
one ICSE); I could not recommend more.&lt;/p&gt;

&lt;p&gt;Moreover, this year there is the Software Engineering Mentoring Workshop. This
workshop is intended to “attract students to research careers in software engineering”.
I believe this was the first time that this workshop happened in ICSE, although
similar workshops happen on regular basis on programming language conferences
(e.g. &lt;a href=&quot;https://pldi19.sigplan.org/home/PLMW-PLDI-2019&quot;&gt;PLMW&lt;/a&gt;). My student applied
for this grant and received CAD 500,00 plus one day ICSE registration. But since
he received a free ICSE registration for his work as a student volunteer, this
one day registration was not used. Now he had enough for registration and hotel.&lt;/p&gt;

&lt;p&gt;Since he had a MSR paper, and was accepted for the mentoring workshop, he applied
for the CAPS funding. CAPS offer support for students and professionals that need
additional funding to attend SIGSOFT conferences. I have applied to this grant in
the past, but since I had received no response for my application, I thought that
this grant was not working. But I suggest my student to apply to it nevertheless.
I also discussed this matter on twitter (read thread &lt;a href=&quot;https://twitter.com/gustavopinto/status/1104505538732351490&quot;&gt;here&lt;/a&gt;), and Thomas Zimmermann, SIGSOFT Chair, responded that he would take care of the
CAPS program. Turns our that my student received USD 400,00 from CAPS (about 50%
of what he asked for). Although this amount does not fully cover a round trip
ticket from Belém to Montreal, it amortizes a good proportion of it.&lt;/p&gt;

&lt;p&gt;Finally, I applied for him in an internal travel grant that my university runs
for undergraduate students. The amount was fixed in around USD 330. Although
this is a very particular grant from my university, I am aware that other
Brazilian universities provide similar mechanism to help students. Now his trip
is fully covered (including eventual meals, ground transportation, travel
insurance, etc).&lt;/p&gt;

&lt;p&gt;Wrapping up, I am glad that there are many international grants aimed to
help students to attend software engineering conferences. But the trick thing is:
if one of these grants does not have a positive outcome, I would have to complement
his trip out of my own pocket (although I have a small grant running, I could not
use this grant to support his trip; I will leave this explanation for another blog post).
If his application was not accepted in two or more grants, his trip would become
extremely prohibitive. Still, these grants have different application dates
(and, consequently, notification dates). So eventually the student find himself in a
position such as: (1) what if I accept this grant but did not receive the other one?
(2) Could I say “yes” for a grant but eventually say “no” to it due to the lack of
additional support? (3) should I start making reservations, or should I leave it
to the last minute (when tickets often become more expensive)?
These questions are all valid and tough.&lt;/p&gt;

&lt;p&gt;Turn out that the stars in the sky were well aligned the applications were all
positive. Reflection upon this endeavour, maybe it would be interesting if all
these programs would have close notification dates to each other.&lt;/p&gt;

&lt;p&gt;Final tip: the &lt;a href=&quot;https://2019.icse-conferences.org/track/icse-2019-ACM-Student-Research#Call-for-Contributions&quot;&gt;ACM Student Research Competition&lt;/a&gt; also rewards the students with accepted papers
with up to USD 500,00 to help them defray their travel costs. My student did not
submit to ACM SRC (I may have forgotten; this blog post can help even myself in
the future).&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">Apply for every single opportunity (and cross your fingers)</summary></entry><entry><title type="html">Characterizing the Roles of Contributors in Scientific OSS Projects</title><link href="http://localhost:4000/blog/characterizing-the-roles-of-contributors-in-scientific-oss-projects/" rel="alternate" type="text/html" title="Characterizing the Roles of Contributors in Scientific OSS Projects" /><published>2019-03-05T00:00:00-03:00</published><updated>2019-03-05T00:00:00-03:00</updated><id>http://localhost:4000/blog/characterizing-the-roles-of-contributors-in-scientific-oss-projects</id><content type="html" xml:base="http://localhost:4000/blog/characterizing-the-roles-of-contributors-in-scientific-oss-projects/">&lt;p&gt;Recently some colleagues and I have been trying to understand the roles of contributors in open source scientific software projects. We studied 7 well-known scientific software projects that were hosted on GitHub (including &lt;a href=&quot;https://github.com/Chaste/Chaste&quot;&gt;Chaste&lt;/a&gt;, &lt;a href=&quot;https://github.com/dib-lab/khmer/&quot;&gt;Khmer&lt;/a&gt;, and &lt;a href=&quot;https://github.com/genn-team/genn&quot;&gt;Genn&lt;/a&gt;). For each selected project, we identified the roles played by different contributors by analyzing each projects’ documentation, websites, and other readily available sources. Using a mix of quantitative and qualitative data, we curate some findings that we believe are interesting for the broad Medium population. Here they are.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Senior researchers tend to be the most active and prolific contributors in terms of commits and file creation.&lt;/strong&gt; In four of the seven projects we studied, faculty and staff contributors were responsible for half or more of commits made to the project (with an average commit share of 72%). In five projects, senior members were also responsible for the majority of files created and, by that measure, the resulting project structure. This influence over the overall direction of the software project was also evident in the fact that senior researchers were the most likely to have interacted with files related to the build system, project metadata, and developer documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Junior contributors, especially graduate students, are critical drivers of new features as well as supporting activities like test creation.&lt;/strong&gt; On average, junior contributors were responsible for 42% of commits across all projects we studied; in one case, juniors were responsible for nearly 100% of all commit activity. The majority of these commits came from graduate students, who had the longest contribution periods among juniors (with 1.72 years of commit activity compared to 0.98 years for postdocs and 4 months for undergraduates). Similar to senior contributors, junior contributors are significantly involved in creating new features, improving existing capabilities, and fixing bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;An open-source model facilitates external contributions, but the results are mixed.&lt;/strong&gt; On one hand, an open- source model makes it easier to attract third parties to help grow and maintain the software. However, the software is also made for and by members of a relatively niche and intensely preoccupied community. In the majority of projects we studied, third party contributors tended to be domain expert users who were only active for one day. We also note, however, that these same contributors are more likely to offer defect-correcting commits, which is highly valuable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to know more about this study, you can read the preprint &lt;a href=&quot;http://gustavopinto.github.io/lost+found/msr2019b.pdf&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of a MSR'19 paper</summary></entry><entry><title type="html">Parem com essa discussão sobre Qualis</title><link href="http://localhost:4000/blog/parem-com-essa-discussao-sobre-qualis/" rel="alternate" type="text/html" title="Parem com essa discussão sobre Qualis" /><published>2019-01-12T00:00:00-03:00</published><updated>2019-01-12T00:00:00-03:00</updated><id>http://localhost:4000/blog/parem-com-essa-discussao-sobre-qualis</id><content type="html" xml:base="http://localhost:4000/blog/parem-com-essa-discussao-sobre-qualis/">&lt;p&gt;This post was written in Portuguese because it was aimed to Brazilian scholars.&lt;/p&gt;

&lt;p&gt;Como escrevi no último post, ainda estou começando minha carreira de pesquisador,
mas se tem uma coisa que é, no mínimo, irritante é essa discussão sobre Qualis.&lt;/p&gt;

&lt;p&gt;Nas reuniões que participo no programa de pós graduação da minha universidade,
esse tema é recorrente. Como é o único programa que eu participo, e como é a primeira
vez que participo, algumas coisas pra mim são novidades (não necessáriamente
interessantes). Por exemplo, inscrições para doutorado são feitas em fluxo contínuo,
e a avaliação dos candidatos é feita durante a reunião da pós, pelo colegiado.
Ou seja, não tem um grupo de trabalho que avalia as propostas. Basicamente quem
esteve presente na reunião tem direito de opinar no candidato. O edital é claro
com relação aos requisitos mínimos que o candidato deve preencher para entrar no
programa. No entanto, mesmo atendendo os requisitos, os documentos do candidato é
discutido (?!). Um tópico recorrente na discussão é que o candidato tem &lt;em&gt;n&lt;/em&gt; artigos
Qualis &lt;em&gt;X&lt;/em&gt;. Ou que tem em submissão um arquivo Qualis &lt;em&gt;X&lt;/em&gt;. Ou qualquer coisa
Qualis &lt;em&gt;X&lt;/em&gt;. O interessante é que a discussão é feita por membros do colegiado que
são de áreas diferentes, avaliando um pedido de inscrição de um candidato que pode
nem ser da área dos membros presentes. O numero de Qualis &lt;em&gt;X&lt;/em&gt; dirige a discussão.&lt;/p&gt;

&lt;p&gt;Nas reuniões do programa também se avalia pedidos de defesa (?!). Da mesma forma,
se discute se o aluno tem &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt;. Nas discussões de qualificação,
trancamento, etc.. tamém se discute o Qualis &lt;em&gt;X&lt;/em&gt;. Eu inclusive (!) já presenciei
discussões em bancas em que os membros discutem o famoso Qualis &lt;em&gt;X&lt;/em&gt;, não para fins
de (talvez) avaliar o que foi feito, mas, pior, para dirigir o que ainda precisa
ser feito (“para o aluno graduar, ainda é necessário &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt;”).&lt;/p&gt;

&lt;p&gt;Essa discussão é infinita. E não leva a lugar nenhum.&lt;/p&gt;

&lt;p&gt;Primeiro, o que quero dizer com &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt;? Que o aluno tem,
supostamente, bom domínio do problema? Boa capacidade de pesquisa? Liderança?
Inovação? Perseverança? Não. Nada disso. O &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt; apenas diz que
o aluno conseguiu publicar artigos que são mapeado pelo Qualis (basicamente qualquer um). Isso é bom? Não
necessáriamente. Isso é ruim? Não necessáriamente. Há alguns conferências/revistas boas
com má avaliação no Qualis, mas, pior ainda, há também várias conferências/revistas ruins bem
avaliadas no Qualis. E se o aluno tem &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt; em revistas predatórias?
“Ah”, (alguém pode dizer) “mas basta algum membro do comitê perceber isso e comentar
a respeito”. No entanto, como disse anteriormente, muitas das discussões sobre o
Qualis &lt;em&gt;X&lt;/em&gt; que já participei são feitas por membros avaliando trabalhos de fora
da sua área de atuação. Logo, uma possível resposta para a pergunta acima (o que
se quer dizer com &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt;?), é que o aluno sabe jogar com as regras
do jogo. O triste é que as “regas do jogo” estão culturalmente enraizadas e
espalhadas como um cancer (ou você nunca ouviu alguem falando do &lt;em&gt;n&lt;/em&gt; artigos
Qualis &lt;em&gt;X&lt;/em&gt; do fulano?).&lt;/p&gt;

&lt;p&gt;Por algum motivo, ao longo do meu doutorado, eu era um leitor avido do blog do
professor &lt;a href=&quot;http://matt.might.net/&quot;&gt;Matt Might&lt;/a&gt; (se você não conhece, seja o blog
ou a história do prof. Might, pare de ler agora, e vá conhecer). Um dos seus posts,
inclusive, viralizou na internet, o &lt;a href=&quot;The illustrated guide to a Ph.D.&quot;&gt;The illustrated guide to a Ph.D.&lt;/a&gt;.
Nesse post, o prof. Might conseguiu, de uma incrivelmente simples, ilustrar qual
o propósito de realizar um doutorado (ou uma pesquisa, de maneira mais ampla).
De acordo com ele, o motivo é &lt;strong&gt;&lt;em&gt;avançar as fronteiras do conhecimento&lt;/em&gt;&lt;/strong&gt;. Simples assim.
Perceba que não há menção nenhuma a artigos, revistas, muito menos (bleh) Qualis.
Avançar o conhecimento é o que deveria dirigir o interesse em possuir uma vida na
academia. Trazer luz ao desconhecido.&lt;/p&gt;

&lt;p&gt;Alguém pode perguntar: “mas um artigo Qualis &lt;em&gt;X&lt;/em&gt; não poderia também avançar o
conhecimento?”. Sim, poderia (mas não necessáriamente). O problema não é ter artigos
ter &lt;em&gt;n&lt;/em&gt; artigos Qualis &lt;em&gt;X&lt;/em&gt; publicados (o prof. Might mesmo tem vários; eu também
tenho).&lt;/p&gt;

&lt;p&gt;O que &lt;em&gt;drive me nuts&lt;/em&gt; é tomar decisão baseada no Qualis &lt;em&gt;X&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O que &lt;em&gt;drive me nuts&lt;/em&gt; é discutir trabalho alheiro baseado no Qualis &lt;em&gt;X&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O que &lt;em&gt;drive me nuts&lt;/em&gt; é delimitar uma tese de doutorado baseado no Qualis &lt;em&gt;X&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu sei que é muito difícil desassociar o Qualis da vida acadêmica. O ponto não é
esse. O ponto é discutir a produção dos pares por meio da contribuição científica,
e não por mesquinharias como Qualis X. Como mesmo o prof. Might colocou em &lt;a href=&quot;http://matt.might.net/articles/tenure/&quot;&gt;outro
post&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Life is too precious and too fleeting to waste my time on bullshit like tenure. I didn’t become a professor to get tenure. I became a professor to make the world better through science. From this day forward, I will spend my time on problems and solutions that will matter. I will make a difference.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Apenas pare com essa discussão sobre Qualis. Pare.&lt;/p&gt;

&lt;p&gt;Por fim: se você é novo em uma área e quer saber quais são os locais mais interessantes
para dedicar seu tempo e esforço, esqueça o Qualis. Olhe para plataformas como o
&lt;a href=&quot;http://csindexbr.org/&quot;&gt;CSIndexBr&lt;/a&gt;, veja quais são as conferências/revistas indexadas,
e gaste seu tempo somente nesses locais.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">Isso é irritante</summary></entry><entry><title type="html">Second year of professoring</title><link href="http://localhost:4000/blog/second-year-of-professoring/" rel="alternate" type="text/html" title="Second year of professoring" /><published>2018-12-28T00:00:00-03:00</published><updated>2018-12-28T00:00:00-03:00</updated><id>http://localhost:4000/blog/second-year-of-professoring</id><content type="html" xml:base="http://localhost:4000/blog/second-year-of-professoring/">&lt;p&gt;Following my blog post about my &lt;a href=&quot;http://www.gustavopinto.org/blog/first-year-of-professoring/&quot;&gt;first year of professoring&lt;/a&gt;, in this blog we
update the status for the current year. Let me revisit this wonderful year.&lt;/p&gt;

&lt;h2 id=&quot;teaching&quot;&gt;Teaching&lt;/h2&gt;

&lt;p&gt;I taught four courses this year, all of them to undergrad. This is the minimum
number of courses one professor can teach in a year in my university (the only
exception are professors that accumulate administrative roles, which is not
my case). I taught Databases 101, Advanced databases, Advanced Data structure,
and Object Oriented Programming.&lt;/p&gt;

&lt;p&gt;The good thing about these courses is that the
first three of them I have already taught last year, so I employed less time to
create the course materials (I only had to update them). The exception was the
Object Oriented Programming, which I have to start from scratch. I was heavily
inspired by the methodology used in this &lt;a href=&quot;https://www.youtube.com/watch?v=BFfxcOHnowQ&quot;&gt;on line course&lt;/a&gt;, made by Eduardo Guerra, who
teaches unit testing in the very second day, and use it throughout the course.
While I found it very interesting, looking back to the course, I believe students
did not find it very pleasant, and very few of them really mastered unit testing.
Part of it is, of course, my fault. I am still learning how to be a professor;
this is the first time I taught this course; and unit testing is, I believe, not
something very easy to teach. I noted that, in particular, during some of the
class assignments, which I already provided the test cases, the interfaces, and
asked students to create the concrete classes and fill up the method bodies.
Later on I unfortunately perceived that very few students really made it. Some
students were have basic issues with the Java programming language (even though
they learnt C before Java), and the use of more advanced features of an IDE (such
as debugging) did not help much them.&lt;/p&gt;

&lt;p&gt;The other classes I think went more smoothly.
However, the Advanced databases course is heavily based on database theories (e.g.,
concurrency, atomicity, storage, etc), and students have a hard time trying to
connect the dots between the theory and practice. In one particular assignment,
I asked students to build a very large dataset using (1) a binary file and (2) a
real database, and try to do some queries. The result of this assignment was
quite interesting, since students perceived that a full-fledged database often
perform worse than simple queries made over a binary file. During the Databases 101,
I asked students to play with the MSR dataset. I was surprised by some of the works
that students did; two of them in particular could be very competitive research papers,
if polished and enhanced here and there. The lesson I learnt from this course is
that I can take advantage undergrad students to do some good research work. However,
it also requires much more time from you (e.g., Besides advising, I spent many
hours dealing with the MSR dataset. I have to build the dataset twice, because
the machine that I was using to build the dataset was not robust enough. I also
have to add more physical memory to it).&lt;/p&gt;

&lt;h2 id=&quot;advising&quot;&gt;Advising&lt;/h2&gt;

&lt;p&gt;This year I started to advise one more master student (two in total), and I advised
seven undergrad students over their capstone projects. Three of the undergrad
graduated (two just graduated last week, and the other one graduated last semester).
I am particularly proud of the work that one undergrad did. This particular undergrad
was having a hard time to graduate (I think he was in school for 7–8 years, maybe more).
With some help from my collaborators, we were able to send his work to ICSE SEET,
which was gladly accepted. (In the last year blog post I mentioned that I was
impressed by this student and we potentially would submit his work to a good software
engineering conference.. things worked well) In this year, my first PhD (co-supervised) student
graduated, and I also co-supervised a master student. Overall, I am really happy
for the work that they did.&lt;/p&gt;

&lt;p&gt;Now the bad thing about advising: somehow, I ended up with students working in
many different research topics. Nearly, no research topic is close to the other,
so students could hardly collaborate. Another issue is that this approach requires
me much more cognitive effort. For instance, during a weekly meeting, I have to
load from my deep thoughts where we were in the last week, just to get back on track
(it is not “plug-and-play”). Besides that, I feel I’m not very familiar with the
related literature of all these kind of works, so then I cannot suggest good papers
to students and, even worse, the students may be working on something that is not
entirely novel. This is not to mention the need of 1–1 meeting (which could easily
drain all my agenda). As I perceive now, students should collaborate with each
other, and individual research topics should be parts of a more robust research
problem. I may need some time to fix it.&lt;/p&gt;

&lt;h2 id=&quot;research-and-service&quot;&gt;Research and Service&lt;/h2&gt;

&lt;p&gt;In 2018 I published 16 research papers (4 journals [SPE, EMSE, IST, and
JBCS], 10 conferences [ICSE: 2x, MSR: 2x, SBES: 2x, EASE, ESEM, OSS, SANER], 2
workshops [CHASE, VEM]). This year was by far the most productive one (in terms of
papers acceptance). Although I did not measure work hours, I suspect that this year
I spent less time on research than any other year (I have classes to teach, meetings,
a lot of service, other university commitments, etc). I also had my second kid,
which does not permit me to work from home anymore. This number of paper is, actually,
the collective effort of many collaborators. I myself was the first author of only
five papers. One thing that I’m particularly happy about these papers, is that
only two of them (the CHASE paper, and the IST paper) are short ones. Last year
I complained that &lt;em&gt;most&lt;/em&gt; of my contributions were short papers, and that I planned
to avoid short papers in 2018. It seemed to work well. This year I also started
to curate my &lt;a href=&quot;http://gustavopinto.org/cv-of-failures/&quot;&gt;CV of failures&lt;/a&gt; (I have 19 submissions rejected in this year).&lt;/p&gt;

&lt;p&gt;Another interesting thing is that this year I did not travel
to any international conference. I have been traveling to conferences, meetings, whatever,
for so many years (I had that most frequent flyer badge in two different air companies).
It requires a lot from you. A lot of money (perhaps public money, but it is not always
the case), but, more importantly, it requires a lot of time. Being away from home
while traveling so much is not the best way to enjoy two kids. For 2019, I also
plan to fly less and less. This in turn requires me not to submit to/attend conferences.
One thing that I thought is that by not attending conferences, I may ended up with
less collaborators. Fortunately, this did not happen to me (yet?). What I can
anticipate is that you might see myself less and less in international conferences
in 2019.&lt;/p&gt;

&lt;p&gt;Finally, in this work I reviewed a ton. I was invited to 24 PCs for 2018 conferences,
and I already participated in four PCs for 2019 conferences. I also reviewed seven
papers for journals [EMSE: 4, TSE: 1, SCP: 1, JBCS: 1]. I basically accepted any
invitation I received. Overall, I reviewed 53 papers, and wrote 30K words in reviews.
I am happy for all this work done, but … it was a lot. Let’s say I need 30 minutes
to write 500 words plus one hour to read the paper (a very conservative measure).
It would take me 68 hours (more than one week and a half) devoted only to review papers.
I cannot commit myself to all this work again in 2019. I hope you could understand
this when I turn down invitations.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">Second year of professoring</summary></entry><entry><title type="html">How do Scientists Develop Software</title><link href="http://localhost:4000/blog/how-do-scientists-develop-software/" rel="alternate" type="text/html" title="How do Scientists Develop Software" /><published>2018-02-26T00:00:00-03:00</published><updated>2018-02-26T00:00:00-03:00</updated><id>http://localhost:4000/blog/how-do-scientists-develop-software</id><content type="html" xml:base="http://localhost:4000/blog/how-do-scientists-develop-software/">&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.org/lost+found/saner-rene2018.pdf&quot;&gt;How Do Scientists Develop Scientific Software? An External Replication&lt;/a&gt;”. As the name suggests, we conducted an external replication (different authors in a different context) of a well-known paper about &lt;a href=&quot;http://files.software-carpentry.org/training-course/2012/08/hannay-survey-2009.pdf&quot;&gt;how scientists develop and use software&lt;/a&gt;. The original paper was published in 2009, and given the recent changes in the software development practices in the last few years (e.g., the introduction of social coding websites and the prevalence of on-line learning platforms) and unique challenges of scientific research (e.g., the frequent and unforeseen changes in requirements and the need for both highly specialized domain knowledge and programming expertise), we believe that we should update our understanding about this topic.&lt;/p&gt;

&lt;p&gt;In the original study, the authors conducted an on-line survey with 2,000 scientists. In our replication, we surveyed 1,574 R developers. One might argue that not all R developers are indeed scientists. We concur. To mitigate this threat, in our invitation email we kindly asked R developers that do not consider themselves as scientists not to answer the questionnaire. We also asked them not to share the questionnaire with their peers, since some of them might not be scientists as well. We also mined their R repositories to complement some of the findings. For instance, the following figure shows the number of projects with commits in the master branch over the last decade.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images/R-projects.png&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;The following table compares the main findings of the two studies:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Original  Study&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Replication Study&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;96.9% of the respondents state that informal self study is important or very important for developing scientific software (60.1% state that informal learning from peers is important or very important). Only 34.4% state that formal education at an educational institution is important or very important.&lt;/td&gt;
      &lt;td&gt;99% of the respondents agree that self-study was important or very important (60% suggested that learning from peers is important or very important). However, 35% of the respondents believe that formal education is important or very important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The importance of graduate studies is clearly greater than undergraduate studies. This, in turn, is clearly greater than that of high school studies. Formal training at work was considered as important or very important for only 13.1%.&lt;/td&gt;
      &lt;td&gt;Similarly, most of the respondents believe that graduate studies (72%) and their last five years at work (76%) were important or very important to learn what they know about software development. Our respondents also perceived High school (61%) and over the last 15 years at work (51%) as not important or not important at all.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;84.3% of the responses state that developing scientific software is important or very important for their own research. 46.4% state that developing scientific software is important or very important for the research of others&lt;/td&gt;
      &lt;td&gt;86% of the respondents believe that scientific software is important or very important to their own research. However, 63% of our respondents stated that developing software for the research of others is important or very important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;On average, scientist spend approximately 30% of their work time developing scientific software.&lt;/td&gt;
      &lt;td&gt;On average, our respondents spent 30% of their working hours developing software per week (min: 0%, 1st quartile: 10%, median: 20%, max: 100%, std dev: 23.73%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;53.5% of the respondents state that they spend more or much more time developing scientific software than they did 10 years ago (44.7% spend more or much more time than they did 5 years ago and 14.5% spend more or much more time than they did 1 year ago.&lt;/td&gt;
      &lt;td&gt;82% of the respondents believe that they spend ‘‘much more time’’ or ‘‘more time’’ developing software than 10 years ago; 72% when compared to the last five years. Over the last decade, there is also an increase in activity, in terms of commits, in the studied projects.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scientific software is either used by a very large number of people (more than 5,000 users) or by a very small number of people (less than three).&lt;/td&gt;
      &lt;td&gt;Our respondents work mostly alone (53% of the respondents develop software alone) or in small teams (another 42% develop software within a team of two to five). At maximum, we found 723 stars and 139 forks in the analyzed projects&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;The level of importance that scientists assigned to a software engineering concepts is mostly consistent with their understanding of this concept. Except for ‘‘software testing’’ and ‘‘software verification’’ scientists assigned a higher level of importance to these concepts than they judged understand.&lt;/td&gt;
      &lt;td&gt;Generally speaking, we observed that the respondents judged they knew less about the concepts of what they believe are important. A Chi-Square test confirmed that the scientist knowledge depends from what they judge important.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;There is no consistent trend of association that links an increase of project or team size to perceived importance of software engineering concepts.&lt;/td&gt;
      &lt;td&gt;After performed the ANOVA test, we could not reject the null hypothesis that project and team size influences the respondent’s perceptions about the software engineering concepts, once all p-values were higher than 0.05.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of a SANER'18 paper</summary></entry><entry><title type="html">What are quasi-contributors and how common are them?</title><link href="http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them/" rel="alternate" type="text/html" title="What are quasi-contributors and how common are them?" /><published>2018-02-11T00:00:00-03:00</published><updated>2018-02-11T00:00:00-03:00</updated><id>http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them</id><content type="html" xml:base="http://localhost:4000/blog/what-are-quasi-contributors-and-how-common-are-them/">&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;This is a summary of the paper “&lt;a href=&quot;http://gustavopinto.github.io/lost+found/icse2018.pdf&quot;&gt;Almost There: A Study on Quasi-Contributors in Open-Source Software Projects&lt;/a&gt;”. Quasi-contributor is a contributor that tried to contribute to open-source software but did not succeed, i.e., the pull-request was not accepted, for any reason. For the impatient, there is a summary of the summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quasi-contributors are rather common&lt;/strong&gt;. They are about 70% the number of actual-contributors. In some projects, there are more quasi-contributors than actual contributors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Many reasons for non-acceptance&lt;/strong&gt;. Quasi-contributors believe there is a lack of communication, commitment, and experience. Integrators agree with quasi-contributors that not needed pull-requests are among the most common cause for nonacceptance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1/3 of Quasi-contributors disagree with nonacceptance&lt;/strong&gt;. 32% of the quasi-contributors do not agree with the decision of not having their contribution accepted — for 19% of quasi-contributors that did not concur also felt demotivated or prevented to place additional contributions. 12% of the quasi-contributors reported that the feedback from the code review was not constructive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;p&gt;Although there is a need of workforce to drive open source projects, many developers, newcomers to a project, send contributions which are not incorporated into the source code and give up trying. To better understand quasi-contributors and their rejected contributions, we mined data and metadata of 21 well-known, nontrivial, and popular OSS projects. We also surveyed 335 quasi-contributors and 21 project integrators (maintainers that are in charge of integrating changes proposed).&lt;/p&gt;

&lt;p&gt;We observed that quasi-contributors are rater common. In three projects analyzed (angular.js, bootstrap, rails), there are more than 1,000 quasi-contributors in each one of them. In five out of the 21 projects, there are more quasi-contributors than actual ones. In some cases, the number of quasi-contributors is significantly higher: for instance, project bootstrap, has 2.3x more quasi-contributors than actual ones (it has 1,962 quasi-contributors and 844 contributors). On average, there are 480.9 quasi-contributors per project. Regarding the number of attempts, on average, a quasi-contributor tried  1.22 times (85% of the quasi-contributors tried only once). On the other side of the distribution, however, we found some quasi-contributors that tried really hard, but still did not succeed. In the bootstrap project, one quasi-contributor proposed 13 unaccepted pull-requests.&lt;/p&gt;

&lt;p&gt;We conducted a survey with quasi-contributors, and they mentioned several reasons for why the pull-request proposed was not accepted. The most common reason is &lt;strong&gt;superseded/duplicated&lt;/strong&gt; pull-request (e.g., “Other pull-requests fixed the same issues as my pull-requests”). &lt;strong&gt;Mismatch between developer’s and team’s vision/opinion&lt;/strong&gt; is also common (e.g., “when you add a new feature to the project, your vision can be out of tune with the vision of the project’s team, and this is natural”). We also observed a &lt;strong&gt;lack of interest from integrators&lt;/strong&gt; (e.g. “It was ignored maybe because it was a very minor fix”). We also asked integrators about the reasons for non-acceptance. According to them, the most common reason for nonacceptance is &lt;strong&gt;PR not needed/not relevant&lt;/strong&gt; (e.g., “[such contribution] solves the immediate/local problem but does not address the deeper systemic issue”). The second most common reason is &lt;strong&gt;Guidelines not followed&lt;/strong&gt;. According to one integrator, such guidelines can range from “coding style, lack of tests, or messy versioning history”. Interestingly, none of the integrators assumed the mea culpa, i.e., the &lt;strong&gt;lack of interest from integrators&lt;/strong&gt; aforementioned.&lt;/p&gt;

&lt;p&gt;Most of the quasi-contributors surveyed agreed with the decision of having the pull-request unmerged (67.4%) and that the comments were constructive (88.8%). However, the number of unmerged pull-requests, the 30.3% of the developers that reported demotivation, and the 32.6% that reported disagreement with the community decision are not negligible. Moreover, 99 quasi-contributors did not agree with the pull-request nonacceptance, and 62.6% of them (62) answered that this fact demotivated or prevented them from placing another pull-request.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of an ICSE'18 paper</summary></entry><entry><title type="html">A call for good figures in research papers</title><link href="http://localhost:4000/blog/a-call-for-good-figures-in-research-papers/" rel="alternate" type="text/html" title="A call for good figures in research papers" /><published>2018-01-09T00:00:00-03:00</published><updated>2018-01-09T00:00:00-03:00</updated><id>http://localhost:4000/blog/a-call-for-good-figures-in-research-papers</id><content type="html" xml:base="http://localhost:4000/blog/a-call-for-good-figures-in-research-papers/">&lt;p&gt;Over the last few years, I became more and more into creating good figures to use in research papers. It probably started when I was reading a book about &lt;a href=&quot;http://shop.oreilly.com/product/0636920034919.do&quot;&gt;data science&lt;/a&gt; in the mid of my phd. Back then I start to learn about matplotlib for Python and ggplot for R. I was somehow impressed by the quality of these figures and the reasonably low effort required to create them. I also remember that I convinced myself to update all figures of a &lt;a href=&quot;http://gustavopinto.org/lost+found/jss_2015.pdf&quot;&gt;30+ pages paper&lt;/a&gt; that we have been working on for, at least, &lt;a href=&quot;http://fernandocastor.github.io/general/2016/10/11/long-hard-road.html&quot;&gt;3 years&lt;/a&gt;. Needless to say that I was very proud about the new figures on the paper (and its eventual acceptance).&lt;/p&gt;

&lt;p&gt;But it was not always like that. In the first paper published during my phd, I used OpenOffice to create the figures. By the time, the quality of the figure didn’t bother much me; In fact, I was still learning what is research and how to do it. The quality of the figures was not more important than trying to finish a 6-page paper and submit for that first edition workshop that we never heard of. As a result, this figure came along with our workshop paper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/lost+found/figure+tmc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(If you agree that the above figure is far from being good, keep reading.)&lt;/p&gt;

&lt;p&gt;Figures should not only convey an information, but they should also do it easily and quickly (“a picture is worth a thousand words”, they said). However, it only works if you have good figures. For instance, would you be surprised if I tell you that the values of the red line of the third figure is greater than the red line in the first figure? Why would that be the case? This happens because these three figures are under different scales; this makes such a comparison misleading. Still, the x axis use different time windows for each figure, which is also misleading (I’m not sure if that was a typo or if the x axis indeed employs different time window). A simple fix (put the figures in the same scale and using the same time window) would make this figure much more comprehensible. This is why I wholeheartedly agree with Philip Guo when he says:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;paper-writing is like 95% making good figures, and then 5% describing those figures in a sensible way&lt;/p&gt;&amp;mdash; Philip Guo (@pgbovine) &lt;a href=&quot;https://twitter.com/pgbovine/status/765256392429047808?ref_src=twsrc%5Etfw&quot;&gt;August 15, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;Fast-forwarding to 2018, and after many other figures created throughout the course, I started to observe bad patterns that prevent researchers from plotting good figures (although I’m not assuming the figure I create are the best ones; but I’m always trying to improve this). Even though the presence of these bad patterns in a paper does not mean that one would argue for rejection, it will hardly convince anyone to accept it. Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Similar figures under different scale&lt;/strong&gt;: This is the problem address in the figure above. The solution is simple: employ the same y axis for all figures. (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/saner2016.pdf&quot;&gt;fig 1 of this paper&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save figures as PNG or JPG&lt;/strong&gt;: Or any other compressed figure format. These formats degrade the image quality, which is particularly relevant when our peers still have the culture of printing papers in b&amp;amp;w for review. Moreover, when reading on screen, if one wants to zoom in an image for a better understanding, compressed figures degrade even more. The solution: save figures using a vectorial format (e.g., eps or pdf).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;50 shades of the same color&lt;/strong&gt;: This is also to ease the review for those used to print in b&amp;amp;w. This happens when one uses different shades of the same colors, a common practice in heat maps (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/fase2015.pdf&quot;&gt;fig 11 of this paper&lt;/a&gt;). As a fix, instead of having 50 shades of blue, many heat maps can be done with 3-5 shades.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Skewed by outliers&lt;/strong&gt;: This is a common pattern. The data has outliers and the figure is skewed when they are present. Sometimes we are forced to remove them, otherwise they could limit the understanding of the figure. However, removing outliers only because they do not appear handsome in the graph is not a strong argument (although I did that myself too). A better approach is to use the logarithmic scale.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Labels with small font&lt;/strong&gt;: This makes it harder to understand the meaning of the figure (example: &lt;a href=&quot;http://gustavopinto.org/lost+found/ase2017.pdf&quot;&gt;fig 5 of this paper&lt;/a&gt;). Add to this a low quality JPG figure. No one would understand what the figure is supposed to say. The fix? Increase the font. If necessary, increase the figure size.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">Take care of your figures</summary></entry><entry><title type="html">First year of professoring</title><link href="http://localhost:4000/blog/first-year-of-professoring/" rel="alternate" type="text/html" title="First year of professoring" /><published>2018-01-03T00:00:00-03:00</published><updated>2018-01-03T00:00:00-03:00</updated><id>http://localhost:4000/blog/first-year-of-professoring</id><content type="html" xml:base="http://localhost:4000/blog/first-year-of-professoring/">&lt;p&gt;While I’m starting my second year of Assistant professor, it is worth to look
back and see how was my first year. It may help to improve my professoring
skills or maybe help someone else who is just about to start his academic
career. In numbers, last year I taught five courses (all of them new to me),
supervised tree urop students, and co-supervised tree masters student and one
phd student. In terms of service, I reviewed 12 papers to four conferences and
journals. I also published nine research papers and submitted two research grants.&lt;/p&gt;

&lt;p&gt;Let me distill this.&lt;/p&gt;

&lt;h2 id=&quot;teaching&quot;&gt;Teaching&lt;/h2&gt;

&lt;p&gt;I taught five courses in 2017, all of them for undergrad. My peers in the US
would consider this a very high workload, but I would say that this is the
normal workload in Brazil. In my department, in particular, no professor
teaches less than 4 courses per year. But a professor can teach as many as five
in a single semester. The exact number depends on some variables such as
the number of urop students or if the professor teaches grad courses. If the
value of the first variable is greater than 2 or if the second one is true, you
can teach the minimum number of courses in that given term (which is two).
One interesting thing in my university, which is quite common in other Brazilian
universities, is the fact that when you join an university as a professor, you
do not teach for grad school straight ahead. Instead, you should “apply” for
teaching in grad school. They do that to make sure only professors interested in
research are within the set of professors that teach grad courses. And your
permanence in this set depends if you are doing good work. Otherwise you are
out (of the grad school program) and should apply again. Important to say that you
can only supervise master or phd students if you are in a grad program. Not sure
if that makes much sense, but this is how things work over here. I applied in
the second semester and I can have master students this year (phd students only
after one master student graduate).&lt;/p&gt;

&lt;p&gt;Getting back to the courses, I taught Algorithms,
Databases 101, Operating Systems (Lab), Advanced Data structure, and Advanced
Databases. All these courses were new to me. It took a lot of time to create
the material for these courses, and I still have say they are not great. The
problem was that I was not &lt;em&gt;that&lt;/em&gt; excited with teaching. I like teaching but
my first semester workload was a kind of disappointing to me (I want to do
research and other things). I also have a hard time with one class of students
that were not motivated at all. This issue was completely new to me and I had
no idea on how to address it. I chatted with some colleagues and some of them
also reported the same felling. Last year I went to two educational-focused
software engineering conferences. I also discussed this matter over there, but
this time I went back with some possible solutions, which can be summarized in
PBL (Problem-based learning). The courses that I taught followed that traditional
lecture format (e.g., the professor talks, the students listen). Although
students have problems to work on, the most interesting ones were in
mid to the end of the course. Only later I realized that if a student is not
motivated from the beginning, it is not an interesting problem at the end of
the course that will change her mind.&lt;/p&gt;

&lt;p&gt;Although I was very passionate about some of the topics, it was hard to
transmit such passion to students. One initiative that I’m willing to give
another shot is to &lt;a href=&quot;http://gustavopinto.org/codefather/training-students-with-open-source-software/&quot;&gt;bring open-source software projects inside the classroom&lt;/a&gt;.
Generally speaking, the students really learned new skills and enjoyed the work.
There were also students that faced many barriers with Git and those that did not even try.
Students’ motivation is still one thing that I should learn more.&lt;/p&gt;

&lt;h2 id=&quot;advising&quot;&gt;Advising&lt;/h2&gt;

&lt;p&gt;Advising students is one of the most fun and interesting thing in this academic
career, I think. However, as I said, it was not straightforward to join in the
grad school program. Since I just get into it, one could think now I can have many
students. However, new professors are limited to one master student per year. They say
that because they do know how do the professor work. Only after the first
master student graduate is when you can have
as many as you want. Actually, up to three master students per year (department
rules). The good thing about this restriction is that it forced me to
look for collaborators. In 2017 I co-supervised four students (3 masters and
1 phd). Only one of them is a student at my university. 3/4 of these students
were fist authors in papers published last year. The one without paper has
one paper under submission and is currently working in another one. I believe
these are good results. I also advised three urop students. This group of
students was particularly interesting to me because I perceived that there are
many undergrad students that are as skilled as or even more skilled than
many master students. One particular urop student really impressed me and we may
submit her work to a good software engineering conference in 2018 (which
sometimes is hard to do with master students).&lt;/p&gt;

&lt;h2 id=&quot;research-and-service&quot;&gt;Research and Service&lt;/h2&gt;

&lt;p&gt;In 2017 I published nine papers. However, six of them are short papers. I have
to say that I was tempted to submitted that many short papers (some of them were
very old stuff that I’d pay to not touch in the data anymore). Still, I am
the first author of four papers (although two of them are remaining
unpublished parts of my phd). The other two papers pretty much reflect my lack
of students: short papers with little depth. Don’t get me wrong. Short papers are
good: the information is quickly transmitted and easily consumed. However,
publishing a lot of short papers is not a synonym of high quality research.
I plan to do less of it in 2018.&lt;/p&gt;

&lt;p&gt;Finally, I reviewed 12 papers for four conferences. This is a low rate and I’d
like to improve it. However, I’ll only receive more invitations if I keep
publishing good work.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">A summary of new career</summary></entry><entry><title type="html">Training students with open-source software</title><link href="http://localhost:4000/blog/training-students-with-open-source-software/" rel="alternate" type="text/html" title="Training students with open-source software" /><published>2017-08-30T00:00:00-03:00</published><updated>2017-08-30T00:00:00-03:00</updated><id>http://localhost:4000/blog/training-students-with-open-source-software</id><content type="html" xml:base="http://localhost:4000/blog/training-students-with-open-source-software/">&lt;p&gt;Following my recent experience with &lt;a href=&quot;http://gustavopinto.org/codefather/posse2017-experience-report/&quot;&gt;POSSE workshop&lt;/a&gt;, I went back decided to put all of that in practice as soon as possible. My setting was an operating system lab, which consisted of 2 hours class per week. The course has two parts: first we cover basic Linux principles and commands, followed by some shell scripting. The second part was about concurrent programming. In such short course, students were introduced to basic threading and synchronization stuff. Although it touches basic concepts, I recognize that the second part is harder than the first one. Concurrent programming is hard itself. Exposing concurrent programming to second year students is even harder. Because of that, I decided to leverage open-source only in the first part of the course.&lt;/p&gt;

&lt;p&gt;Since the first part was about Linux and shell script, I motivated students to work with &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/&quot;&gt;funcoeszz&lt;/a&gt;, which is a long history, fairly active, Brazilian open-source software. More interesting to our subjects is that fact that this project is mostly written in shell script. Another important decision here was to focus on a Brazilian open-source software. Before students joined the project, I thought that students &lt;em&gt;may&lt;/em&gt; benefit from having a community of developers that speak the same language. Turns out that students benefited a lot from sharing the same language. Still regarding the section of the open-source project, I didn’t pay much attention whether funcoeszz had an active community of not. Again, turns out that one of the project maintainers (&lt;a href=&quot;https://github.com/itamarnet&quot;&gt;@itamarnet&lt;/a&gt;) is very active. He answered most (all?) questions that students raised in a timely manner (e.g., many questions were answered in the same day!). Low language barrier and an active community were key (unexpected) decisions.&lt;/p&gt;

&lt;p&gt;Students worked in groups. Students were told to follow several “steps for contributing”. For instance, they were told to (1) create a blog post about the given open-source project, (2) report bugs, (3) improve documentation, and (4) implement a change to the source code. In my opinion, the 1-3 steps were required because, if students start with implementing changes, they might face problems that might demotivate them to contribute. Turns out that most of the students skipped the 1-3 steps and went directly to implement the source code changes. I also asked students to find and fix an issue. This did not happen as well. Students proposed the changes they thought would be useful. To perform these tasks, students had 3 weeks. Ideally, in the first week students would get acquainted with open-source and the pull-request model. In the second week students would try funcoeszz locally, and look for bugs. In the final week, students would learn the code and propose changes. In practice, none of this happened. Students left the assignment to the very last minute.&lt;/p&gt;

&lt;p&gt;Students have no Github or git background. I was not able to teach them git basics because (1) the course was too short and (2) it was not the main goal of the course — they should catch up for themselves. Turns out that &lt;em&gt;all&lt;/em&gt; students used the Github web interface to propose changes to the source code. Even with no pull-request background, total of 9 pull-requests were made. All pull-requests performed were aimed at introducing new features – no one was interested in fixing bugs. This might make sense. To fix a bug, students might need to understand more about the source code than when introducing a feature. As regarding the contributions, I was kinda impressed to see that many of them were non-trivial. For instance, although incomplete, one student proposed a &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/pull/433&quot;&gt;JSON parser&lt;/a&gt;. The project maintainer, although liked the contribution, politely said that it’s incompleteness turns it unlikely to be accepted. He ended up encouraging the student to keep working on the pull-request, ‘‘I hope you take this project forward’’ (which did not happen unfortunately). Another interesting example is a pull-request that introduces a feature that, given a person id, it checks the state from where the person comes. In Brazil, there is an unified id system, with 11 digits. The pull-request gets the 9th digit, then matches the digit in a list states associated with that given digit, and returns the state found. This contribution went through a thorough code review. After making her suggestions, the project maintainer said that she would merge the contribution, if the the suggestions were made. In this case, the student did implement the suggestions, but the pull-request was not yet accepted (the project maintainer seems currently busy). After that, the student expressed to me her positive perception about this process. In particular, she highlighted that she learnt a lot with the code review process.&lt;/p&gt;

&lt;p&gt;On the other hand, students opened 9 issues. All issues were reporting bugs – no one was proposing new features or asking questions. Students might not be aware that issues serve for different purposes. Unfortunately, most of the issues had shallow description. For instance, in issue &lt;a href=&quot;https://github.com/funcoeszz/funcoeszz/issues/429&quot;&gt;429&lt;/a&gt;, the student said the “the zztop function is not working on my side”. The student did not provide any details about the environment she was using. Fortunately, our project maintainer politely asked additional questions about the problem that student was facing. It is worth noting such triangulation challenge. On the one hand, students have no idea on how to report a bug. On the other hand, this particular project did not have explicitly guidelines for reporting bugs. Still, I myself thought I do not need to teach students how to report a bug, since it is fairly easy. Although there is no universal right or wrong, I recognized that all of us could do a better job.&lt;/p&gt;

&lt;p&gt;I acknowledge that introducing open-source software to such course made students shift the focus to non-related operating system activities, such as creating blog posts or learning Github. However, I think students learned several important lessons that are beyond the scope of the course. However, I also acknowledge that professors need to find a good balance between the goal of the course and the open-source thing in order to not lose focus. In this particular instance, I think the were more benefits than drawbacks. I plan to run it again next semester. Let’s see how it goes.&lt;/p&gt;

&lt;h3 id=&quot;my-take-away-is-not-necessarily-what-i-did-but-what-i-learnt&quot;&gt;My take-away is (not necessarily what I did, but what I learnt):&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Find active open-source projects;&lt;/li&gt;
  &lt;li&gt;Make sure that there is at least one maintainer that could provide help;&lt;/li&gt;
  &lt;li&gt;Look for maintainers that speak the same language that students speak;&lt;/li&gt;
  &lt;li&gt;Introduce yourself to the maintainer, and explain your goals;&lt;/li&gt;
  &lt;li&gt;Teach students the basics for contributing (if possible);&lt;/li&gt;
  &lt;li&gt;Put students to work on small problems first;&lt;/li&gt;
  &lt;li&gt;Ask for partial results; Do not wait for the last minute;&lt;/li&gt;
  &lt;li&gt;Have fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: If you are a researcher and this topic interest you, I just published a &lt;a href=&quot;https://github.com/gustavopinto/gustavopinto.github.com/raw/e63b8eac596ff65030a6d82baf67bcbb0019b2dd/_site/lost%2Bfound/cseet2017.pdf&quot;&gt;paper on this topic&lt;/a&gt;. Happy reading.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">My first experience training students with OSS</summary></entry><entry><title type="html">POSSE 2017 An experience report</title><link href="http://localhost:4000/blog/posse2017-experience-report/" rel="alternate" type="text/html" title="POSSE 2017 An experience report" /><published>2017-07-03T00:00:00-03:00</published><updated>2017-07-03T00:00:00-03:00</updated><id>http://localhost:4000/blog/posse2017-experience-report</id><content type="html" xml:base="http://localhost:4000/blog/posse2017-experience-report/">&lt;p&gt;POSSE (Professors’ Open Source Software Experience) is a workshop aimed at bringing world-wide professors to discuss how they can improve their CS courses in order to take advantage of free/open-source software (FOSS for short). FOSS is a topic very dear to my heart. When I was a student, I participated in several FOSS conferences and I also used to contribute to some FOSS projects. As a researcher (and, eventually, as a professor) I shifted my interest a bit. Although I’m not coding as much as I would like to, I’m still interested in FOSS. Indeed, some of my research research is about FOSS (e.g., communities, engagement, perceptions, etc). In addition, as of today, I’m a faculty running for tenure, with nearly no previous teaching experience. Needless to say that I was with high expectations for the workshop.&lt;/p&gt;

&lt;p&gt;This year the workshop took place at the beautiful Bologna, Italy. This blog post describes my personal yet biased view about the 2 intensive days of chatting with other professors about CS courses, open-source, pasta, and wine. The workshop was a mix of several lectures and group activities. Although I agree that both parts are equally important, this blog post is focused on the lecture part, which I took some notes  (I did not have time to write down notes during the group activities).&lt;/p&gt;

&lt;p&gt;One of the first advice for professors that want to introduce FOSS in their courses is to inform students upfront that the course will not be a normal one. That is, the professor is not supposed to know everything about the FOSS under study (in fact, depending on the FOSS, no one knows), although, professors have to figure out with students what they do not know — which is perfectly fine. It is important to note that the learning curve is significant for both faculties and students. On the other hand, this approach provide excellent opportunities for technical/non-technical learning. We need to adapt the learning approach, though.&lt;/p&gt;

&lt;p&gt;To minimize the learning curve, professors need materials. Good materials can be found at the &lt;a href=&quot;http://teachingopensource.org/&quot;&gt;teachingopensource.org&lt;/a&gt; and at the &lt;a href=&quot;http://foss2serve.org/&quot;&gt;foss2serve.org&lt;/a&gt; websites. Take the time to explore them – they have a rich database.&lt;/p&gt;

&lt;p&gt;While you learn something new from these websites, think about how students can contribute to open-source. One point that was largely debated is that open-source contributions is not only about code. There are many many ways that one can contribute – code is only one of them. Indeed, in order to be a FOSSer, a student does not even need to commit changes to a repository. A FOSSer can (1) create a blog post, (2) test the software, or (3) answer questions in a malling list. There are, at least, &lt;a href=&quot;http://foss2serve.org/index.php/50_Ways_to_be_a_FOSSer&quot;&gt;50 ways that one can contribute to FOSS&lt;/a&gt;. Find one that can fit your needs and tell students to do that.&lt;/p&gt;

&lt;p&gt;However, we cannot throw a student that does not how to swim in the deep end of a pool and say: swim. We need a scaffold. Some questions you should ask yourself: What we need to do to contribute to FOSS? What are the steps? Forget students! What I have to do? After you figure out, think about how can you teach students to do that?&lt;/p&gt;

&lt;p&gt;Since both professors and students are immersing into not well-known waters, it is important to have a contact within the FOSS community, who could provide help. How to find a contact? One way is to observe the community. Examples include: (1) Go to an IRC channel, (2) assign a malling list, or (3) participate in a slack group. After a while, you would be able to answer questions such as: Is this community active? Do they answer novice questions? Can you tell who are the core developers?&lt;/p&gt;

&lt;p&gt;If this community seems to be a good one, then it is time to introduce yourself, explain that you have some students that might be able to contribute, describe your goal, etc. Is someone willing to help? Good! No? Do not give up. Repeat until you find a suitable community. If we have success finding good communities, the chances that students succeed should be higher.&lt;/p&gt;

&lt;p&gt;Some students have a hard time trying to find meaningful things to contribute during the short term of a course. Some FOSS projects provide labels for “easy” tasks, while others provide Roadmaps (i.e., known features/bugs that the FOSS project want to have done/fixed for the next release). These are good ways to search for meaningful tasks. However, Roadmaps might contain critical bugs. Although the community do want to get them fixed (therefore they might provide good support for the student), such bugs might be non-trivial, requiring students to spend much time in learning (instead of coding) activities. It might be tempting to work on such fancy bugs. However, the suggestion is not to work on the critical path! This might delay the contribution process — and demotivate students.&lt;/p&gt;

&lt;p&gt;Another thing to pay attention are the release dates. If there are releases scheduled during the course, contributions might be frozen for a while. Another challenge is related to architectural changes. If that is the case, some contributions might not be needed anymore (e.g., thanks for the fix, but this feature does not work like that anymore). The best way to prevent such problems is by understanding your community. Invest some time to figure out its needs and where it plans to go.&lt;/p&gt;

&lt;p&gt;Remember that the goal is to engage students. Therefore, in some classes (e.g., high school, introductory classes), placing a source code contribution is not necessary. In some cases, understanding the steps for contributing might be ideal. In any case, some professors mentioned that the acceptance of a contribution should not be graded. This is out of the your (and students’) control. Instead, students can earn additional credits if the contribution is accepted.&lt;/p&gt;

&lt;p&gt;It is important to change the mindset of having everything done before publishing. This not gonna work with FOSS. Teach students to release early and release often. This should be the norm. Also, tell students to avoid risks by working on small problems. One way to start is by working with documentation issues. Remember students that a lot of bugs are not code bugs. Typos are bugs! It is also important to engage students early – do not way for the last minute to provide a patch. How to do that? Create such assignment: get a patch by the end of this week.&lt;/p&gt;

&lt;p&gt;After passing the first contribution barrier, prepare students to become independent in the FOSS world. Most of it is done by teaching students how to ask good questions. Rule of thumb: if Google has the answer, it is not a good question. I heard that it is better to have students that ‘‘know how to ask good questions, rather than students with great technical skills’’. The rationale here is that when you get stuck (and you will), you should know where to find help. Finding help, however, is not only about asking for help, but also about asking politely and asking at the right place (or for the right person). That is, communication skills are highly demanded. If you have students such as this one:&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Just heard from a student: &amp;quot;I joined CS because I don&amp;#39;t need to talk to anybody&amp;quot;. What we did wrong?&lt;/p&gt;&amp;mdash; Gustavo Pinto (@gustavopinto) &lt;a href=&quot;https://twitter.com/gustavopinto/status/881490978774945792&quot;&gt;July 2, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;Remember them: Communication is part of your job!&lt;/p&gt;

&lt;p&gt;All in all, I think this approach can lead to significantly improvements, in terms of both technical and non-technical skills. I will give it a try soon (and report the result too, hopefully).&lt;/p&gt;

&lt;p&gt;If you have experience teaching CS with FOSS, why not reporting them? I’d love to read.&lt;/p&gt;</content><author><name>Gustavo Pinto</name><email>gpinto@ufpa.br</email><uri>http://www.gustavopinto.org</uri></author><summary type="html">My thoughts about this workshop</summary></entry></feed>